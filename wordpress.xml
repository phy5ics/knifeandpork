<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log into that blog as an administrator. -->
<!-- 2. Go to Manage: Import in the blog's admin panels. -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress/2.6.3" created="2013-09-02 18:57"-->
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>phy5ics</title>
	<link>http://blog.phy5ics.com</link>
	<description></description>
	<pubDate>Fri, 01 Apr 2011 17:07:03 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.6.3</generator>
	<language>en</language>
	<wp:wxr_version>1.0</wp:wxr_version>
	<wp:base_site_url>http://blog.phy5ics.com</wp:base_site_url>
	<wp:base_blog_url>http://blog.phy5ics.com</wp:base_blog_url>
	<wp:category><wp:category_nicename>air</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[AIR]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>announcements</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Announcements]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>as3</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[AS3]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>bluetooth</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Bluetooth]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>flex</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Flex]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>general-technology</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[General Technology]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>gps</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[GPS]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>leopard</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[leopard]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>make-controller</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Make Controller]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>mongodb</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[mongodb]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>physical-computing</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Physical Computing]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>python</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Python]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>rfid</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[RFID]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>schematic</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Schematic]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>twisted</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Twisted]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>web-services</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Web Services]]></wp:cat_name></wp:category>
	<wp:tag><wp:tag_slug>hosting</wp:tag_slug><wp:tag_name><![CDATA[hosting]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>mediatemple</wp:tag_slug><wp:tag_name><![CDATA[mediatemple]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>mongodb</wp:tag_slug><wp:tag_name><![CDATA[mongodb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>python</wp:tag_slug><wp:tag_name><![CDATA[Python]]></wp:tag_name></wp:tag>
		<item>
<title>Off-Grid Computing: Part 2</title>
<link>http://blog.phy5ics.com/?p=8</link>
<pubDate>Tue, 30 Nov 1999 00:00:00 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/?p=8</guid>
<description></description>
<content:encoded><![CDATA[In the case of my observations, all field data gathered is collected on cards that are divided up into an uneven grid of cells for data entry.Â  Again, this information is geographically-oriented, so a means of creating relationships with physical spaces would make sense, especially when one desires to create a visualization of that data.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>8</wp:post_id>
<wp:post_date>0000-00-00 00:00:00</wp:post_date>
<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name></wp:post_name>
<wp:status>draft</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Choosing AIR</title>
<link>http://blog.phy5ics.com/?p=9</link>
<pubDate>Tue, 30 Nov 1999 00:00:00 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/?p=9</guid>
<description></description>
<content:encoded><![CDATA[However, as with most newly-introduced technologies, there was little emphasis placed on how to determine the appropriateness of AIR as a platform for the deployment of a particular application.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>9</wp:post_id>
<wp:post_date>0000-00-00 00:00:00</wp:post_date>
<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name></wp:post_name>
<wp:status>draft</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Getting Started with AS3 and the Make Controller - Part 4</title>
<link>http://blog.phy5ics.com/?p=19</link>
<pubDate>Tue, 30 Nov 1999 00:00:00 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

<guid isPermaLink="false">http://phy5ics.com/blog/?p=19</guid>
<description></description>
<content:encoded><![CDATA[<strong>Doing Something "Useful" With Sensor Input </strong>

In Parts 1-3, we spent some time examining the basics of the Make Controller, OSC and how it works with (or in some cases doesn't work) ActionScript 3.   Now, we can start to do some things that might actually be construed as being useful for a project.  To start, let's get the hardware set up by hooking up a light sensor to analogin0.  With that done, we can write some code to use the input from the light sensor as it detects ambient light levels to control the opacity of a sprite on the stage of our SWF.

<!--more-->
In keeping with the grand tradition of laziness, ahem, I mean re-usable code, we'll start with the code from the last example, as that provides a decent framework to start with.  In the last example, the values passed along by OSC from the sensor were simply traced out to Flash's output console.  To do something useful with it, the key is to look at the incoming packets and parse out the ones that we need to pass on to other functions.  This can be done adding a switch statement in the onPacketIn event handler as follows:

<pre lang="actionscript">
private function onPacketIn(evtOSC:OSCConnectionEvent):void {
switch(evtOSC.data.name) {
case "/analogin/0/value":
changeBackgroundAlpha(evtOSC.data.data);
break;
}
}
</pre>

Note: It is of course possible to use an else/if statement to accommodate this same functionality.  In general, I opt for case statements, as I know the explicit values that are to be expected in the switch.  This is also more efficient, as the AVM knows what values to look for and ignores the rest, whereas in an else/if statement, all values must be evaluated regardless of whether or not they are relevant to that piece of code.  That being said, to "listen" to another input, another case would be added that contains the address of the input being listened to and also a function to handle that input.

Here, as an OSCConnectionEvent object is passed into the function, we look for the name of a specific address on the application board (evtOSC.data.name) that sent the OSC packet.  When that address matches something that is needed by our application, we can then send the value of that input to a function that does something useful with it.  In this case, we'll pass the value sent by the light sensor to a function called changeBackgroundAlpha().  That function looks like:

<pre lang="actionscript">
private function changeBackgroundAlpha(intValue:int):void {
var nAlphaRatio:Number = (1 / 1024);
var nNewAlpha = nAlphaRatio * intValue;
this.getChildAt(0).alpha = nNewAlpha;
}

Take a look and notice that I'm setting up a ratio between the input value, which could be anywhere from 0-1023 and an alpha value, which can only be 0-100.  After that relationship is established with some simple math, we can set the value of our sprite on the stage to a new value that is directly proportional to the value determined by the sensor.

In the next article, we'll look at using ActionScript to mediate communication between a sensor and an output device that are both attached to the Make Controller.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>19</wp:post_id>
<wp:post_date>0000-00-00 00:00:00</wp:post_date>
<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name></wp:post_name>
<wp:status>draft</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Flex 3 + AIR + RFID + AMFPHP + SMS</title>
<link>http://blog.phy5ics.com/?p=33</link>
<pubDate>Tue, 30 Nov 1999 00:00:00 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[AIR]]></category>

		<category domain="category" nicename="air"><![CDATA[AIR]]></category>

		<category><![CDATA[AS3]]></category>

		<category domain="category" nicename="as3"><![CDATA[AS3]]></category>

		<category><![CDATA[Flex]]></category>

		<category domain="category" nicename="flex"><![CDATA[Flex]]></category>

		<category><![CDATA[RFID]]></category>

		<category domain="category" nicename="rfid"><![CDATA[RFID]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/?p=33</guid>
<description></description>
<content:encoded><![CDATA[I had originally wanted to do this with a Parallax RFID reader, but since I can't interface it with the Make Controller until Liam at MakingThings fixes the serial BLOB implementation fixed in mchelper 2.0, I decided to complete a proof-of-concept with a Phidgets RFID reader.  The application is pretty straightforward - it consists of an RFID tag embedded in a cell phone that is read for its unique ID, prompts a user to enter some data and then remembers their personal data when they return.  While the premise is simple, there are a few moving parts required to stitch it together.

But first, before an explanation, here's a demo of the application:


<strong>The Phidgets RFID Reader</strong>
PhidgetRFID (http://www.phidgets.com/products.php?product_id=1023) is a EM4102 125Khz protocol reader.  This means that it does not have the capability to write to RFID tags, only read from them. While this is just fine, I point it out so that you are aware of this fact if you are new to RFID.  It should also be noted that RFID readers like these usually fit into a larger architecture that consists of a database of some sort.  This allows RFID tag IDs to be stored along with additional metadata.

This particular reader is nice in that you can connect it directly to a computer (Mac, Windows and Linux support) via USB and simply run a web service that provide connectivity to the board.  In this example, that process is abstracted away in the AS3 classes that Phidgets provides (they also have a .SWC if you prefer that), so connecting to it and reading tags from it is really quite easy.

After installing the software from Phidgets, I set up an alias in my bash profile set up to make it easy to fire up the web service: alias phidget='/usr/bin/phidgetwebservice21'.  That way, I just type phidget into a terminal window and it starts.  After plugging the RFID reader into an open USB port, it's ready to communicate.  That's really all there is to setting it up since there is no microcontroller involved.

<strong>Flex Builder 3 and AIR</strong>
I opted to build this as an AIR application because an application like this is most applicable in a kiosk scenario, rather than as a web application.  Anyway, connecting to the RFID reader using Flex is quite easy and a majority of the code is devoted to setting up event handlers:

<

If you're interested in the rest of the code, download the source.  Also, a  quick disclaimer that this was just a quick proof-of-concept and is all in a single MXML file for simplicity rather than encapsulating objects and creating components.

<strong>AMFPHP Remoting</strong>
For server/Flash Player communication, I generally opt for remoting due to its ease of implementation and speed, especially if dynamic, database-driven calls are required for the application.  In this case, PHP and MySQL will handle user data and authentication as well as consuming SMS services.  I could write an entire article about AMFPHP and Flex 3, and probably will, but for now, I'll just mention it and note that it in the source code.

<strong>SMS</strong>
In the demo version (I'm not releasing this portion publicly), I've also rigged up some PHP classes to send SMS messages.  I found a service called Clickatell that provides SMS gateway services to a bunch of giant corporations like BBC, Vodafone and Oracle.  However, they do actually offer services to substantially smaller entities such as myself, which is pretty cool.  Not only that, but they offer a free trial of their services.

I'd recommend them if you only need to send outgoing SMS messages.  If you are interested in two-way messaging, be prepared to pony up a large amount of cash for short codes (somewhere in the neighborhood of $1200/month) and message routing.  The other alternative is to set up your own SMS gateway (http://www.x11.net/wiki/index.php/Setting_up_an_SMS_Gateway).  However, keep in mind that while setting up your own gateway is easy, it is not cost effective for sending large numbers of text messages using a normal consumer account.  It will end up being cheaper using a bulk service like Clickatell.

<strong>Source</strong>
Click here to download the source for the AIR source and installer, PHP code and MySQL schema.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>33</wp:post_id>
<wp:post_date>0000-00-00 00:00:00</wp:post_date>
<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name></wp:post_name>
<wp:status>draft</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Schematic Touchwall</title>
<link>http://blog.phy5ics.com/?p=65</link>
<pubDate>Tue, 30 Nov 1999 00:00:00 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/?p=65</guid>
<description></description>
<content:encoded><![CDATA[Having finally recovered from the nearly three weeks of working around the clock in Cannes, France to install the Schematic Touchwall at the Cannes Lions Advertising Festival, I want to lift the covers a bit and discuss some of the technology and challenges behind the installation.Â  Being the architect behind the hardware and software of the Touchwall gives me some unique insight.

[vimeo 5192300] ]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>65</wp:post_id>
<wp:post_date>0000-00-00 00:00:00</wp:post_date>
<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name></wp:post_name>
<wp:status>draft</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1253409724</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Installing MongoDB on MediaTemple (dv)</title>
<link>http://blog.phy5ics.com/?p=72</link>
<pubDate>Tue, 30 Nov 1999 00:00:00 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

<guid isPermaLink="false">http://blog.phy5ics.com/?p=72</guid>
<description></description>
<content:encoded><![CDATA[Due to a project that I've been working on that has some very specific software, requirements I switched over from having several separate boxes to a new (dv) from MediaTemple.Â  I would have loved to go]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>72</wp:post_id>
<wp:post_date>0000-00-00 00:00:00</wp:post_date>
<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name></wp:post_name>
<wp:status>draft</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1269732863</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Off-Grid Computing: Part 1</title>
<link>http://blog.phy5ics.com/2007/07/19/off-grid-computing-part-1/</link>
<pubDate>Thu, 19 Jul 2007 19:58:17 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[General Technology]]></category>

		<category domain="category" nicename="general-technology"><![CDATA[General Technology]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/?p=3</guid>
<description></description>
<content:encoded><![CDATA[The goal of this article is to relate several strategies and technologies to improve the efficiency in the collection, analysis and presentation of field data.  I have limited the suggestions to only technologies that are free (but not necessarily open-source) and/or utilize public APIs so as to make them accessible to an audience who constantly finds their budgets diminishing.  However, prior to getting into that, allow me to relate the context of some of these recommendations...

<!--more-->

On the last leg of summer vacation I recently paid a visit to my brother in Northern Arizona. He doesn't live there, but rather co-habitates with a bunch of other hippies during the course of the summer and has done so for the last 3 consecutive summers. Now don't get the wrong idea, while he is a hippy, this isn't some weirdo commune. Actually, it does resemble one - with it's small town of multi-colored tents and contrasting bandannas.

This is actually a USGS study being conducted in the Coconino National Forest that surrounds Flagstaff. He occupies the rather dubious position as one of the senior researchers on the project. As part of his responsibilities, he's helping 20-some-odd college students through a summer of banding birds, conducting vegitation surveys and manning the Forest Service walkie-talkie for signs of fire danger.

While thoroughly enjoying spending my vacation virtually off-the-grid through a series of hiking, climbing and camping escapades, I couldn't help but fall back into some of my usual thinking regarding workflow, data, networking and interactivity. The event the really drew me back into this line of thinking was when checking in on a nesting site with my brother. Cresting over Rim Road, we encountered a thin plume of smoke not 20 meters from the nesting site. We immediately were struck by a moment of wonder of flames licking upwards, instilling a primal fascination, followed immediately by the more rational, sobering twinge of danger at what we were actually encountering - this being the ultimate in bad news for anyone with a crew in a tinder-dry National Forest.

I recalled my GPS receiver that I had taken to toting around with me to passively record my adventures in the form of GPS coordinates. I marked the coordinates of the fire and wrote them on a scrap of paper, which I then handed to my brother. Picking up the Forest Service radio, he called in the coordinates to the Moqui Fire Lookout in accordance with regulations and what is to be expected from someone who earned their "Red Card" out of a requirement for working in the Alaskan wilderness.

With little else to do other than head back to Bird Camp, as they call it, to make certain that all of the researchers were back from their days, that is exactly what we did. While rolling back in the giant Suburban marked with a University of Montana logo, mostly listening to the Forest Service radio for news of our fire and the 12 others that had been reported thus far that day, my mind wandered considering how else technology could be applied to a traditionally disconnected field.

While I'm not involved in academia, I deal quite a bit with data. As a result, numerous parallels between developing system architectures and conducting scientific studies are immediately striking.  The most notable being, the underlying shared characteristics involving what is essentially the collection, analysis and presentation of data.  From my brief experience in the field with my brother and his colleagues, it became apparent that they still very much have at least one foot strongly set in the punch card era.

First, in looking at how survey plots are defined (although in their defense, this particular study was started 23 years ago), it is clear that this most fundamental layer of data in the form of geographic data is in the form of paper maps.  When one considers that the researches are gathering information on bird populations and the locations of their nests within physical spaces, it should be obvious that the correlation of gathered data to a location is of high importance.  So, let me introduce my first suggestion: a mapping API.

The introduction of Google Maps opened up a great number of possibilities with regard to visualization of data as it relates to physical locations.  One of the earliest (in)famous mash-up applications was the Chicago Crime Map (http://chicagocrime.org).  While perhaps there are examples in academia of this sort of application, the ones that are best known are developed by nerds with an idea to create something new.  However, after several releases of the Google Maps API that made it more-and-more accessible to the average user, development has culminated in the My Maps feature.  The latest iteration that allows users to create and save maps with data overlays without writing a single line of code.

While Google Maps is perhaps more well known than its Yahoo! conterpart, Yahoo! Maps have made great strides with their development and API, surpassing Google's in my opinion.  One of the great features of Yahoo! Maps are the API offerings in not only HTML/CSS/JS version, but also in a Flash versions that include AS2, AS3 and Flex libraries (see FlexQuake for an example).

Regardless of  which one a researcher deems easier or more appropriate to implement, they are both free and provide an excellent starting point for the collection and visualization of data that relates to physical space.

<strong>References:</strong>
<ul>
	<li>http://www.google.com/apis/maps/</li>
	<li>http://developer.yahoo.com/maps/</li>
</ul>
In Part 2, I will investigate additional mapping technologies, data collection and analysis.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>3</wp:post_id>
<wp:post_date>2007-07-19 19:58:17</wp:post_date>
<wp:post_date_gmt>2007-07-19 19:58:17</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>off-grid-computing-part-1</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:comment>
<wp:comment_id>4008</wp:comment_id>
<wp:comment_author><![CDATA[ford ranger]]></wp:comment_author>
<wp:comment_author_email>michealtabor@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://%URL%</wp:comment_author_url>
<wp:comment_author_IP>184.154.204.194</wp:comment_author_IP>
<wp:comment_date>2013-05-02 21:23:37</wp:comment_date>
<wp:comment_date_gmt>2013-05-03 05:23:37</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hey just wanted to give you a quick heads up and let you know 
a few of the pictures aren't loading properly. I'm not sure why but 
I think its a linking issue. I've tried it in two different browsers and both show the same results.]]></wp:comment_content>
<wp:comment_approved>0</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>About</title>
<link>http://blog.phy5ics.com/about/</link>
<pubDate>Fri, 20 Jul 2007 06:43:29 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false"></guid>
<description></description>
<content:encoded><![CDATA[I feel like I'm making an introduction at AA or something...

Hi, my name is John Barton and I am addicted to technology.Â  I've squandered the good will of my family and friends and lost countless hours of sleep because I've worked for interactive and advertising agencies in various capacities, as both a designer and developer over the past 10 years.Â  I've sunk to such depths as bartering Flash banner ads for bar tabs to prostrating myself before clients demanding to "make the logo bigger and less to add more zing".Â  At one point I even quit the business and went to work in a small rustic Italian restaurant where I washed dishes and learned how to be a chef and operate in the pressure cooker that is a restaurant kitchen.

However, I've also managed to do great work at great agencies for great clients, and that's what keeps me going these days.Â  I am currently a Senior Solutions Architect at <a href="http://schematic.com" target="_blank">Schematic</a>.Â  I work out the New York office where I lead large cross-disciplinary technology teams on new technology projects for clients such as ABC, Microsoft, Sandisk, Scholastic and Sun Microsystems, among others.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>2</wp:post_id>
<wp:post_date>2007-07-20 06:43:29</wp:post_date>
<wp:post_date_gmt>2007-07-20 06:43:29</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>about</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>page</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1225920199</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>FlexQuake</title>
<link>http://blog.phy5ics.com/?attachment_id=5</link>
<pubDate>Fri, 20 Jul 2007 07:31:32 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/07/flexquake.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>5</wp:post_id>
<wp:post_date>2007-07-20 07:31:32</wp:post_date>
<wp:post_date_gmt>2007-07-20 07:31:32</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>flexquake</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/07/flexquake.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/07/flexquake.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:642;s:6:"height";i:471;s:14:"hwstring_small";s:23:"height='93' width='128'";s:4:"file";s:76:"/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/07/flexquake.jpg";s:5:"thumb";s:23:"flexquake.thumbnail.jpg";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>FlexQuake</title>
<link>http://blog.phy5ics.com/2007/07/20/flexquake/</link>
<pubDate>Fri, 20 Jul 2007 07:44:50 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Flex]]></category>

		<category domain="category" nicename="flex"><![CDATA[Flex]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/?p=6</guid>
<description></description>
<content:encoded><![CDATA[I just attended Adobe's on AIR Bus Tour the other day on its stop in Los Angeles.  While typically those types of event don't delve deep enough into details to be of much interest, I figured that I'd attend anyway since I've been away from the computer for so long on vacation and needed to catch up on some new stuff.  The vast majority of the talks were JavaScript-centric which was interesting and perhaps highlights Adobe's desire to sway over the current generation of standards- and open-source centric client-side developers to a proprietary technology, but more on that in another post.

Anyway, I had hopes of converting an app that I had been working on over to an AIR app for desktop deployment.  The app that I was going to port over was a quick and rather silly app that I threw together using the Yahoo! Maps API and an geoRSS feed constructed using Yahoo! Pipes to filter earthquake data from the USGS.  However, I quickly remembered that developing against an alpha release of anything can be tedious at best.

<!--more-->

Being as how I had implemented Yahoo! Maps in the app, which is apparently still being fully ported to AS3 and uses a wrapper to interface with the AS2 version of the mapping APIs and actual map SWF, I immediately encountered an error on publish:

<code class="prettyprint">Error: Error #2067: The ExternalInterface is not available in this container. ExternalInterface requires Internet Explorer, ActiveX, Firefox, Mozilla 1.7.5 and greater, or other browsers that support NPRuntime</code>

So, until I get a chance to code an HTML/JS version of the API using the new HTML component, I'm stuck with FlexQuake, not the intended AIRQuake:

<a href="http://phy5ics.com/flexquake" title="FlexQuake"><img src="http://phy5ics.com/blog/wp-content/uploads/2007/07/flexquake.thumbnail.jpg" alt="FlexQuake" height="125" width="171" /></a>

It's still kinda cool if you live in California and want to see the earthquakes over M 2.5 that have occurred over the last 7 days.

<a href="http://phy5ics.com/flexquake">http://phy5ics.com/flexquake</a>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>6</wp:post_id>
<wp:post_date>2007-07-20 07:44:50</wp:post_date>
<wp:post_date_gmt>2007-07-20 07:44:50</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>flexquake</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>An AIR of Responsibility</title>
<link>http://blog.phy5ics.com/2007/07/21/an-air-of-responsibility/</link>
<pubDate>Sat, 21 Jul 2007 00:43:09 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[AIR]]></category>

		<category domain="category" nicename="air"><![CDATA[AIR]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/?p=7</guid>
<description></description>
<content:encoded><![CDATA[I gave a brief talk to the Schematic tech team here in LA on some of what I learned at the onAIR event earlier in the week. While I talked plenty about the new features of AIR from a variety of perspectives, I felt that the introduction of a technology like AIR required a different perspective and more time to explain it.  An interesting aspect to the introduction of AIR is that is has significantly lowered the barrier to entry for developers interested in developing desktop applications.  While this has the powerful effect of democratizing access to the desktop, it does raise some fundamental issues and fears.

<!--more-->
Perhaps a portion of this fear is a personal reactionary response primarily linked to living through the era of "Skip Intro" and being subjected to entirely gratuitous and/or inappropriate uses of Flash.  However, Flash intros were harmless to a user's machine and for the most part were really only were a nuisance as they primarily affected a user's utilization of  slow connections and their patience. This is because a user's underlying OS is shielded in most cases (unless you happen to be using IE) by the security provided by the browser's security sandbox. Not to say that security is not a consideration with web applications, but when it is, the vast majority of those considerations surround the protection of sensitive data such as bank account info and role-based functionality in the case of something like an adminstrative delete function.  Those same assumptions while still valid when applied to a desktop application neglect to account for some fundamental differences in those environments.

AIR opens the user's file system to read and write access for the installed application (it should be noted that it runs within the user's established security sandbox and retains the same permissions).  This places a tremendous responsibility on the shoulders of the developer to create software in a responsible manner.  However, this model also places responsibility on the user who may be installing that AIR application to make sure that the application that they are installing is from a reputable source and is not likely to contain either malicious or harmful code.  My fear is that consumers will, as with most new technologies, and especially one that presents an entirely new model of deployment, will fundamentally misunderstand that downloading and installing an AIR application is fundamentally the same as downloading and installing an executable .exe or .app.

It will be interesting to see how exactly Adobe markets AIR on a consumer level, if at all, or if it will fall primarily to the development community to become the distribution channel for the actual AIR runtime as it has largely with Flash Player. Regardless of what happens on a consumer level, a fundamental shift needs to occur not really in development methodologies and techniques, but in terms of the oft-ignored ancillary aspects of software development.
That being said, as part of the developer community, there are some things that we can do to ensure that AIR is successful as a development platform:

<strong>Quality Assurance</strong>

The first best practice is to follow a rigorous quality assurance process.  This can help avoid a ridiculous stream of support emails.  While the software that you are developing may be small in scope and not require a dedicated QA engineer, the best thing to do is share with others around you.  They are a tremendous resource in identifying and tracking down bugs that may have been missed while coding on the 15th cup of coffee at 3am. The bottom line is that you want your users to trust the software that you are delivering to them not to erase a large portion of their drive nor any other destructive activity.

<strong>Legalese</strong>

How many web applications have you developed where you have had to write Privacy Policies, Terms and Conditions and an End-User License Agreement? From what I've seen most seems to be copied-and-pasted from one site to the next.  While this may work, it should be noted that those densely worded, Latin-phrase-peppered documents are there for one reason - to protect the site owners and developers from legals issues that may arise from the use of that website.

When developing desktop applications, those sorts of indemnification clauses become that much more important because there are many more things that can go wrong.  Do yourself a favor and protect yourself and your assets if some sort of issue does happen to arise from software that you have authored.

<strong>Code Signing</strong>

As with any technology, there will be those that choose to use AIR for malicious purposes.  An important consideration with AIR is providing end users with the ability to make an informed decision as to whether or not a piece of software will damage their system or otherwise interfere with their lives by doing something like sniffing out and collecting private data from their hard drive.  This is easier to do with something like packaged software, being as how a consumer has a brand and shrink wrap to help them be convinced of the legitimacy of a software product.  This is obviously not so for software that is delivered electronically, as a vast majority of AIR applications will be.

While it may not be supported in the alpha and beta releases of AIR, in future releases, the process of code signing will be important for an AIR developer in order to gain the user's trust when installing an application.  For those not familiar, code signing servers two essential security functions for electronic software delivery:
<ul>
	<li>Verifying the identity of the software publisher</li>
	<li>Verifying that code being delivered to the user has not been tampered with either prior to or during the delivery process</li>
</ul>
While I haven't seen any news of any Digital ID certificates being offered for AIR publishers, I am sure that announcements will be forthcoming from someone like Verisign.  Verisign currently offers certificates for Shockwave publishers.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>7</wp:post_id>
<wp:post_date>2007-07-21 00:43:09</wp:post_date>
<wp:post_date_gmt>2007-07-21 00:43:09</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>an-air-of-responsibility</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Getting Started with AS3 and the Make Controller - Part 1</title>
<link>http://blog.phy5ics.com/2007/07/22/getting-started-with-as3-and-the-make-controller-part-1/</link>
<pubDate>Sun, 22 Jul 2007 21:31:37 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[AS3]]></category>

		<category domain="category" nicename="as3"><![CDATA[AS3]]></category>

		<category><![CDATA[Make Controller]]></category>

		<category domain="category" nicename="make-controller"><![CDATA[Make Controller]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2007/07/22/getting-started-with-as3-and-the-make-controller-part-1/</guid>
<description></description>
<content:encoded><![CDATA[A couple months back I picked up a Make Controller from <a href="http://makingthings.com" target="_blank">Making Things</a> to do some experimentation with Flash Media Server and physical computing. I'm just now getting around to writing up my experiences about getting set up with the Make Controller. While the <a href="http://www.makingthings.com/resources/tutorials/flash/index_html/overview" target="_blank">tutorial on the Making Things site</a> was great for getting started using AS2 with their .mxp extension, it didn't offer up anything on how to get started with what I really wanted to do, which was a project that would benefit from the performance of AS3 and Flash Player 9, so I had to take matters into my own hands.

<!--more-->
Before we get started on what exactly that involved, if you are interested in the Make Controller, I would definitely recommend buying not only the board itself, but also the Accessory Pack.  I made the mistake of initially getting just the controller, which without electronics for input and output is cool, but turning on and off the four LEDs on the board is not very exciting nor practical.  I suppose that I could have built some, but I wasn't quite sure of all of the possibilities yet and wanted to grasp the basics by building a couple prototype projects based on some working sensors before firing up the soldering iron.  The Accessory Pack contains some basic controls that you can use out of the box to get started such as several motors, a slide pot, and a distance measuring sensor among other goodies.  The other nice thing that the kit contains is an AC power adapter so that it becomes unnecessary to have USB connected to power the board.

I'm not going to go into great detail of OSC, because I know very little about it, but I will give some background on why it is necessary.  The Make Controller allows communication in several ways, one is via USB and the other is using its on-board ethernet controller.  For connecting the Make Controller to a computer running an instance of the Flash Player, ethernet is the only way that it is possible.  When using ethernet, UDP packets are sent and received via TCP/IP from the Make Controller to the computer that it is connected to using something called OSC - Open Sound Control which, from what I gather, somewhat resembles MIDI.

However, because Flash cannot connect and send OSC directly to the Make Controller, an intermediary is required. In this case, it is a Java socket server called FLOSC (Flash OSC) that is a piece of middleware that accepts XML socket connections from the Flash Player and enables TCP/IP networking with the Make Controller. Once the socket connection is established, XML packets that contain OSC commands are created with ActionScript and then sent to FLOSC.  FLOSC then converts those XML packets into OSC packets and passes them to the Make Controller.  Basically the same process happens in reverse when input is generated from the Make Controller.

After downloading the Flash-specific packages from <a href="http://prdownloads.sourceforge.net/makingthings/mc-flash-0.1.zip" target="_blank">SourceForge</a>, the first step was to get the FLOSC server running, which is as simple as executing the following from the command line (on OS X) to fire it up:
<pre lang="actionscript">java Gateway 10000 10000</pre>
<pre lang="actionscript"></pre>
This command starts up the socket server and configures it to send and receive packets on port 10000. The only gotcha is to remember that you might have to change your network settings in order to communicate with the Make Controller over ethernet. Being a Mac user, I just set up an alternate network profile to enable easy switching between my usual AirPort setup and one that works with the Make Controller.  After getting that set up, I connected the board via ethernet, connected the AC adapter and ran some of the Making Things examples using AS2 and everything worked. I then wanted to really get down to business which would mean either finding AS3 classes for OSC or porting over the existing ones from Making Things.

Fortunately, after poking around a bit looking for AS3 OSC classes, I ran across the <a href="http://fwiidom.org" target="_blank">FWiidom project</a>, which besides being a totally cool project, also happens to use the same technique with FLOSC as the Make Controller for communicating with a Wiimote using AS3.  I grabbed the best-named release I've seen in a long time, the <a href="http://www.fwiidom.org/?page_id=11" target="_blank">"FWiidom [pre-alpha very nasty hacky version]"</a> from their site, which also, by the way, contains the FLOSC server.

The Fwiidom package contains several classes that are specific to the Wiimote implementation, so you can either remove them, or just ignore them when working with the Make Controller.  The classes that are required for OSC are the three in the org.fwiidom.osc package. After grabbing those, and looking through them, it was time to see if they would actually work, being as how there is actually no documentation that I could find about using these classes for the Make Controller, so that is where this article comes in.  Fortunately, they're well written and use events, so that made the first test I wanted to run with the classes fairly easy. I decided to code up the Make Controller equivalent of the ubiquitous "hello world" as a test, which is turning on LED0 on the application board.

So, after firing up the FLOSC server and knowing what I was going to do with the Make Controller, the next step was to attempt an XML socket connection to the server.  In taking a look at the OSCConnection class, the constructor is very straightforward, accepting two arguments representing the IP address and port number:
<pre lang="actionscript">public function OSCConnection(inIp:String, inPort:Number)</pre>
<pre lang="actionscript"></pre>
So, the instantiation in my test class looks like the following:
<pre lang="actionscript">oscConn = new OSCConnection(STR_LOCAL_IP, NUM_PORT);</pre>
<pre lang="actionscript"></pre>
Easy, right? In this case I've assigned constants for the local IP (the one assigned to the computer connecting to the Make Controller) and port that I then pass to the constructor.  However, before calling the connect() method, in order to make sure that a connection is actually taking place, there are some events to listen for that are dispatched from the OSCConnection object:
<pre lang="actionscript">oscConn.addEventListener(OSCConnectionEvent.ON_CONNECT, onConnect);
oscConn.addEventListener(OSCConnectionEvent.ON_CONNECT_ERROR, onConnectError);
oscConn.addEventListener(OSCConnectionEvent.ON_CLOSE, onClose);
oscConn.connect();</pre>
<pre lang="actionscript"></pre>
Those were all very straightforward, so after writing out the event handlers for those event, a quick publish indicated a successful connection to the Make Controller.  Woohoo!  But wait, there's a problem - for some reason the ON_CONNECT_ERROR event is always dispatched once, then ON_CONNECT is received.  This looks like a problem with Line 40 in the OSCConnection class:
<pre lang="actionscript">if (!mSocket.connect(mIp,mPort)) onConnectError();</pre>
<pre lang="actionscript"></pre>
I changed this to the following, which seems to work just fine:
<pre language="actionscript">mSocket.connect(mIp,mPort);</pre>
<pre language="actionscript"></pre>
<pre language="actionscript"></pre>
Although you can just leave it and ignore the ON_CONNECT_ERROR event, but that wouldn't exactly be a recommended best practice now would it?  Now on to actually doing something - sending the OSC message to the board. As mentioned previously, I want to turn on LED0 on the application board, which represented by the following OSC message:
<pre lang="actionscript">/appled/0/state 1</pre>
<pre lang="actionscript"></pre>
In ActionScript, this OSC message will be represented using an instance of the OSCPacket class, which is just a value object that stores the message:
<pre lang="actionscript">var oscPacket:OSCPacket = new OSCPacket("/appled/0/state", [1], STR_REMOTE_IP, NUM_PORT);</pre>
<pre lang="actionscript"></pre>
After constructing the OSC packet, sending it to FLOSC is super-easy and can be done like so:
<pre lang="actionscript">oscConn.sendOSCPacket(new OSCPacket("/appled/0/state", [0], STR_REMOTE_IP, NUM_PORT));</pre>
<pre lang="actionscript"></pre>
That's all there is to it.  Here's the entire class coded up (<a href="http://phy5ics.com/blog/wp-content/uploads/2007/07/makecontrolleras3_article1.zip" title="AS3 and Make Controller Part 1 Source Code">download source</a>):
<pre lang="actionscript">
package com.phy5ics.make {

import flash.display.Sprite;
import flash.display.MovieClip;
import flash.events.MouseEvent;
import org.fwiidom.osc.*;

public class MakeLEDTest extends MovieClip {
private var oscConn:OSCConnection;
private static const STR_LOCAL_IP:String = "192.168.5.210";
private static const STR_REMOTE_IP:String = "192.168.5.200";
private static const NUM_PORT:Number = 10000;

public function MakeLEDTest() {
//Initialize connection to the FLOSC server
oscConn = new OSCConnection(STR_LOCAL_IP, NUM_PORT);
oscConn.addEventListener(OSCConnectionEvent.ON_CONNECT, onConnect);
oscConn.addEventListener(OSCConnectionEvent.ON_CONNECT_ERROR, onConnectError);
oscConn.addEventListener(OSCConnectionEvent.ON_CLOSE, onClose);
oscConn.connect();
}

private function onConnect(evtEvent:OSCConnectionEvent):void {
trace("Connection established");
//Draw a sprite in the middle of the stage and assign a listener
var btnSendOSC:Sprite = new Sprite();
btnSendOSC.graphics.beginFill(0x666666);
var uintWidth:uint = 100;
var uintHeight:uint = 30;
btnSendOSC.graphics.drawRect(stage.stageWidth / 2 - uintWidth / 2, stage.stageHeight / 2 - uintHeight / 2, uintWidth, uintHeight);
btnSendOSC.buttonMode = true;
btnSendOSC.addEventListener(MouseEvent.CLICK, onSendOSCClick);
addChild(btnSendOSC);
}

private function onConnectError(evtEvent:OSCConnectionEvent):void {
trace("Connection error");
}

private function onClose(evtEvent:OSCConnectionEvent):void {
trace("Connection closed");
}

private function onSendOSCClick(evtClick:MouseEvent):void {
//Send the actual OSC packet
oscConn.sendOSCPacket(new OSCPacket("/appled/0/state", [1], STR_REMOTE_IP, NUM_PORT));
}

}

}</pre>
<pre lang="actionscript"></pre>
<pre lang="actionscript"></pre>
Sending an OSC message to the Make Controller is really quite simple and can be done in just a few lines of code.  In the next installment, I'll be looking at how to get the values of inputs from the Make Controller.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>10</wp:post_id>
<wp:post_date>2007-07-22 13:31:37</wp:post_date>
<wp:post_date_gmt>2007-07-22 21:31:37</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>getting-started-with-as3-and-the-make-controller-part-1</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:comment>
<wp:comment_id>2</wp:comment_id>
<wp:comment_author><![CDATA[Stephen]]></wp:comment_author>
<wp:comment_author_email>sgarci@mac.com</wp:comment_author_email>
<wp:comment_author_url>http://www.stephengarcia.com/blog</wp:comment_author_url>
<wp:comment_author_IP>67.72.118.244</wp:comment_author_IP>
<wp:comment_date>2007-07-26 08:02:47</wp:comment_date>
<wp:comment_date_gmt>2007-07-26 16:02:47</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Very nice! Have you thought of contributing this work to the Makingthings.com guys and getting an AS3 version of their API going?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3</wp:comment_id>
<wp:comment_author><![CDATA[Barton]]></wp:comment_author>
<wp:comment_author_email>jb@phy5ics.com</wp:comment_author_email>
<wp:comment_author_url>http://phy5ics.com</wp:comment_author_url>
<wp:comment_author_IP>69.84.7.124</wp:comment_author_IP>
<wp:comment_date>2007-07-27 08:21:10</wp:comment_date>
<wp:comment_date_gmt>2007-07-27 16:21:10</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I just looked and Liam already added this to the Tutorials page on MakingThings.com.  As for working on an AS3 version of their API, I've actually already ported the MakingThings AS2 version over to AS3.  I'll be posting the source and an article on that as soon as I manage to finish it.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>89</wp:comment_id>
<wp:comment_author><![CDATA[hydrotik | flash/design/photography &raquo; Blog Archive &raquo; Making Things + AS3 - Part 1 and 2 LED Sound Visualizer]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://blog.hydrotik.com/2007/09/04/making-things-as3-part-1-and-2-led-sound-visualizer/</wp:comment_author_url>
<wp:comment_author_IP>208.112.127.212</wp:comment_author_IP>
<wp:comment_date>2007-09-04 18:28:25</wp:comment_date>
<wp:comment_date_gmt>2007-09-05 02:28:25</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] and has gone through a few more trials and tribulations over this then myself. Check out his blog here. Make sure you go through all his posts first as there is a progression and you will have a good [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>97</wp:comment_id>
<wp:comment_author><![CDATA[Donovan Adams]]></wp:comment_author>
<wp:comment_author_email>donovan@hydrotik.com</wp:comment_author_email>
<wp:comment_author_url>http://blog.hydrotik.com</wp:comment_author_url>
<wp:comment_author_IP>64.210.199.233</wp:comment_author_IP>
<wp:comment_date>2007-09-05 09:52:23</wp:comment_date>
<wp:comment_date_gmt>2007-09-05 17:52:23</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi John! I added a couple examples based on your port.
http://blog.hydrotik.com/2007/09/04/making-things-as3-part-1-and-2-led-sound-visualizer/
http://blog.hydrotik.com/2007/09/04/making-things-as3-part-3-serial-lcd/]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3939</wp:comment_id>
<wp:comment_author><![CDATA[stc]]></wp:comment_author>
<wp:comment_author_email>stc@basilar.net</wp:comment_author_email>
<wp:comment_author_url>http://binaura.net</wp:comment_author_url>
<wp:comment_author_IP>79.122.21.120</wp:comment_author_IP>
<wp:comment_date>2008-12-28 00:49:30</wp:comment_date>
<wp:comment_date_gmt>2008-12-28 08:49:30</wp:comment_date_gmt>
<wp:comment_content><![CDATA[nice! thanks.

i connected flash with pd on localhost. working well for me.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3943</wp:comment_id>
<wp:comment_author><![CDATA[Using Flash for MIDI &laquo; boringBlog]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://theboringblog.wordpress.com/2009/02/01/using-flash-for-midi/</wp:comment_author_url>
<wp:comment_author_IP>76.74.255.44</wp:comment_author_IP>
<wp:comment_date>2009-02-01 11:21:01</wp:comment_date>
<wp:comment_date_gmt>2009-02-01 19:21:01</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] of what I have found regarding FLOsc has been using Flash to talk with MAKEÂ boards. This turtorialÂ over at phy5ics.com got me started. He was using the FWiidom FLOsc AS3 Classes, which were [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3994</wp:comment_id>
<wp:comment_author><![CDATA[code review:: : &laquo; summer placement::2010/dublin]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://kavisummer.wordpress.com/2010/08/05/code-review/</wp:comment_author_url>
<wp:comment_author_IP>74.200.247.113</wp:comment_author_IP>
<wp:comment_date>2010-08-05 01:46:53</wp:comment_date>
<wp:comment_date_gmt>2010-08-05 09:46:53</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] are needed for particular tasks. i downloaded them from internet. SendOSC class i downloaded from this site. it was very hard to find any tutorials or Â discussions on how to write osc signal sending [...] ]]></wp:comment_content>
<wp:comment_approved>0</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>AS3 and Make Controller Part 1 Source Code</title>
<link>http://blog.phy5ics.com/2007/07/22/getting-started-with-as3-and-the-make-controller-part-1/as3-and-make-controller-part-1-source-code/</link>
<pubDate>Sun, 22 Jul 2007 21:34:48 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/07/makecontrolleras3_article1.zip</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>12</wp:post_id>
<wp:post_date>2007-07-22 13:34:48</wp:post_date>
<wp:post_date_gmt>2007-07-22 21:34:48</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>as3-and-make-controller-part-1-source-code</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>10</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/07/makecontrolleras3_article1.zip</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/07/makecontrolleras3_article1.zip</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>About</title>
<link>http://blog.phy5ics.com/2007/07/23/2-revision/</link>
<pubDate>Mon, 23 Jul 2007 23:28:14 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2007/07/23/2-revision/</guid>
<description></description>
<content:encoded><![CDATA[I feel like I'm making an introduction at AA or something...

Hi, my name is John Barton and I am addicted to technology.Â  I've squandered the good will of my family and friends and lost countless hours of sleep because I've worked for interactive and advertising agencies in various capacities, as both a designer and developer over the past 10 years.Â  I've sunk to such depths as bartering Flash banner ads for bar tabs to prostrating myself before clients demanding to "make the logo bigger and less to add more zing".Â  At one point I even quit the business and went to work in a small rustic Italian restaurant where I washed dishes and learned how to be a chef and operate in the pressure cooker that is a restaurant kitchen.

However, I've also managed to do great work at great agencies for great clients, and that's what keeps me going these days.Â  I am currently Director, Solutions Architecture at Schematic.Â  I work out the LA office where I lead large cross-disciplinary technology teams on projects primarily based around video for clients such as ABC, Disney, NBC, Microsoft, AOL and ITV among others.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>52</wp:post_id>
<wp:post_date>2007-07-23 15:28:14</wp:post_date>
<wp:post_date_gmt>2007-07-23 23:28:14</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>2-revision</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>2</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Getting Started with AS3 and the Make Controller - Part 2</title>
<link>http://blog.phy5ics.com/2007/07/26/getting-started-with-as3-and-the-make-controller-part-2-let-the-hacking-begin/</link>
<pubDate>Thu, 26 Jul 2007 19:02:08 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[AS3]]></category>

		<category domain="category" nicename="as3"><![CDATA[AS3]]></category>

		<category><![CDATA[Make Controller]]></category>

		<category domain="category" nicename="make-controller"><![CDATA[Make Controller]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2007/07/27/getting-started-with-as3-and-the-make-controller-part-2-let-the-hacking-begin/</guid>
<description></description>
<content:encoded><![CDATA[In attempting to wire up a slide potentiometer to the Make Controller and poll for its values using AS3, which was supposed to be Part 2 of this series of articles, I ran into a significant problem. (To understand what exactly I was trying to do, check out Getting Started with AS3 and the Make Controller - Part 3 - Determining Input Values.) After coding up my example for the article in AS3, I expected that when publishing the .SWF, everything would be working, right?  No, of course not.  That would be far too easy.  After checking and double-checking my code thinking that I probably just did something stupid while working on it late at night, I was stumped.  I slept on it and still couldn't figure it out.  After much frustration, I opted to revert back to AS2 to see if maybe there was an issue with the potentiometer and re-wrote the example using AS2 and the MakingThings AS2 classes and it worked a treat.

<!--more-->

This led me to believe that the culprit had to be somewhere in the FWiidom classes, which wouldn't be all that surprising, given that they were designed and tested for use with a Wiimote.  The other possibility was that it might have been a bug with Flash Player 9 or the Flash 9 Alpha that I was using at the time. To eliminate this possibility, I did a direct port of the MakingThings classes over to AS3.  I didn't spend any time making any improvements to it because I was only curious to see if it would actually work, which it actually did.  All of a sudden I was receiving OSC packets from the Make Controller.

That being said, I haven't done all that much testing on the AS3 version of those classes, but I'll make them available here for download without any promises as to its reliability:

<a href="http://phy5ics.com/blog/wp-content/uploads/2007/07/makingthings_flosc_as3.zip" title="MakingThings FLOSC Classes AS3 Port">Download MakingThings FLOSC Classes AS3 Port</a>

I'll be sending these over to the MakingThings guys to check out, but if you download these and use them, I'd love to get input on any issues that are discovered.

Not being easily discouraged, I was still determined to figure out what the issue was with the FWiidom classes.  So, I began to examine the incoming and outgoing OSC packets and saw that there were actually packets being returned from the Make Controller.  This was good news and allowed me to follow the packets through the FWiidom classes.  I realized that the datatypes that are sent from the Make Controller are slightly different that what is expected to be received from a Wiimote.  In this case, the Make Controller sends a type "i" packet as a float, whereas the Wiimote sends a type "f" as a float.  In the Fwiidom classes, there was not a type=="i" in the conditional statement and no else statement, so it was not being evaluated anywhere.

Once I figured this out, to fix this issue, I added the following code to the OSCConnection class after line 109:
<pre lang="actionscript">} else if (type=="i") {
data.push(parseFloat(child.attributes.VALUE));</pre>
<pre lang="actionscript"></pre>
Compiling the SWF for the 39396216th time, I was amazed to see it was actually working.  So, as a result, I'll be getting in touch with the fine folks at FWiidom to see if they'll add this to their classes so that when people download them from their site to use with the Make Controller, they won't go insane trying it to figure out like I did.  In the meantime, here is the Fwiidom OSC package with my modification:

<a href="http://phy5ics.com/blog/wp-content/uploads/2007/07/fwiidom_flosc_makecontroller.zip" title="FWiidom Make Controller Update">Download FWiidom Make Controller Update</a>

Furthermore, I'll probably end up writing OSC bundles into the FWiidom classes, being as how they would be quite useful in complex projects.  I'm assuming that they were not included in the FWiidom version because bundles are not implemented for the Wiimote.

Now that we have that all straightened out, we can get back to the examples in Part 3 - Determining Input Values.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>13</wp:post_id>
<wp:post_date>2007-07-26 11:02:08</wp:post_date>
<wp:post_date_gmt>2007-07-26 19:02:08</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>getting-started-with-as3-and-the-make-controller-part-2-let-the-hacking-begin</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:comment>
<wp:comment_id>3963</wp:comment_id>
<wp:comment_author><![CDATA[links for 2009-10-04 at adam hoyle presents suckmypixel]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://www.adamhoyle.com/blog/?p=708</wp:comment_author_url>
<wp:comment_author_IP>89.200.137.208</wp:comment_author_IP>
<wp:comment_date>2009-10-04 04:29:22</wp:comment_date>
<wp:comment_date_gmt>2009-10-04 12:29:22</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] phy5ics Â» Blog Archive Â» Getting Started with AS3 and the Make Controller - Part 2 (tags: as3 osc) [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>MakingThings FLOSC Classes AS3 Port</title>
<link>http://blog.phy5ics.com/2007/07/26/getting-started-with-as3-and-the-make-controller-part-2-let-the-hacking-begin/makingthings-flosc-classes-as3-port/</link>
<pubDate>Fri, 27 Jul 2007 18:39:59 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/07/makingthings_flosc_as3.zip</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>14</wp:post_id>
<wp:post_date>2007-07-27 10:39:59</wp:post_date>
<wp:post_date_gmt>2007-07-27 18:39:59</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>makingthings-flosc-classes-as3-port</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>13</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/07/makingthings_flosc_as3.zip</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/07/makingthings_flosc_as3.zip</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>FWiidom Make Controller Update</title>
<link>http://blog.phy5ics.com/2007/07/26/getting-started-with-as3-and-the-make-controller-part-2-let-the-hacking-begin/fwiidom-make-controller-update/</link>
<pubDate>Fri, 27 Jul 2007 18:57:31 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/07/fwiidom_flosc_makecontroller.zip</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>15</wp:post_id>
<wp:post_date>2007-07-27 10:57:31</wp:post_date>
<wp:post_date_gmt>2007-07-27 18:57:31</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>fwiidom-make-controller-update</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>13</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/07/fwiidom_flosc_makecontroller.zip</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/07/fwiidom_flosc_makecontroller.zip</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Make Controller AS3 Part 3 Example Files</title>
<link>http://blog.phy5ics.com/2007/07/27/getting-started-with-as3-and-the-make-controller-part-3/make-controller-as3-part-3-example-files/</link>
<pubDate>Fri, 27 Jul 2007 20:55:58 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/07/makecontroller_as3_part3_examples.zip</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>16</wp:post_id>
<wp:post_date>2007-07-27 12:55:58</wp:post_date>
<wp:post_date_gmt>2007-07-27 20:55:58</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>make-controller-as3-part-3-example-files</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>11</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/07/makecontroller_as3_part3_examples.zip</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/07/makecontroller_as3_part3_examples.zip</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Make Controller AS3 Part 3 Example Files</title>
<link>http://blog.phy5ics.com/2007/07/27/getting-started-with-as3-and-the-make-controller-part-3/make-controller-as3-part-3-example-files-2/</link>
<pubDate>Fri, 27 Jul 2007 21:24:28 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/07/makecontroller_as3_part3_examples1.zip</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>17</wp:post_id>
<wp:post_date>2007-07-27 13:24:28</wp:post_date>
<wp:post_date_gmt>2007-07-27 21:24:28</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>make-controller-as3-part-3-example-files-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>11</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/07/makecontroller_as3_part3_examples1.zip</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/07/makecontroller_as3_part3_examples1.zip</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Make Controller AS3 Part 3 Example Files</title>
<link>http://blog.phy5ics.com/2007/07/27/getting-started-with-as3-and-the-make-controller-part-3/make-controller-as3-part-3-example-files-3/</link>
<pubDate>Fri, 27 Jul 2007 21:30:55 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/07/makecontroller_as3_part3_examples2.zip</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>18</wp:post_id>
<wp:post_date>2007-07-27 13:30:55</wp:post_date>
<wp:post_date_gmt>2007-07-27 21:30:55</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>make-controller-as3-part-3-example-files-3</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>11</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/07/makecontroller_as3_part3_examples2.zip</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/07/makecontroller_as3_part3_examples2.zip</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Getting Started with AS3 and the Make Controller - Part 3</title>
<link>http://blog.phy5ics.com/2007/07/27/getting-started-with-as3-and-the-make-controller-part-3/</link>
<pubDate>Fri, 27 Jul 2007 21:33:58 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[AS3]]></category>

		<category domain="category" nicename="as3"><![CDATA[AS3]]></category>

		<category><![CDATA[Make Controller]]></category>

		<category domain="category" nicename="make-controller"><![CDATA[Make Controller]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2007/07/27/getting-started-with-as3-and-the-make-controller-part-3/</guid>
<description></description>
<content:encoded><![CDATA[Please be sure to read <a href="http://phy5ics.com/blog/2007/07/27/getting-started-with-as3-and-the-make-controller-part-2/">Part 2</a>, and download the classes from that example otherwise the following example will not work as expected.

This article will cover how to read OSC messages that are sent from the Make Controller into FLOSC and then into Flash using the modified FWiidom classes.  Before getting started, this is where I have to point out that the manner in which the Flash Player receives the XML converted from OSC is by polling FLOSC, which is far from ideal. Polling is an inefficient and wasteful way of checking to see if any state has changed on the controller. This, however, is the way that OSC works - by querying the connected device to determine if the state of any inputs has changed. I'm not sure if this characteristic applies to the Make Controller in general, if for example, using other protocols over USB, but I have a feeling that it doesn't. I'll have to look at some of the code written for the controller in other languages and also read up on OSC to determine if this is the case. In any case, we're stuck with polling in ActionScript.

<!--more-->

That being said, the goal of this article is to illustrate using a Timer object for sending OSC messages from the Make Controller now that we've hacked the FWiidom classes and can connect to and receive data from the Make Controller's analog inputs. We'll start with connecting a slide potentiometer to analogin4 (any other analog input is fine, just change the code if you connect it to another input) like so:

[You'll have to use your imagination until I stop slacking and take a photo]

This might also be a good time to mention that these same techniques can be applied to any sensor that is connected to the analog ins.

Now that the sensor is connected, time to code.  We'll be reusing some of the code from <a href="http://phy5ics.com/blog/2007/07/22/getting-started-with-as3-and-the-make-controller-part-1/">Part 1</a>, so starting with the constructor from that class, a new event listener needs to be added to the OSCConnection object in order to listen for incoming packets from FLOSC because the code in Part 1 was only concerned with sending packets:
<pre lang="actionscript">
oscConn.addEventListener(OSCConnectionEvent.ON_PACKET_IN, onPacketIn);</pre>
<pre lang="actionscript"></pre>
Also, so that the output of OSC can be examined for debugging purposes, another event listener can be added as well:
<pre lang="actionscript">
oscConn.addEventListener(OSCConnectionEvent.ON_PACKET_OUT, onPacketOut);</pre>
<pre lang="actionscript"></pre>
Now that the listeners have been added, the handler functions need to be fleshed out.  To start with, we'll just trace the input and output to the FLOSC server in the following functions:
<pre lang="actionscript">
private function onPacketIn(evtOSC:OSCConnectionEvent):void {
trace(this + ": onPacketIn: " + evtOSC.data.name + " " + evtOSC.data.data);
}

private function onPacketOut(evtOSC:OSCConnectionEvent):void {
trace(this + ": onPacketOut: " + evtOSC.data.name + " " + evtOSC.data.data);
}</pre>
<pre lang="actionscript"></pre>
To dissect this a bit and see what's really going here, we'll have to follow the OSCConnectionEvent object that is passed into the function.  Looking at the OSCConnectionEvent class (org.fwiidom.osc.OSCConnectionEvent), it's very straightforward and contains nothing but static variables that define the events and a data variable.  The data variable is the one that is most interesting.  The data variable, while typed as a generic object, is actually an OSCPacket object that is created by the parseXml() function in the OSCConnection class when an OSC message is received from FLOSC.  As a result, the data variable contains all of the information associated with the OSC message, as illustrated by evtOSC.data.name and evtOSC.data.data.

After that little detour, what we're going to do is to monitor the input of the slide potentiometer on a timed basis, so rather than sending an OSC packet with an MouseEvent.CLICK event as Part 1 did, we'll hook it up to a Timer object that will start when a button is clicked.  The code to do that is really pretty simple:
<pre lang="actionscript">
private function onTimerStartClick(evtClick:MouseEvent):void {
timerStart();
}

private function timerStart():void {
if (!tmrTimer) {
tmrTimer = new Timer(250, 0);
tmrTimer.addEventListener("timer", onTimerIncrement);
}
tmrTimer.start();
}

private function timerStop():void {
tmrTimer.reset();
}

private function onTimerIncrement(evtTimer:TimerEvent):void {
oscConn.sendOSCPacket(new OSCPacket("/analogin/4/value", [""], STR_REMOTE_IP, NUM_PORT));
}</pre>
<pre lang="actionscript"></pre>
The important thing to look at here is the last function: onTimerIncrement.  This is the function that is called by every timer event.  To poll for the value of the potentiometer, or any other analog input, an OSC address is sent without an associated value, which in this case is /analogin/4/value.  The Make Controller then responds with a packet that contains that same OSC address with an associated value corresponding to the position of the slider on the  potentiometer.

If your project doesn't need to monitor the inputs frequently, for efficiency, you can limit the polling to individual OSC packets by sending them according to other events such from user input such as MouseEvent.CLICK or other events fired off within your application.

In Part 4, I'll show some practical examples to get started now that we're able to send and receive OSC packets.

<a href="http://phy5ics.com/blog/wp-content/uploads/2007/07/makecontroller_as3_part3_examples2.zip" title="Download Make Controller AS3 Part 3 Example Files">Download Make Controller AS3 Part 3 Example Files</a>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>11</wp:post_id>
<wp:post_date>2007-07-27 13:33:58</wp:post_date>
<wp:post_date_gmt>2007-07-27 21:33:58</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>getting-started-with-as3-and-the-make-controller-part-3</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:comment>
<wp:comment_id>4002</wp:comment_id>
<wp:comment_author><![CDATA[Jaylene]]></wp:comment_author>
<wp:comment_author_email>ida@ida.pl</wp:comment_author_email>
<wp:comment_author_url>http://www.yahoo.com/</wp:comment_author_url>
<wp:comment_author_IP>82.58.151.179</wp:comment_author_IP>
<wp:comment_date>2011-04-11 15:05:47</wp:comment_date>
<wp:comment_date_gmt>2011-04-11 23:05:47</wp:comment_date_gmt>
<wp:comment_content><![CDATA[8Y4uXo TYVM you've solved all my problems]]></wp:comment_content>
<wp:comment_approved>0</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Make Controller AS3 Part 4 Example Files</title>
<link>http://blog.phy5ics.com/2007/08/03/getting-started-with-as3-and-the-make-controller-part-4/make-controller-as3-part-4-example-files/</link>
<pubDate>Sat, 04 Aug 2007 00:19:08 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/08/makecontroller_as3_part4_examples.zip</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>21</wp:post_id>
<wp:post_date>2007-08-03 16:19:08</wp:post_date>
<wp:post_date_gmt>2007-08-04 00:19:08</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>make-controller-as3-part-4-example-files</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>20</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/08/makecontroller_as3_part4_examples.zip</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/08/makecontroller_as3_part4_examples.zip</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Make Controller AS3 Part 4 Example Files</title>
<link>http://blog.phy5ics.com/2007/08/03/getting-started-with-as3-and-the-make-controller-part-4/make-controller-as3-part-4-example-files-2/</link>
<pubDate>Sat, 04 Aug 2007 00:25:22 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/08/makecontroller_as3_part4_examples1.zip</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>22</wp:post_id>
<wp:post_date>2007-08-03 16:25:22</wp:post_date>
<wp:post_date_gmt>2007-08-04 00:25:22</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>make-controller-as3-part-4-example-files-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>20</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/08/makecontroller_as3_part4_examples1.zip</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/08/makecontroller_as3_part4_examples1.zip</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Getting Started with AS3 and the Make Controller - Part 4</title>
<link>http://blog.phy5ics.com/2007/08/03/getting-started-with-as3-and-the-make-controller-part-4/</link>
<pubDate>Sat, 04 Aug 2007 00:26:16 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[AS3]]></category>

		<category domain="category" nicename="as3"><![CDATA[AS3]]></category>

		<category><![CDATA[Make Controller]]></category>

		<category domain="category" nicename="make-controller"><![CDATA[Make Controller]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2007/08/03/getting-started-with-as3-and-the-make-controller-part-4/</guid>
<description></description>
<content:encoded><![CDATA[<strong>Doing Something "Useful" With Sensor Input </strong>

In Parts 1-3, we spent some time examining the basics of the Make Controller, OSC and how it works with (or in some cases doesn't work) ActionScript 3.   Now, we can start to do some things that might actually be construed as being useful for a project.  To start, let's get the hardware set up by hooking up a light sensor to analogin0.  With that done, we can write some code to use the input from the light sensor as it detects ambient light levels to control the opacity of a sprite on the stage of our SWF.

<!--more-->
In keeping with the grand tradition of laziness, ahem, I mean re-usable code, we'll start with the code from the last example, as that provides a decent framework to start with.  In the last example, the values passed along by OSC from the sensor were simply traced out to Flash's output console.  To do something useful with it, the key is to look at the incoming packets and parse out the ones that we need to pass on to other functions.  This can be done adding a switch statement in the onPacketIn event handler as follows:
<pre lang="actionscript">
private function onPacketIn(evtOSC:OSCConnectionEvent):void {
switch(evtOSC.data.name) {
case "/analogin/0/value":
changeBackgroundAlpha(evtOSC.data.data);
break;
}
}</pre>
<pre lang="actionscript"></pre>
Note: It is of course possible to use an else/if statement to accommodate this same functionality.  In general, I opt for case statements, as I know the explicit values that are to be expected in the switch.  This is also more efficient, as the AVM knows what values to look for and ignores the rest, whereas in an else/if statement, all values must be evaluated regardless of whether or not they are relevant to that piece of code.  That being said, to "listen" to another input, another case would be added that contains the address of the input being listened to and also a function to handle that input.

Here, as an OSCConnectionEvent object is passed into the function, we look for the name of a specific address on the application board (evtOSC.data.name) that sent the OSC packet.  When that address matches something that is needed by our application, we can then send the value of that input to a function that does something useful with it.  In this case, we'll pass the value sent by the light sensor to a function called changeBackgroundAlpha().  That function looks like:
<pre lang="actionscript">
private function changeBackgroundAlpha(intValue:int):void {
var nAlphaRatio:Number = (1 / 1024);
var nNewAlpha = nAlphaRatio * intValue;
this.getChildAt(0).alpha = nNewAlpha;
}</pre>
<pre lang="actionscript"></pre>
Take a look and notice that I'm setting up a ratio between the input value, which could be anywhere from 0-1023 and an alpha value, which can only be 0-100.  After that relationship is established with some simple math, we can set the value of our sprite on the stage to a new value that is directly proportional to the value determined by the sensor.

<a href="http://phy5ics.com/blog/wp-content/uploads/2007/08/makecontroller_as3_part4_examples_2.zip" title="Make Controller AS3 Part 4 Example Files">Make Controller AS3 Part 4 Example Files</a>

In the next article, we'll look at using ActionScript to mediate communication between sensors and an output devices that are attached to the Make Controller.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>20</wp:post_id>
<wp:post_date>2007-08-03 16:26:16</wp:post_date>
<wp:post_date_gmt>2007-08-04 00:26:16</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>getting-started-with-as3-and-the-make-controller-part-4</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Make Controller AS3 Part 4 Example Files (Update)</title>
<link>http://blog.phy5ics.com/2007/08/03/getting-started-with-as3-and-the-make-controller-part-4/make-controller-as3-part-4-example-files-update/</link>
<pubDate>Wed, 08 Aug 2007 04:24:20 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/08/makecontroller_as3_part4_examples_2.zip</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>23</wp:post_id>
<wp:post_date>2007-08-07 20:24:20</wp:post_date>
<wp:post_date_gmt>2007-08-08 04:24:20</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>make-controller-as3-part-4-example-files-update</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>20</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/08/makecontroller_as3_part4_examples_2.zip</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/08/makecontroller_as3_part4_examples_2.zip</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Make Controller AS3 Part 4 Example Files (Update)</title>
<link>http://blog.phy5ics.com/2007/08/03/getting-started-with-as3-and-the-make-controller-part-4/make-controller-as3-part-4-example-files-update-2/</link>
<pubDate>Wed, 08 Aug 2007 04:26:15 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/08/makecontroller_as3_part4_examples_21.zip</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>24</wp:post_id>
<wp:post_date>2007-08-07 20:26:15</wp:post_date>
<wp:post_date_gmt>2007-08-08 04:26:15</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>make-controller-as3-part-4-example-files-update-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>20</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/08/makecontroller_as3_part4_examples_21.zip</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/08/makecontroller_as3_part4_examples_21.zip</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>HTTP/HTTPS Architecture Example</title>
<link>http://blog.phy5ics.com/2007/08/14/flash-player-ssl-ie7-wtf-and-a-solution/httphttps-architecture-example/</link>
<pubDate>Wed, 15 Aug 2007 00:57:53 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/08/system_architecture.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>26</wp:post_id>
<wp:post_date>2007-08-14 16:57:53</wp:post_date>
<wp:post_date_gmt>2007-08-15 00:57:53</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>httphttps-architecture-example</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>25</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/08/system_architecture.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/08/system_architecture.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:356;s:6:"height";i:107;s:14:"hwstring_small";s:23:"height='38' width='128'";s:4:"file";s:86:"/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/08/system_architecture.jpg";s:5:"thumb";s:33:"system_architecture.thumbnail.jpg";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>IE7 Certificate Warning</title>
<link>http://blog.phy5ics.com/2007/08/14/flash-player-ssl-ie7-wtf-and-a-solution/ie7-certificate-warning/</link>
<pubDate>Wed, 15 Aug 2007 00:59:26 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/08/ie7_cert_warning.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>27</wp:post_id>
<wp:post_date>2007-08-14 16:59:26</wp:post_date>
<wp:post_date_gmt>2007-08-15 00:59:26</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>ie7-certificate-warning</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>25</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/08/ie7_cert_warning.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/08/ie7_cert_warning.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:777;s:6:"height";i:350;s:14:"hwstring_small";s:23:"height='57' width='128'";s:4:"file";s:83:"/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/08/ie7_cert_warning.png";s:5:"thumb";s:30:"ie7_cert_warning.thumbnail.png";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Flash Player + SSL + IE7 = WTF (and a solution)</title>
<link>http://blog.phy5ics.com/2007/08/14/flash-player-ssl-ie7-wtf-and-a-solution/</link>
<pubDate>Wed, 15 Aug 2007 01:05:30 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[AS3]]></category>

		<category domain="category" nicename="as3"><![CDATA[AS3]]></category>

		<category><![CDATA[Flex]]></category>

		<category domain="category" nicename="flex"><![CDATA[Flex]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2007/08/14/flash-player-ssl-ie7-wtf-and-a-solution/</guid>
<description></description>
<content:encoded><![CDATA[<strong>Use Case</strong>
I've been working on a project with a team of some of our really talented Flash developers (props Ben, Leon and Gabriel) where a Flex app being served from a non-secure URL via plain HTTP needs to connect to and consume data from another server via HTTPS and have run into some issues and a workaround that I'd like to share.  For that particular project, the other server is a SOAP service running behind SSL with a Flex app served over HTTP consuming those services.  However, these concepts also apply to any external data consumed by the Flash Player.  A simplified diagram of the system is below:

<!--more-->

<a href="http://phy5ics.com/blog/wp-content/uploads/2007/08/system_architecture.jpg" title="HTTP/HTTPS Architecture Example"><img src="http://phy5ics.com/blog/wp-content/uploads/2007/08/system_architecture.jpg" alt="HTTP/HTTPS Architecture Example" /></a>

Pretty basic use case, right?  Should be pretty straightforward once the usual suspects are addressed as follows, right?  No, of course not, otherwise this article wouldn't actually be helpful.  I'll start with the server environment and SSL certificates.

<strong>SSL Certificates</strong>
On the development boxes that I've been using, self-signed certificates are installed, which means that an SSL certificate is created DIY on the server rather than purchasing one from a certificate authority like Verisign, Thawte, etc.  This is a common practice for development systems, internal systems and others where end-users may not be concerned that the certificate was not issued by a certificate authority.

Because of that, when pointing a browser (in this case Safari, FF or IE6 are the ones that I'm testing against) at for example https://dev.services.com/, a pop-up application window with a security warning appears asking if the certificate should be accepted.  (This is an important point that I'll be coming back to)  Clicking yes acknowledges that you are aware of the security implications of interacting with a server that has one or more of the following characteristics:
<ul>
	<li>The SSL certificate has expired</li>
	<li>The domain of the server does not match the domain of the SSL certificate</li>
	<li>The SSL certificate is not signed by a certificate authority</li>
</ul>
There may be other instances when this security dialog appears, but these are the most common.

<strong>A Special Browser from Special People</strong>
With IE7, the above is almost identical, with one important distinction.  That is that IE7 does not use a different application window to display the security warning.  It redirects to a local page that displays the security warning as the following screen capture illustrates:

<a href="http://phy5ics.com/blog/wp-content/uploads/2007/08/ie7_cert_warning.png" title="IE7 Certificate Warning"><img src="http://phy5ics.com/blog/wp-content/uploads/2007/08/ie7_cert_warning.thumbnail.png" alt="IE7 Certificate Warning" /></a>

As we'll see later, this comes back to bite us in the ass.  However, let's take at all the pieces that need to come together to make this work.

<strong>Crossdomain.xml File</strong>
As with all server-to-server communication, a crossdomain.xml file is required on the https://dev.services.com so that the Flex app on http://dev.application.com can talk to it.  For testing on the development box, the crossdomain.xml as such:

<allow-access-from domain="http://dev.application.com" secure="false"></allow-access-from>

In this case, the secure="false" attribute is allegedly supposed to signal the Flash Player to ignore certificate warnings and allow the loading of content from the secure context.  I have found a wealth of contradictory information on this topic and because it doesn't really seem to be clear, since this is a development server, I'm just going to leave it in there because I know that the certificate does not match the domain and is self-signed.  This attribute should be removed on production servers, as according to <a href="http://kb.adobe.com/selfservice/viewContent.do?externalId=tn_14213&amp;sliceId=1">Adobe</a>, it may compromise security:

"A secure server that allows access to movies hosted via a non-secure protocol
It is not advisable to permit HTTP content to access HTTPS content. This practice can compromise the security offered by HTTPS."

This comment is seemingly contradictory, so I'm not entirely certain that it is true.  I can understand how loading from HTTP into HTTPS is a security issue, but not the other way around.

<strong>HTTP Headers</strong>
So, despite having this configured with secure="false", there is another aspect to this that will be a pain if you test in Firefox and then try to get it to work in any version of Internet Explorer, as it will fail silently in IE.  That is the issue of HTTP headers that are sent by a web server in response to a request from a browser.  In IE, because it is the short bus of browsers, any HTTP responses sent from a secure context to an insecure one are ignored.  I don't know enough about the inner workings of IE to know why, however, it fails silently.

To get around this and allow HTTP responses to be received over SSL from a server, it is necessary to change either configuration at the web server level on https://dev.services.com or set the headers at a code level to ensure that the proper headers are being sent with HTTP responses.  That HTTP header is as follows:

<code>Cache-Control: no-store</code>

There is a great deal of disagreement and contradiction on this topic, as can be seen with nearly every comment related to this <a href="http://www.blog.lessrain.com/?p=276">blog post</a>.  However, according to my testing, and the word of my esteemed colleague, <a href="http://www.flashsupport.com/">Robert Reinhardt</a>, this is the one that indeed works.

<strong>The IE7 Issue</strong>
Now, with all of that set up, it should be possible to load data into the Flex app from the secured domain via HTTPS.  In testing this with Firefox, Safari and IE6, once the crossdomain.xml is requested, a security warning is triggered that then asks the user to accept the certificate for the secure domain that the Flash Player is attempting to communicate with.  If the certificate is accepted, the crossdomain.xml file is loaded and then the Flash Player can access resources on that server.

In attempting this in a server environment where the certificate triggers the certificate security warning, the following following error is thrown (if the debug version is installed or errors are trapped and traced out, otherwise it just fails silently):

<code>[RPC Fault faultString="Security error accessing url" faultCode="Channel.Security.Error" faultDetail="Destination: DefaultHTTP"]</code>

Using a tool like <a href="http://www.blunck.se/iehttpheaders/iehttpheaders.html">IEHTTPHeaders</a> or <a href="http://www.iewatch.com/ieprofessional.aspx">IEWatch Professional</a> and looking at the HTTP headers and what requests are made, it becomes apparent that the crossdomain.xml is not being loaded at all.  It shows its status as "aborted", meaning that IE7 refuses to actually load it.  As a result, this is the reason that the call is failing.  The only ways around this that I have found are:
<ol>
	<li>Navigate to the server that is hosting the crossdomain.xml file manually and accept the certificate then navigate back to the page with the Flash Player and then try to access the other server.</li>
	<li>Make sure that the server that is being connected to does not throw any certificate security warnings in IE7.</li>
</ol>
Hopefully these tips save someone else's time and blood pressure levels, it definitely affected both of mine negatively.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>25</wp:post_id>
<wp:post_date>2007-08-14 17:05:30</wp:post_date>
<wp:post_date_gmt>2007-08-15 01:05:30</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>flash-player-ssl-ie7-wtf-and-a-solution</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:comment>
<wp:comment_id>834</wp:comment_id>
<wp:comment_author><![CDATA[Internet Explorer &raquo; phy5ics &quot; Blog Archive &quot; Flash Player + SSL + IE7 = WTF (and a&#8230;]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://internet-explorer.blogyblog.info/?p=1060</wp:comment_author_url>
<wp:comment_author_IP>74.86.186.66</wp:comment_author_IP>
<wp:comment_date>2007-12-24 09:45:15</wp:comment_date>
<wp:comment_date_gmt>2007-12-24 17:45:15</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] Firefox Download Site- Get Mozilla Firefox Free wrote an interesting post today on phy5ics &amp;quot; Blog Archive &amp;quot; Flash Player + SSL + IE7 = WTF (and a&#8230;Here&#8217;s a quick excerpt&#8230;that will be a pain if you test in Firefox and then try to get it to work in any version of Internet Explorer, as it will fail silently in IE. [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>835</wp:comment_id>
<wp:comment_author><![CDATA[Internet Explorer &raquo; phy5ics &quot; Blog Archive &quot; Flash Player + SSL + IE7 = WTF (and a]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://internet-explorer.blogyblog.info/?p=1085</wp:comment_author_url>
<wp:comment_author_IP>74.86.186.66</wp:comment_author_IP>
<wp:comment_date>2007-12-24 11:08:46</wp:comment_date>
<wp:comment_date_gmt>2007-12-24 19:08:46</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] Firefox Download Site- Get Mozilla Firefox Free wrote an interesting post today on phy5ics &amp;quot; Blog Archive &amp;quot; Flash Player + SSL + IE7 = WTF (and aHere&#8217;s a quick excerpt&#8230;that will be a pain if you test in Firefox and then try to get it to work in any version of Internet Explorer, as it will fail silently in IE. [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>838</wp:comment_id>
<wp:comment_author><![CDATA[Thierry]]></wp:comment_author>
<wp:comment_author_email>thierrybertossa@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>212.23.250.182</wp:comment_author_IP>
<wp:comment_date>2007-12-26 08:03:02</wp:comment_date>
<wp:comment_date_gmt>2007-12-26 16:03:02</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I have some probleme with a tomcat servlet over https with IE 7, for you there is no probleme with the flex streaming class ...
the probleme come from the response header ?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>1509</wp:comment_id>
<wp:comment_author><![CDATA[IE7 + SSL + XML? = Flex &#8220;Error #2032: Stream Error&#8221; &laquo; I don&#8217;t like computers.]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://faindu.wordpress.com/2008/04/18/ie7-ssl-xml-flex-error-2032-stream-error/</wp:comment_author_url>
<wp:comment_author_IP>72.233.2.65</wp:comment_author_IP>
<wp:comment_date>2008-04-18 10:23:27</wp:comment_date>
<wp:comment_date_gmt>2008-04-18 18:23:27</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] search could go on. Barton has some nice input and proposes to tamper the HTTP header: remove Pragma and set Cache-Control: [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3998</wp:comment_id>
<wp:comment_author><![CDATA[JeakeloockLal]]></wp:comment_author>
<wp:comment_author_email>kaziuskiswerkanis@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://Website</wp:comment_author_url>
<wp:comment_author_IP>91.210.107.156</wp:comment_author_IP>
<wp:comment_date>2011-04-02 01:40:58</wp:comment_date>
<wp:comment_date_gmt>2011-04-02 09:40:58</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks in behalf of you attention, delight pop in our site: http://tlumaczenia.compare.com.pl - T&#322;umaczenia przysi&#281;g&#322;e]]></wp:comment_content>
<wp:comment_approved>0</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>AS3 + Make Controller Important Update (AKA Not Part 5)</title>
<link>http://blog.phy5ics.com/2007/08/20/as3-make-controller-important-update-aka-not-part-5/</link>
<pubDate>Tue, 21 Aug 2007 03:13:41 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[AS3]]></category>

		<category domain="category" nicename="as3"><![CDATA[AS3]]></category>

		<category><![CDATA[Make Controller]]></category>

		<category domain="category" nicename="make-controller"><![CDATA[Make Controller]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2007/08/20/as3-make-controller-important-update-aka-not-part-5/</guid>
<description></description>
<content:encoded><![CDATA[As those of you that have been reading along with the series might extrapolate, this post is supposed to be Part 5.  However, given some things that I've discovered in the Fwiidom AS3 implementation as well as some issues in the MakingThings AS2 classes, which I then ported to AS3 and in the process propogated those bugs, this is now an update on some progress made with some collaboration and refactoring.

<!--more-->

A couple weeks back I received some updates to the Fwiidom classes and the FLOSC server that a guy name Nacho (that's all I know about him or her) did via Adam at <a href="http://dustypixels.com/blog/" target="_blank">Dusty Pixels</a> (who created <a href="http://fwiidom.org" target="_blank">Fwiidom</a>).  I was super busy and didn't have time to put them through their paces until over the weekend.  When I did, I started noticing some really strange bugs where certain OSC commands would work (using the original FLOSC server - version 0.3.1), then by simply inserting a trace statement, they would cease working and other OSC commands that were previously broken miraculously started working.

This drove me to the brink of insanity for about 4 hours during which I tested the Fwiidom classes, my ported MakingThings AS3 classes and the original MakingThings AS2 classes.  Then it dawned on me that the order of the <code>type</code> and <code>value</code> attributes in the XML that was being sent from the Flash Player to the FLOSC server was getting reversed and this was causing the issues.  After that, I remembered the update to the FLOSC server and referred back to the email from Adam.   Looking at that email again, I see the forwarded message from Nacho where he mentions that the FLOSC server was updated to parse the XML using the DOM, so that the order of attributes in the XML-formatted OSC messages sent to FLOSC didn't matter.  Doh!  Apparently he encountered the same problem as I and corrected it at the server level, rather than in ActionScript, as I had been attempting to do.

So, I'm going to work a bit more on some testing of the updated classes and refactoring of my ported AS3 classes and release mine and then work to coordinate with Adam and the mysterious Nacho to figure out the best way to share these updates.  From there, I'll continue on with Part 5 and go back to update some of the previous articles with relevant changes.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>28</wp:post_id>
<wp:post_date>2007-08-20 19:13:41</wp:post_date>
<wp:post_date_gmt>2007-08-21 03:13:41</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>as3-make-controller-important-update-aka-not-part-5</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:comment>
<wp:comment_id>38</wp:comment_id>
<wp:comment_author><![CDATA[Donovan Adams]]></wp:comment_author>
<wp:comment_author_email>donovan@hydrotik.com</wp:comment_author_email>
<wp:comment_author_url>http://blog.hydrotik.com</wp:comment_author_url>
<wp:comment_author_IP>64.210.199.233</wp:comment_author_IP>
<wp:comment_date>2007-08-28 11:45:57</wp:comment_date>
<wp:comment_date_gmt>2007-08-28 19:45:57</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I've also been noticing strange things when testing the files with my current setup. Certain times things will work, and other times they will not. I noticed even adding a private variable to the class would prevent the board from responding.  After tinkering for a while I started to get the impression that using core Flash types would break the transmission of commands but I managed to add a private array variable and it worked. I was finally able to get the LED's to sequence using the time class. I feel your frustration in trying to get something so easy happening in flash now becomes tricky with the board with all the possible issues in the flow of data. I would certainly love to hear what you come up with since this seems to be what's creating my issues. Sometimes I get packet listeners working and sometimes they don't.

I also plan on seeing if I can set up the controller so that it works with my network settings as well as creating a class specifically for configuring the network settings using the

/network/dhcp 1
/network/address

Commands. Resetting my network settings is a pain when you are tryng to access the net for resources while getting this thing behaving:) I'm also thinking of including a reset method using

/system/reset 1 
/system/active 

I plan on putting some examples of my as3 experiments with the kit so keep me posted.  I'm also eagerly waiting on my accessory kit;) Thanks so much for these posts. They have been very helpful in jumping into this!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>96</wp:comment_id>
<wp:comment_author><![CDATA[Nacho]]></wp:comment_author>
<wp:comment_author_email>nacho@h-umus.it</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>89.96.201.194</wp:comment_author_IP>
<wp:comment_date>2007-09-05 05:05:25</wp:comment_date>
<wp:comment_date_gmt>2007-09-05 13:05:25</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi Barton!

strangely today i came up with your blog (as these days I couldn't believe there's still no one who has updated FLOSC server so I'm still searching). I'm happy to see that the changes I made where helpful at least for someone. These days I've been working on an AS3 OSC library that should help developers to create new Flash-OSC connected apps (I'm using it as underground layer for a AS3 TUIOClient, if wanna know more google for "reactivision"). It's still work in progress but works pretty well. If you contact me I'll be happy to share my work with you. Who knows, maybe someone should made a "Flosc 2.0" site ;)

PD: Nacho stands for Ignacio (an Spanish male name)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>98</wp:comment_id>
<wp:comment_author><![CDATA[Donovan Adams]]></wp:comment_author>
<wp:comment_author_email>donovan@hydrotik.com</wp:comment_author_email>
<wp:comment_author_url>http://blog.hydrotik.com</wp:comment_author_url>
<wp:comment_author_IP>64.210.199.233</wp:comment_author_IP>
<wp:comment_date>2007-09-05 09:57:18</wp:comment_date>
<wp:comment_date_gmt>2007-09-05 17:57:18</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Here are the changes I made to your OSC port:


<code>
public function sendOSCPacket(outPacket:OSCPacket) : void {
			var xmlOut:XMLDocument = new XMLDocument();
				
			var osc:XMLNode = xmlOut.createElement("OSCPACKET");
			osc.attributes.TIME = 0;
			osc.attributes.PORT = outPacket.port;
			osc.attributes.ADDRESS = outPacket.address;
		
			var message:XMLNode = xmlOut.createElement("MESSAGE");
			message.attributes.NAME = outPacket.name;
		
			for (var i:Number=0;i


I added two methods to reorder the attributes and changing the type to "i" made it work. Any ideas on why?


http://blog.hydrotik.com/2007/09/04/making-things-as3-part-1-and-2-led-sound-visualizer/
http://blog.hydrotik.com/2007/09/04/making-things-as3-part-3-serial-lcd/

Hey Nacho!
Is your work using the Binary Socket classes?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>99</wp:comment_id>
<wp:comment_author><![CDATA[Donovan Adams]]></wp:comment_author>
<wp:comment_author_email>donovan@hydrotik.com</wp:comment_author_email>
<wp:comment_author_url>http://blog.hydrotik.com</wp:comment_author_url>
<wp:comment_author_IP>64.210.199.233</wp:comment_author_IP>
<wp:comment_date>2007-09-05 09:58:48</wp:comment_date>
<wp:comment_date_gmt>2007-09-05 17:58:48</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Code didn't translate.

in OSCConnection I added:

private function setType(arg:XMLNode, str:String):void{
			arg.attributes.TYPE = str;
		}
		
		private function setValue(arg:XMLNode, str:String):void{
			arg.attributes.VALUE = str;
		}

and changed:
public function sendOSCPacket(outPacket:OSCPacket) : void {
			var xmlOut:XMLDocument = new XMLDocument();
				
			var osc:XMLNode = xmlOut.createElement("OSCPACKET");
			osc.attributes.TIME = 0;
			osc.attributes.PORT = outPacket.port;
			osc.attributes.ADDRESS = outPacket.address;
		
			var message:XMLNode = xmlOut.createElement("MESSAGE");
			message.attributes.NAME = outPacket.name;
		
			for (var i:Number=0;i]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>100</wp:comment_id>
<wp:comment_author><![CDATA[Donovan Adams]]></wp:comment_author>
<wp:comment_author_email>donovan@hydrotik.com</wp:comment_author_email>
<wp:comment_author_url>http://blog.hydrotik.com</wp:comment_author_url>
<wp:comment_author_IP>64.210.199.233</wp:comment_author_IP>
<wp:comment_date>2007-09-05 10:00:33</wp:comment_date>
<wp:comment_date_gmt>2007-09-05 18:00:33</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I wish you could post code in the comments and have it work normally;)  Sorry for the mutiple messages. Check out my edits here:

http://blog.hydrotik.com/2007/09/04/making-things-as3-part-3-serial-lcd/]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>112</wp:comment_id>
<wp:comment_author><![CDATA[Nacho]]></wp:comment_author>
<wp:comment_author_email>nacho@h-umus.it</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>89.96.201.194</wp:comment_author_IP>
<wp:comment_date>2007-09-06 00:52:00</wp:comment_date>
<wp:comment_date_gmt>2007-09-06 08:52:00</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi!

Donovan, no, I'm not using binary sockets (I thought for a little about doing it but as XML with EAX4 seems so powerful in AS3 and is much easer to read I discarded it, as a new server should also be done xD)

I rewrote(and still rewriting) the OSC Classes I sent to Adam Robertson to be more efficient and easer to use (for example there's a new class called OSCMessage so an OSCPacket stores and Array of messages and Arguments are part of a Message and not part of a packet, also the attribute "name" from OSCPacket is conceptually wrong as a every Message has it's own "name" and a packet can contains more than one message if it's an  OSC bundle).

I've created a "google poject" account to upload source, you can fnf it at http://code.google.com/p/flosc/]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>114</wp:comment_id>
<wp:comment_author><![CDATA[Nacho]]></wp:comment_author>
<wp:comment_author_email>nacho@h-umus.it</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>89.96.201.194</wp:comment_author_IP>
<wp:comment_date>2007-09-06 02:09:15</wp:comment_date>
<wp:comment_date_gmt>2007-09-06 10:09:15</wp:comment_date_gmt>
<wp:comment_content><![CDATA[did I wrote EAX4 ??? LOL, I really meant E4X]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>157</wp:comment_id>
<wp:comment_author><![CDATA[Barton]]></wp:comment_author>
<wp:comment_author_email>jb@phy5ics.com</wp:comment_author_email>
<wp:comment_author_url>http://phy5ics.com/blog/</wp:comment_author_url>
<wp:comment_author_IP>69.84.7.124</wp:comment_author_IP>
<wp:comment_date>2007-09-12 11:26:21</wp:comment_date>
<wp:comment_date_gmt>2007-09-12 19:26:21</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks for the input Nacho and Donovan.  I think that in an effort to make sure that everyone has access to the latest changes and code that I've been working on, I'll be setting up a Subversion repository.  That way, I can then work with you guys to get your code integrated in a more organized fashion and allow for the creation of different branches and such.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Flex 2 and WSDL Overloading</title>
<link>http://blog.phy5ics.com/2007/08/21/flex-2-and-wsdl-overloading/</link>
<pubDate>Tue, 21 Aug 2007 21:55:11 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Flex]]></category>

		<category domain="category" nicename="flex"><![CDATA[Flex]]></category>

		<category><![CDATA[Web Services]]></category>

		<category domain="category" nicename="web-services"><![CDATA[Web Services]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2007/08/21/flex-2-and-wsdl-overloading/</guid>
<description></description>
<content:encoded><![CDATA[On a project that I am currently working on, the team was having some issues consuming JBoss SOAP services.  The root of the problem took a while to figure out, as apparently there are very few people that try to consume SOAP services experience the same issue we were encountering and The Google revealed few clues.  At first we thought that perhaps the difference was between WSDL 1.1 and WSDL 2.0 and Flex's lack of support for WSDL 2.0, as that is what the SOAP services were generating.  After some initial investigation, we thought we eliminated that as a possibility.  Then we discovered that the WSDL that we were consuming contained overloaded methods.  Some reinvestigation at the W3C was done to see if  perhaps a difference between the WSDL 1.1 or 2.0 specifications was support for WSDL overloading.  It turns out the the specs are silent on this issue, so again we eliminated the difference in WSDL versions.  Some additional searching after that determined that Flex definitely lacks support for WSDL overloading.
<!--more-->
In our case, we couldn't change the WSDL or the services themselves to remove the overloaded methods because we had no control over the SOAP services as they were part of a software package produced by an external vendor.  The vendor had upgraded their core APIs from a previous version of their software.  To accommodate backwards compatibility these changes were made without having to modify any of the actual method names by overloading several methods in their API.  The WSDL was then auto-generated from the Java classes that comprise the web services.  While Java conveniently supports methods overloading, despite clamoring for it for the last several releases of ActionScript, we still don't have it natively in either Flex nor ActionScript.  As a result, we needed a workaround.

<strong>The Easy Way</strong>
While not exactly the most ideal, for a short-term hack, we copied the XML in the WSDL that was generated, copied it into a empty file, and removed the offending methods manually.  This was then placed on our servers and called in place of the overloaded WSDL.  While it is not terribly clean nor reliable, as any time the web services change the WSDL is not updated, it happens to work without any server-side modifications.

<strong>The Hard Way</strong>
For the longer-term solution we will be implementing a service proxy in .NET and Windows Communication Foundation (WCF) because it is necessary for future iterations of the project.  A service proxy is an extra layer in an SOA architecture that essentially acts as a broker between web services.  The service proxy in our case accomplishes several things:
<ul>
	<li>Consolidation of multiple web services from multiple vendors into a single public-facing SOAP endpoint that the Flex client can then consume instead of attempting to integrate with them directly</li>
</ul>
<ul>
	<li>Allows for mapping between a single SOAP call into the service proxy by the Flex client to be mapped to multiple web services to be</li>
</ul>
<ul>
	<li>Allows for web service transactions whereby SOAP calls can be rolled back depending upon results from various calls to various external services</li>
</ul>
<ul>
	<li>Gives the ability to implement MSMQ for scalability and reliability, as SOAP messages can then be stored in a queue for later in the case of external services being down or overloaded</li>
</ul>
<ul>
	<li>Best of all, it allows us to author the SOAP API and the WSDL that the Flex client will connect to and removes the issue of attempting to consume an overloaded WSDL from Flex</li>
</ul>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>29</wp:post_id>
<wp:post_date>2007-08-21 13:55:11</wp:post_date>
<wp:post_date_gmt>2007-08-21 21:55:11</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>flex-2-and-wsdl-overloading</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Erase Pins</title>
<link>http://blog.phy5ics.com/2007/09/08/starting-over-with-the-make-controller-as3-part-1/erase-pins/</link>
<pubDate>Sat, 08 Sep 2007 18:52:06 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/09/erase_board.gif</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>31</wp:post_id>
<wp:post_date>2007-09-08 10:52:06</wp:post_date>
<wp:post_date_gmt>2007-09-08 18:52:06</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>erase-pins</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>30</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/09/erase_board.gif</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/09/erase_board.gif</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:480;s:6:"height";i:360;s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:78:"/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/09/erase_board.gif";s:5:"thumb";s:25:"erase_board.thumbnail.gif";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Starting Over with the Make Controller + AS3 - Part 1</title>
<link>http://blog.phy5ics.com/2007/09/08/starting-over-with-the-make-controller-as3-part-1/</link>
<pubDate>Sat, 08 Sep 2007 19:22:49 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[AS3]]></category>

		<category domain="category" nicename="as3"><![CDATA[AS3]]></category>

		<category><![CDATA[Make Controller]]></category>

		<category domain="category" nicename="make-controller"><![CDATA[Make Controller]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2007/09/08/starting-over-with-the-make-controller-as3-part-1/</guid>
<description></description>
<content:encoded><![CDATA[MakingThings just released a bunch of software updates involved with Flash and the Make Controller that nullifies a lot of my previous work with AS3 and flosc.  While some of the components still seem a bit buggy, they represent some major improvements.  The best news to come out of this round of releases is that the <em>flosc</em> socket server can now be ditched (sorry, Ben Chun) in favor of connecting to the Make Controller using a new version of <em>mchelper</em>.  Additionally it is now possible, from Flash,  to connect to a board using either USB or Ethernet.  As a result, I'm starting my series over to take these latest developments into account.
<!--more-->
To get stared, grab the latest versions of the following files from <a href="http://makingthings.com/resources/downloads" target="_blank">MakingThings</a>:

- mchelper 2.0
- heavy 1.2 rc4
- New AS3 classes

<strong>Step 1: Erase the Current Firmware</strong>
To do this, connect power to the board and use a jumper on the 2 pins marked "ERASE" near the JTAG connector on the board.  This will erase everything on the board including the firmware.  Turn off the power, remove the jumper, then reconnect the power to restart the board.  This will put the board into receive mode.

<a href="http://phy5ics.com/blog/wp-content/uploads/2007/09/erase_board.gif" title="Erase Pins"><img src="http://phy5ics.com/blog/wp-content/uploads/2007/09/erase_board.gif" alt="Erase Pins" /></a>
<strong>
Step 2: Upload heavy 1.2 rc4</strong>
There seems to be a bug in <em>mchelper 2.0</em> in that the option to upload firmware to the Make Controller is always grayed-out.  So you'll need to use a previous version in order to install the new <em>heavy 1.2 rc4</em> firmware.  To do this, fire up <em>mchelper 1.2</em> then simply select the .bin file and click upload.  Restart the board after the firmware has updated.

<strong>Step 3: Connecting to Flash</strong>
Close <em>mchelper 1.2</em> and open up <em>mchelper 2.0</em>.  Send a test message to the board to make sure that everything is setup properly.

<em>mchelper 2.0</em> now has an XML socket server built into it (unfortunately not a binary socket server), so rather than connecting to flosc as we did in the past, we connect to mchelper.  This is straightforward enough:

<code>var mcfConnection:McFlashConnect = new McFlashConnect();</code>

From there, it's just a matter of setting up a bunch of event listeners, which isn't all that different from my previous examples:

<code>mcfConnection.addEventListener(McEvent.ON_CONNECT, onConnect);</code>
<code>mcfConnection.addEventListener(McEvent.ON_CONNECT_ERROR, onConnectError);</code>
<code>mcfConnection.addEventListener(McEvent.ON_CLOSE, onClose);</code>
<code>mcfConnection.addEventListener(McEvent.ON_MESSAGE_IN, onMessageIn);</code>
<code>mcfConnection.addEventListener(McEvent.ON_BOARD_ARRIVED, onBoardArrived);</code>
<code>mcfConnection.addEventListener(McEvent.ON_BOARD_REMOVED, onBoardRemoved);</code>
<code>mcfConnection.connect();</code>

One of the primary differences between the new MakingThings AS3 classes and the others that I've written about is the addition of some methods to not only connect to <em>mchelper</em> (previously <em>flosc</em>), but also to determine when a controller board is actually connected.  This is a significant improvement, as then you can be sure that you're actually connected to the board.  Additionally, the way the new classes are written opens up the possibility of connecting multiple boards, as they can be addressed individually by IP address, USB address, name (i.e. <code>/system/name</code>) or serial number, which is a super cool feature.

Once the connection to <em>mchelper</em> is established and a board is detected, sending and receiving OSC packets is rather straightforward.  Here's an example of how to send an OSC packet:

<code>mcfConnection.send("/system/name", []);</code>

A really cool feature of <em>mchelper 2.0</em> is that OSC packets that are being sent and received from Flash are traced out to the dialog window in <em>mchelper</em>, which helps tremendously with debugging.  After compiling a SWF that sends an OSC packet containing <code>/system/name</code> you should see the following in mchelper:

<code>XML server --- New XML Connection</code>
<code>XML server --- /system/name</code>
<code>USB --- /system/name Make Controller Kit</code>

That's really all there is to it.  Thankfully, the new MakingThings code is much less unwieldy and ditches flosc, so kudos to them for making much-needed improvements.

<strong>Step 4: Conclusion - Let the Hacking Begin</strong>
I haven't had a chance to look at the new AS3 classes in great detail, but there are some nice new features.  However, one thing that I noticed that was a bit disappointing was that all of the XML parsing is being done using <code>XMLDocument</code> objects, which have been deprecated in AS3.  There's no reason why this shouldn't be using Flash Player 9's native E4X capabilities, so that'll be one of the first things that I rewrite, being as how I already did that in the MakingThings AS2 classes that I ported to AS3 a while back.

<a href="http://phy5ics.com/blog/wp-content/uploads/2007/09/ConnectionTest.as">Download the full sample class here</a>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>30</wp:post_id>
<wp:post_date>2007-09-08 11:22:49</wp:post_date>
<wp:post_date_gmt>2007-09-08 19:22:49</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>starting-over-with-the-make-controller-as3-part-1</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1275192315</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>3638</wp:comment_id>
<wp:comment_author><![CDATA[Shaun Gilbert &raquo; Blog Archive &raquo; John Barton]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://www.shaungilbert.com/blog/?p=55</wp:comment_author_url>
<wp:comment_author_IP>92.48.117.50</wp:comment_author_IP>
<wp:comment_date>2008-10-22 05:37:34</wp:comment_date>
<wp:comment_date_gmt>2008-10-22 13:37:34</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] http://phy5ics.com/blog/2007/09/08/starting-over-with-the-make-controller-as3-part-1/ [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Make Controller, mchelper 2.0 and /serial/ Issues</title>
<link>http://blog.phy5ics.com/2007/10/02/make-controller-mchelper-20-and-serial-subsytem-issues/</link>
<pubDate>Wed, 03 Oct 2007 04:06:34 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[GPS]]></category>

		<category domain="category" nicename="gps"><![CDATA[GPS]]></category>

		<category><![CDATA[Make Controller]]></category>

		<category domain="category" nicename="make-controller"><![CDATA[Make Controller]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2007/10/02/make-controller-mchelper-20-and-serial-subsytem-issues/</guid>
<description></description>
<content:encoded><![CDATA[I've been attempting to hook up a serial GPS device to my Make Controller and read in data using OSC commands from mchelper prior to interfacing it with AS3 (as an aside, it's really nice to be able to do this with the new version of mchelper). While I've been able to write to the serial port successfully using both /serial/char and /serial/block, reading from it always yields some sort of disaster.
<!--more-->Initially I thought that perhaps the level shifter was not functioning properly. However, checking it out with a multimeter I found it to be otherwise. Then, I verified that the level shifter was indeed reversing TX/RX as it does, and it was indeed. I then connected the GPS device directly to my computer using a RS232/USB converter and was successfully able to read the serial data, so that eliminated the actual GPS receiver as the problem. Checking on those things seemed to eliminate what I figured were circuit or hardware problems, which left only the Make Controller and mchelper as the issue.

So here are a couple use cases where I run into issues:

Attempting to set the baud rate using /serial/baud 4800 is apparently successful, until I type in /serial/baud to return the value and it is inexplicably set to 4828!? Any other number that I pick at random results in it being set correctly. I have no idea what to make of this behavior.

As an additional problem, when I type in /serial/readable I receive a value of 1048760. If I then enter /serial/block to attempt to read that data, mchelper crashes [Exception: EXC_BAD_ACCESS (0x0001) Codes: KERN_PROTECTION_FAILURE (0x0002) at 0x00000000)]. If I then try /serial/block 128 (or any other int), then I get a /serial/error Bad Data response.

<strong>Note: </strong>I posted the above to the <a href="http://www.makingthings.com/forum/discussion/view_topic?topic_id=1169">MakingThings forum</a> last night, and Liam promptly responded that this is indeed a problem with mchelper 2.0 and its implementation of OSC blobs that are returned by /serial/block.  As for the incorrect baud rate issue, he's not quite sure, but hopefully that will be resolved soon as well.  I'll be posting some how-to articles on bidirectional serial communication and using GPS devices with the Make Controller, OSC and AS3 once those bugs get straightened out.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>32</wp:post_id>
<wp:post_date>2007-10-02 20:06:34</wp:post_date>
<wp:post_date_gmt>2007-10-03 04:06:34</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>make-controller-mchelper-20-and-serial-subsytem-issues</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:comment>
<wp:comment_id>3929</wp:comment_id>
<wp:comment_author><![CDATA[Kevin Groce]]></wp:comment_author>
<wp:comment_author_email>kevin.groce@asurion.com</wp:comment_author_email>
<wp:comment_author_url>http://Website</wp:comment_author_url>
<wp:comment_author_IP>12.107.224.195</wp:comment_author_IP>
<wp:comment_date>2008-11-23 04:28:30</wp:comment_date>
<wp:comment_date_gmt>2008-11-23 12:28:30</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Did you ever get this working?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3959</wp:comment_id>
<wp:comment_author><![CDATA[Bill Bartmann]]></wp:comment_author>
<wp:comment_author_email>claricekxj@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://Website</wp:comment_author_url>
<wp:comment_author_IP>174.37.234.84</wp:comment_author_IP>
<wp:comment_date>2009-09-02 02:07:11</wp:comment_date>
<wp:comment_date_gmt>2009-09-02 10:07:11</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Excellent site, keep up the good work]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4004</wp:comment_id>
<wp:comment_author><![CDATA[Dollie]]></wp:comment_author>
<wp:comment_author_email>kingspottery@atomic.net</wp:comment_author_email>
<wp:comment_author_url>http://www.bing.com/</wp:comment_author_url>
<wp:comment_author_IP>81.217.6.239</wp:comment_author_IP>
<wp:comment_date>2011-04-11 17:49:48</wp:comment_date>
<wp:comment_date_gmt>2011-04-12 01:49:48</wp:comment_date_gmt>
<wp:comment_content><![CDATA[You've hit the ball out the park! Increbdile!]]></wp:comment_content>
<wp:comment_approved>0</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>AIR-RFID Source Files</title>
<link>http://blog.phy5ics.com/2007/10/13/flex-3-air-rfid-amfphp-sms/air-rfid-source-files/</link>
<pubDate>Sun, 14 Oct 2007 04:29:36 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/10/rfid_air.zip</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>35</wp:post_id>
<wp:post_date>2007-10-13 20:29:36</wp:post_date>
<wp:post_date_gmt>2007-10-14 04:29:36</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>air-rfid-source-files</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>34</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/10/rfid_air.zip</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/10/rfid_air.zip</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Flex 3 + AIR + RFID + AMFPHP + SMS</title>
<link>http://blog.phy5ics.com/2007/10/13/flex-3-air-rfid-amfphp-sms/</link>
<pubDate>Sun, 14 Oct 2007 04:30:38 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[AIR]]></category>

		<category domain="category" nicename="air"><![CDATA[AIR]]></category>

		<category><![CDATA[AS3]]></category>

		<category domain="category" nicename="as3"><![CDATA[AS3]]></category>

		<category><![CDATA[Flex]]></category>

		<category domain="category" nicename="flex"><![CDATA[Flex]]></category>

		<category><![CDATA[RFID]]></category>

		<category domain="category" nicename="rfid"><![CDATA[RFID]]></category>

		<category><![CDATA[Web Services]]></category>

		<category domain="category" nicename="web-services"><![CDATA[Web Services]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2007/10/13/flex-3-air-rfid-amfphp-sms/</guid>
<description></description>
<content:encoded><![CDATA[I had originally wanted to build this project with my Parallax RFID reader, but since I can't interface it with the Make Controller until Liam at MakingThings fixes the serial BLOB implementation fixed in mchelper 2.0, I decided to complete a proof-of-concept with a Phidgets RFID reader.  The application is pretty straightforward - it consists of an RFID tag embedded in a cell phone that is read for its unique ID, prompts a user to enter some data and then remembers their personal data when they return.  While the premise is simple, there are a few moving parts required to stitch it together.

<!--more-->
But first, before an explanation, here's a demo of the application:

[flash http://vimeo.com/moogaloop.swf?clip_id=2164104&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=ffffff&amp;fullscreen=1 w=601 h=453 mode=1]

<strong>The Phidgets RFID Reader</strong>
<a title="PhidgetRFID" href="http://www.phidgets.com/products.php?product_id=1023" target="_blank">PhidgetRFID</a> is a EM4102 125Khz protocol reader.  This means that it does not have the capability to write to RFID tags, only read from them. While this is just fine, I point it out so that you are aware of this fact if you are new to RFID.  It should also be noted that RFID readers like these usually fit into a larger architecture that consists of a database of some sort.  This allows RFID tag IDs to be stored along with additional metadata.

This particular reader is nice in that you can connect it directly to a computer (Mac, Windows and Linux support) via USB and simply run a web service that provide connectivity to the board.  In this example, that process is abstracted away in the AS3 classes that Phidgets provides (they also have a .SWC if you prefer that), so connecting to it and reading tags from it is really quite easy.

After installing the software from Phidgets, I set up an alias in my bash profile set up to make it easy to fire up the web service: alias phidget='/usr/bin/phidgetwebservice21'.  That way, I just type phidget into a terminal window and it starts.  After plugging the RFID reader into an open USB port, it's ready to communicate.  That's really all there is to setting it up since there is no microcontroller involved.

<strong>Flex Builder 3 and AIR</strong>
I opted to build this as an AIR application because an application like this is most applicable in a kiosk scenario, rather than as a web application.  Anyway, connecting to the RFID reader using Flex is quite easy and a majority of the code is devoted to setting up event handlers:
<pre lang="actionscript">creationcomplete="onCreationComplete()"&gt;

<!--[CDATA[

import com.phidgets.*;

import com.phidgets.events.*;

private var devRFID:PhidgetRFID;

private function onCreationComplete():void {

devRFID = new PhidgetRFID();

devRFID.addEventListener(PhidgetEvent.DETACH, onDetach);

devRFID.addEventListener(PhidgetEvent.ATTACH, onAttach);

devRFID.addEventListener(PhidgetErrorEvent.ERROR, onError);

devRFID.addEventListener(PhidgetDataEvent.TAG, onTag);

devRFID.addEventListener(PhidgetDataEvent.TAG_LOST, onTagLoss);

devRFID.open("localhost", 5001, "1234");

}

private function onAttach(pdeEvent:PhidgetEvent):void{

trace(pdeEvent);

devRFID.Antenna = true;

devRFID.LED = true;

}

private function onDetach(pdeEvent:PhidgetEvent):void{

trace(pdeEvent);

}

private function onTag(pdeEvent:PhidgetDataEvent):void {

&nbsp;	trace(pdeEvent);

//This is where all of the good stuff goes...

}

private function onTagLoss(pdeEvent:PhidgetDataEvent):void {

trace(pdeEvent);

}

private function onError(pdeEvent:PhidgetErrorEvent):void {

trace(pdeEvent);

}

]]--></pre>
If you're interested in the rest of the code, <a title="AIR-RFID Source Files" href="http://phy5ics.com/blog/wp-content/uploads/2007/10/rfid_air.zip">download the source</a>.  Also, a  quick disclaimer that this was just a quick proof-of-concept and is all in a single MXML file for simplicity rather than encapsulating objects and creating components.

<strong>AMFPHP Remoting</strong>
For server/Flash Player communication, I generally opt for remoting due to its ease of implementation and speed, especially if dynamic, database-driven calls are required for the application.  In this case, PHP and MySQL will handle user data and authentication as well as consuming SMS services.  I could write an entire article about AMFPHP and Flex 3, and probably will, but for now, I'll just mention it and note that it in the source code.

<strong>SMS</strong>
In the demo version (I'm not releasing this portion publicly), I've also rigged up some PHP classes to send SMS messages.  I found a service called <a title="Clickatell" href="http://clickatell.com" target="_blank">Clickatell</a> that provides SMS gateway services to a bunch of giant corporations like BBC, Vodafone and Oracle.  However, they do actually offer services to substantially smaller entities such as myself, which is pretty cool.  Not only that, but they offer a free trial of their services.

I'd recommend them if you only need to send outgoing SMS messages.  If you are interested in two-way messaging, be prepared to pony up a large amount of cash for short codes (somewhere in the neighborhood of $1200/month) and message routing.  The other alternative is to set up your own <a title="SMS gateway" href="http://www.x11.net/wiki/index.php/Setting_up_an_SMS_Gateway" target="_blank">SMS gateway</a>.  However, keep in mind that while setting up your own gateway is easy, it is not cost effective for sending large numbers of text messages using a normal consumer account.  It will end up being cheaper using a bulk service like Clickatell.

<strong>Source</strong>
<a title="AIR-RFID Source Files" href="http://phy5ics.com/blog/wp-content/uploads/2007/10/rfid_air.zip">Click here</a> to download the source for the AIR source and installer, PHP code and MySQL schema.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>34</wp:post_id>
<wp:post_date>2007-10-13 20:30:38</wp:post_date>
<wp:post_date_gmt>2007-10-14 04:30:38</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>flex-3-air-rfid-amfphp-sms</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1243146526</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>565</wp:comment_id>
<wp:comment_author><![CDATA[noah]]></wp:comment_author>
<wp:comment_author_email>christy@deafmetal.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>141.155.199.8</wp:comment_author_IP>
<wp:comment_date>2007-10-14 11:13:16</wp:comment_date>
<wp:comment_date_gmt>2007-10-14 19:13:16</wp:comment_date_gmt>
<wp:comment_content><![CDATA[That is very, very, very cool indeed.

I can already think of about 20 different implementations for this...

Thanks for the demo!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>826</wp:comment_id>
<wp:comment_author><![CDATA[Ben Arent]]></wp:comment_author>
<wp:comment_author_email>benarent@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.benarent.co.uk</wp:comment_author_url>
<wp:comment_author_IP>80.193.34.75</wp:comment_author_IP>
<wp:comment_date>2007-12-16 08:41:24</wp:comment_date>
<wp:comment_date_gmt>2007-12-16 16:41:24</wp:comment_date_gmt>
<wp:comment_content><![CDATA[this is great stuff. I'm going to be working on a very similar project soon. I'm desiging a social communication project for the eldery, keep an eye on my blog. Thanks for sharing.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2552</wp:comment_id>
<wp:comment_author><![CDATA[Hans]]></wp:comment_author>
<wp:comment_author_email>hanspflaumer@yahoo.com</wp:comment_author_email>
<wp:comment_author_url>http://www.hanspflaumer.com</wp:comment_author_url>
<wp:comment_author_IP>140.209.125.38</wp:comment_author_IP>
<wp:comment_date>2008-07-22 09:53:04</wp:comment_date>
<wp:comment_date_gmt>2008-07-22 17:53:04</wp:comment_date_gmt>
<wp:comment_content><![CDATA[this is, so SO cool. 
How did you get the text/dialogue to happen on your computer?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3295</wp:comment_id>
<wp:comment_author><![CDATA[Johny]]></wp:comment_author>
<wp:comment_author_email>johnybalian@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://Johny.org</wp:comment_author_url>
<wp:comment_author_IP>216.99.42.50</wp:comment_author_IP>
<wp:comment_date>2008-09-19 11:56:53</wp:comment_date>
<wp:comment_date_gmt>2008-09-19 19:56:53</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks for the great article, just wanted to let you know that the demo video is not loading.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3942</wp:comment_id>
<wp:comment_author><![CDATA[maurizio]]></wp:comment_author>
<wp:comment_author_email>mauricioikem@yahoo.com.ar</wp:comment_author_email>
<wp:comment_author_url>http://Website</wp:comment_author_url>
<wp:comment_author_IP>190.227.20.125</wp:comment_author_IP>
<wp:comment_date>2009-02-01 00:10:25</wp:comment_date>
<wp:comment_date_gmt>2009-02-01 08:10:25</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Excelent!!. Thanks for the great idea. 

Sos un capo, amigoo..

Saludoss]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3951</wp:comment_id>
<wp:comment_author><![CDATA[jubari]]></wp:comment_author>
<wp:comment_author_email>mail@jubari.com</wp:comment_author_email>
<wp:comment_author_url>http://jubari.com</wp:comment_author_url>
<wp:comment_author_IP>77.130.135.87</wp:comment_author_IP>
<wp:comment_date>2009-05-09 12:20:52</wp:comment_date>
<wp:comment_date_gmt>2009-05-09 20:20:52</wp:comment_date_gmt>
<wp:comment_content><![CDATA[We are currently working on a project with RFID and Flex. Since http://www.merapiproject.net is still in closed alpha you saved my day ;)

Thanks.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3953</wp:comment_id>
<wp:comment_author><![CDATA[George Molson]]></wp:comment_author>
<wp:comment_author_email>georgemolson@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://Website</wp:comment_author_url>
<wp:comment_author_IP>201.195.51.98</wp:comment_author_IP>
<wp:comment_date>2009-05-23 22:24:24</wp:comment_date>
<wp:comment_date_gmt>2009-05-24 06:24:24</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Exceptional work! I am building ATM (Automatic Teller Machine) software and I want to port my Flash demo to Linux / Flex for security reasons. I want the final version to integrate with an RFID sensor and USB cash dispenser. My biggest obstacle is that the majority of the new cash dispenser drivers are for windows. I don't know who the geniuses (genii?) behind that one are... Anyways would love to hear about any cool ideas you have. Smart people are hard to find.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3879</wp:comment_id>
<wp:comment_author><![CDATA[Barton]]></wp:comment_author>
<wp:comment_author_email>jb@phy5ics.com</wp:comment_author_email>
<wp:comment_author_url>http://phy5ics.com</wp:comment_author_url>
<wp:comment_author_IP>24.90.236.80</wp:comment_author_IP>
<wp:comment_date>2008-11-05 17:10:15</wp:comment_date>
<wp:comment_date_gmt>2008-11-06 01:10:15</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I finally got around to fixing the video.  I got rid of my FMS server a while back and neglected to realized that I had hosted the streaming version of that video there.  Now, I'm taking advantage of someone else's expensive system architecture (thanks, Vimeo) to deliver my videos.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3961</wp:comment_id>
<wp:comment_author><![CDATA[3wstudio&raquo; ConectÃ¡ndose al hardware directamente con AS3]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://www.3wstudio.com.ar/conectandose-al-hardware-con-as3-flexflash-867.html</wp:comment_author_url>
<wp:comment_author_IP>200.85.152.19</wp:comment_author_IP>
<wp:comment_date>2009-09-23 19:58:32</wp:comment_date>
<wp:comment_date_gmt>2009-09-24 03:58:32</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] Flex3 + AIR + RFID + AMFPHP + SMS: http://blog.phy5ics.com/2007/10/13/flex-3-air-rfid-amfphp-sms/ [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3973</wp:comment_id>
<wp:comment_author><![CDATA[Hisham Ragab]]></wp:comment_author>
<wp:comment_author_email>hishamrm@hotmail.com</wp:comment_author_email>
<wp:comment_author_url>http://Website</wp:comment_author_url>
<wp:comment_author_IP>196.221.74.84</wp:comment_author_IP>
<wp:comment_date>2010-05-03 05:38:58</wp:comment_date>
<wp:comment_date_gmt>2010-05-03 13:38:58</wp:comment_date_gmt>
<wp:comment_content><![CDATA[what a great idea to interacting rich internet applications developed by flex with usb and sms it's a total access control solution]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4007</wp:comment_id>
<wp:comment_author><![CDATA[HowtoMake200Dollarsper]]></wp:comment_author>
<wp:comment_author_email>dkbzdtcnyad@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://bbs.shequ724.co</wp:comment_author_url>
<wp:comment_author_IP>124.115.249.154</wp:comment_author_IP>
<wp:comment_date>2013-03-10 06:43:51</wp:comment_date>
<wp:comment_date_gmt>2013-03-10 14:43:51</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I will right away grasp your rss as I can't find your e-mail subscription link or e-newsletter service. Do you have any? Please let me know in order that I could subscribe. Thanks. How to Make 200 Dollars per day with CPA Networks http://bbs.shequ724.com/viewthread.php?tid=57344&amp;extra=]]></wp:comment_content>
<wp:comment_approved>0</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>VideoPlayer</title>
<link>http://blog.phy5ics.com/2007/10/13/flex-3-air-rfid-amfphp-sms/videoplayer/</link>
<pubDate>Sun, 14 Oct 2007 04:41:48 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/10/videoplayer.swf</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>36</wp:post_id>
<wp:post_date>2007-10-13 20:41:48</wp:post_date>
<wp:post_date_gmt>2007-10-14 04:41:48</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>videoplayer</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>34</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/10/videoplayer.swf</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/10/videoplayer.swf</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Flex 3 + AIR + RFID + AMFPHP + SMS</title>
<link>http://blog.phy5ics.com/2007/10/14/34-revision/</link>
<pubDate>Sun, 14 Oct 2007 10:11:54 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2007/10/14/34-revision/</guid>
<description></description>
<content:encoded><![CDATA[I had originally wanted to build this project with my Parallax RFID reader, but since I can't interface it with the Make Controller until Liam at MakingThings fixes the serial BLOB implementation fixed in mchelper 2.0, I decided to complete a proof-of-concept with a Phidgets RFID reader.  The application is pretty straightforward - it consists of an RFID tag embedded in a cell phone that is read for its unique ID, prompts a user to enter some data and then remembers their personal data when they return.  While the premise is simple, there are a few moving parts required to stitch it together.

<!--more-->
But first, before an explanation, here's a demo of the application:

[kml_flashembed movie="http://phy5ics.com/playa/playa.swf" height="320" width="280" allowfullscreen="true" /]

<strong>The Phidgets RFID Reader</strong>
<a href="http://www.phidgets.com/products.php?product_id=1023" title="PhidgetRFID" target="_blank">PhidgetRFID</a> is a EM4102 125Khz protocol reader.  This means that it does not have the capability to write to RFID tags, only read from them. While this is just fine, I point it out so that you are aware of this fact if you are new to RFID.  It should also be noted that RFID readers like these usually fit into a larger architecture that consists of a database of some sort.  This allows RFID tag IDs to be stored along with additional metadata.

This particular reader is nice in that you can connect it directly to a computer (Mac, Windows and Linux support) via USB and simply run a web service that provide connectivity to the board.  In this example, that process is abstracted away in the AS3 classes that Phidgets provides (they also have a .SWC if you prefer that), so connecting to it and reading tags from it is really quite easy.

After installing the software from Phidgets, I set up an alias in my bash profile set up to make it easy to fire up the web service: alias phidget='/usr/bin/phidgetwebservice21'.  That way, I just type phidget into a terminal window and it starts.  After plugging the RFID reader into an open USB port, it's ready to communicate.  That's really all there is to setting it up since there is no microcontroller involved.

<strong>Flex Builder 3 and AIR</strong>
I opted to build this as an AIR application because an application like this is most applicable in a kiosk scenario, rather than as a web application.  Anyway, connecting to the RFID reader using Flex is quite easy and a majority of the code is devoted to setting up event handlers:
<pre lang="actionscript"><mx:application xmlns:mx="http://www.adobe.com/2006/mxml">

creationcomplete="onCreationComplete()"&gt;

<mx:script>

<!--[CDATA[

import com.phidgets.*;

import com.phidgets.events.*;

private var devRFID:PhidgetRFID;

private function onCreationComplete():void {

devRFID = new PhidgetRFID();

devRFID.addEventListener(PhidgetEvent.DETACH, onDetach);

devRFID.addEventListener(PhidgetEvent.ATTACH, onAttach);

devRFID.addEventListener(PhidgetErrorEvent.ERROR, onError);

devRFID.addEventListener(PhidgetDataEvent.TAG, onTag);

devRFID.addEventListener(PhidgetDataEvent.TAG_LOST, onTagLoss);

devRFID.open("localhost", 5001, "1234");

}

private function onAttach(pdeEvent:PhidgetEvent):void{

trace(pdeEvent);

devRFID.Antenna = true;

devRFID.LED = true;

}

private function onDetach(pdeEvent:PhidgetEvent):void{

trace(pdeEvent);

}

private function onTag(pdeEvent:PhidgetDataEvent):void {

&nbsp;	trace(pdeEvent);

//This is where all of the good stuff goes...

}

private function onTagLoss(pdeEvent:PhidgetDataEvent):void {

trace(pdeEvent);

}

private function onError(pdeEvent:PhidgetErrorEvent):void {

trace(pdeEvent);

}

]]-->

</mx:script>

</mx:application></pre>
If you're interested in the rest of the code, <a href="http://phy5ics.com/blog/wp-content/uploads/2007/10/rfid_air.zip" title="AIR-RFID Source Files">download the source</a>.  Also, a  quick disclaimer that this was just a quick proof-of-concept and is all in a single MXML file for simplicity rather than encapsulating objects and creating components.

<strong>AMFPHP Remoting</strong>
For server/Flash Player communication, I generally opt for remoting due to its ease of implementation and speed, especially if dynamic, database-driven calls are required for the application.  In this case, PHP and MySQL will handle user data and authentication as well as consuming SMS services.  I could write an entire article about AMFPHP and Flex 3, and probably will, but for now, I'll just mention it and note that it in the source code.

<strong>SMS</strong>
In the demo version (I'm not releasing this portion publicly), I've also rigged up some PHP classes to send SMS messages.  I found a service called <a href="http://clickatell.com" title="Clickatell" target="_blank">Clickatell</a> that provides SMS gateway services to a bunch of giant corporations like BBC, Vodafone and Oracle.  However, they do actually offer services to substantially smaller entities such as myself, which is pretty cool.  Not only that, but they offer a free trial of their services.

I'd recommend them if you only need to send outgoing SMS messages.  If you are interested in two-way messaging, be prepared to pony up a large amount of cash for short codes (somewhere in the neighborhood of $1200/month) and message routing.  The other alternative is to set up your own <a href="http://www.x11.net/wiki/index.php/Setting_up_an_SMS_Gateway" title="SMS gateway" target="_blank">SMS gateway</a>.  However, keep in mind that while setting up your own gateway is easy, it is not cost effective for sending large numbers of text messages using a normal consumer account.  It will end up being cheaper using a bulk service like Clickatell.

<strong>Source</strong>
<a href="http://phy5ics.com/blog/wp-content/uploads/2007/10/rfid_air.zip" title="AIR-RFID Source Files">Click here</a> to download the source for the AIR source and installer, PHP code and MySQL schema.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>45</wp:post_id>
<wp:post_date>2007-10-14 02:11:54</wp:post_date>
<wp:post_date_gmt>2007-10-14 10:11:54</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>34-revision</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>34</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Arithmetik Garden 1</title>
<link>http://blog.phy5ics.com/2007/10/29/arithmetik-garden/arithmetik-garden-1/</link>
<pubDate>Mon, 29 Oct 2007 21:51:04 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai04_s.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>38</wp:post_id>
<wp:post_date>2007-10-29 13:51:04</wp:post_date>
<wp:post_date_gmt>2007-10-29 21:51:04</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>arithmetik-garden-1</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>37</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai04_s.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai04_s.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:350;s:6:"height";i:203;s:14:"hwstring_small";s:23:"height='74' width='128'";s:4:"file";s:94:"/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai04_s.jpg";s:5:"thumb";s:41:"arithmetikgarden-zentai04_s.thumbnail.jpg";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Arithmetik Garden 1</title>
<link>http://blog.phy5ics.com/2007/10/29/arithmetik-garden/arithmetik-garden-1-3/</link>
<pubDate>Mon, 29 Oct 2007 21:51:54 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai04_s2.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>40</wp:post_id>
<wp:post_date>2007-10-29 13:51:54</wp:post_date>
<wp:post_date_gmt>2007-10-29 21:51:54</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>arithmetik-garden-1-3</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>37</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai04_s2.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai04_s2.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:350;s:6:"height";i:203;s:14:"hwstring_small";s:23:"height='74' width='128'";s:4:"file";s:95:"/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai04_s2.jpg";s:5:"thumb";s:42:"arithmetikgarden-zentai04_s2.thumbnail.jpg";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Arithmetik Garden 1</title>
<link>http://blog.phy5ics.com/2007/10/29/arithmetik-garden/arithmetik-garden-1-2/</link>
<pubDate>Mon, 29 Oct 2007 21:51:54 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai04_s1.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>39</wp:post_id>
<wp:post_date>2007-10-29 13:51:54</wp:post_date>
<wp:post_date_gmt>2007-10-29 21:51:54</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>arithmetik-garden-1-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>37</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai04_s1.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai04_s1.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:350;s:6:"height";i:203;s:14:"hwstring_small";s:23:"height='74' width='128'";s:4:"file";s:95:"/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai04_s1.jpg";s:5:"thumb";s:42:"arithmetikgarden-zentai04_s1.thumbnail.jpg";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Arithmetik Garden 2</title>
<link>http://blog.phy5ics.com/2007/10/29/arithmetik-garden/arithmetik-garden-2/</link>
<pubDate>Mon, 29 Oct 2007 21:55:40 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai05_s.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>41</wp:post_id>
<wp:post_date>2007-10-29 13:55:40</wp:post_date>
<wp:post_date_gmt>2007-10-29 21:55:40</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>arithmetik-garden-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>37</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai05_s.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai05_s.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:350;s:6:"height";i:189;s:14:"hwstring_small";s:23:"height='69' width='128'";s:4:"file";s:94:"/users/home/phy5ics/web/public/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai05_s.jpg";s:5:"thumb";s:41:"arithmetikgarden-zentai05_s.thumbnail.jpg";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Arithmetik Garden</title>
<link>http://blog.phy5ics.com/2007/10/29/arithmetik-garden/</link>
<pubDate>Mon, 29 Oct 2007 21:57:07 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[RFID]]></category>

		<category domain="category" nicename="rfid"><![CDATA[RFID]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2007/10/29/arithmetik-garden/</guid>
<description></description>
<content:encoded><![CDATA[I just returned from a trip to Japan and while in Tokyo I attended an exhibition at the <a href="http://www.mori.art.museum/eng/index.html" target="_blank">Mori Art Museum</a> that was simply amazing.  The show was called Roppongi Crossing 2007: Future Beats in Japanese Contemporary Art and overall the artists that participated were fantastic, with most of them creating pieces specifically for the show.   However, the exhibition included one piece in particular that stands out as the best artistic use of RFID that I have seen.

<!--more--> Created by Sato Masahiko and Kiriyama Takashi the piece was called Arithmetik Garden.  The premise of which is a space that one enters after picking up a card with a number on it.  This card also contains an embedded RFID chip.  One then wanders through a series of gates that contain RFID readers and are marked with mathematic operators combined with numbers (e.g. + 3, -8, / 2, * 7, etc.).  The end goal is attaining a value of 73 by walking through the various gates to perform those operations on the current number before exiting the piece.

What is especially nice about this piece is that the technology is completely transparent, as the card is on a string which is placed around one's neck.  This leaves a participant to focus on the math operations required and the freedom to enjoy the experience of walking through an interface rather than passively interacting with it.  There is, however, a computer in the corner of the exhibit that will display the original number as well as all of the mathematical operations performed throughout the experience.  It also displays the current number for those that are less mathematically-inclined.

Photos were not allowed in the exhibition, so here are a few that I found:

<a href="http://phy5ics.com/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai05_s.jpg" title="Arithmetik Garden 2"><img src="http://phy5ics.com/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai05_s.jpg" alt="Arithmetik Garden 2" /></a>

<a href="http://phy5ics.com/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai04_s2.jpg" title="Arithmetik Garden 1"><img src="http://phy5ics.com/blog/wp-content/uploads/2007/10/arithmetikgarden-zentai04_s2.jpg" alt="Arithmetik Garden 1" /></a>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>37</wp:post_id>
<wp:post_date>2007-10-29 13:57:07</wp:post_date>
<wp:post_date_gmt>2007-10-29 21:57:07</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>arithmetik-garden</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:comment>
<wp:comment_id>842</wp:comment_id>
<wp:comment_author><![CDATA[The Mobile City &raquo; Blog Archive &raquo; Arithmetik Garden - RFID City]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://www.themobilecity.nl/2007/12/28/arithmetik-garden-rfid-city/</wp:comment_author_url>
<wp:comment_author_IP>69.89.31.144</wp:comment_author_IP>
<wp:comment_date>2007-12-28 01:19:13</wp:comment_date>
<wp:comment_date_gmt>2007-12-28 09:19:13</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] a few blogs I found reviews of the Roppongi Crossing show in the Mori Art Museum in Tokyo. One of the exhibits [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Remount an External Hard Drive in Leopard</title>
<link>http://blog.phy5ics.com/2008/03/14/remount-an-external-hard-drive-in-leopard/</link>
<pubDate>Sat, 15 Mar 2008 01:27:14 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[General Technology]]></category>

		<category domain="category" nicename="general-technology"><![CDATA[General Technology]]></category>

		<category><![CDATA[leopard]]></category>

		<category domain="category" nicename="leopard"><![CDATA[leopard]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2008/03/14/remount-an-external-hard-drive-in-leopard/</guid>
<description></description>
<content:encoded><![CDATA[This may seem like a fairly outlandish edge case for external hard drives, but it's one that I've run recently.  Suppose you have an external Firewire drive connected to your MacBook Pro and then daisy-chained via Firewire to that, you have several more Firewire drives.  Then suppose you've accidentally ejected that first drive that everything else is daisy-chained to.  Then suppose that you're currently in the middle of a render to one of the other down-stream drives and really need some files off of the drive that was unmounted.  That removes the possibility of physically disconnecting the first drive to then reconnecting it to remount it, since the act of disconnecting would fubar the render.

<!--more--> I know that you're now agreeing that this is a tedious edge case and probably clicking the close button on your browser, but for those that haven't yet, there's an easy answer.  Open up Disk Utility from /Applications/Utilities and select the drive that you unmounted and click "Mount" from the menu.  Problem solved, render complete (hours later).]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>42</wp:post_id>
<wp:post_date>2008-03-14 17:27:14</wp:post_date>
<wp:post_date_gmt>2008-03-15 01:27:14</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>remount-an-external-hard-drive-in-leopard</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:comment>
<wp:comment_id>4009</wp:comment_id>
<wp:comment_author><![CDATA[Wilfred T. Mccoy]]></wp:comment_author>
<wp:comment_author_email>wilfred.t.mccoy.ec48@hotmail.com</wp:comment_author_email>
<wp:comment_author_url>http://animaladas.blogbyt.es/</wp:comment_author_url>
<wp:comment_author_IP>178.32.212.25</wp:comment_author_IP>
<wp:comment_date>2013-05-07 02:06:55</wp:comment_date>
<wp:comment_date_gmt>2013-05-07 10:06:55</wp:comment_date_gmt>
<wp:comment_content><![CDATA[âWhatâs up with this new iMac dropping the optical drive?â, a friend of mine asked me nervously the other day.]]></wp:comment_content>
<wp:comment_approved>0</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Bluetooth + GPS + ActionScript - Part 1 - Hardware</title>
<link>http://blog.phy5ics.com/2008/03/16/bluetooth-gps-actionscript-part-1-hardware/</link>
<pubDate>Sun, 16 Mar 2008 17:37:19 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[AS3]]></category>

		<category domain="category" nicename="as3"><![CDATA[AS3]]></category>

		<category><![CDATA[Bluetooth]]></category>

		<category domain="category" nicename="bluetooth"><![CDATA[Bluetooth]]></category>

		<category><![CDATA[GPS]]></category>

		<category domain="category" nicename="gps"><![CDATA[GPS]]></category>

		<category><![CDATA[Physical Computing]]></category>

		<category domain="category" nicename="physical-computing"><![CDATA[Physical Computing]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2008/03/16/bluetooth-gps-actionscript-part-1-hardware/</guid>
<description></description>
<content:encoded><![CDATA[<strong>Overview</strong>
For this project, my goal was to get GPS data into my Mac for some visualization experiments with ActionScript.  After some initial prototypes that worked well using an RS232-to-USB converter, I decided that wasn't slick enough and had it too many wires.  I like things nice and clean around my desk, so I opted for adding Bluetooth in place of a USB converter.

After experimenting with some different methods, some using microprocessors and some not, I opted for the simpler route, eliminating the microprocessor.  A microprocessor doesn't add anything other than cost for the basic purpose of this project.  Although stay tuned for another posting about integrating a similar configuration with the Make Controller and Arduino microprocessors.

<!--more-->
<strong>Parts List</strong>
<ul>
	<li> <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=114" target="_blank">5V regulated power supply</a></li>
	<li> <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=158" target="_blank">BlueSMiRF Bluetooth Module</a></li>
	<li> <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=465" target="_blank">EM406A GPS Module</a></li>
	<li> Extra 6-pin interface cable</li>
	<li> 9V battery holder</li>
	<li> Headers</li>
	<li> Breadboard</li>
	<li> Solid 22-gauge wire</li>
	<li> Soldering iron</li>
</ul>
<strong>5v Power Supply</strong>
Select a 5V power supply to use.  In this case, I'm using a switchable 3.3V/5V power supply kit that I picked up from SparkFun.  I made a slight modification to it and soldered a 9V battery adaptor to it to make it a bit more flexible and truly wireless rather than using the standard 9V DC wall adaptor.  This is just my preference for prototyping.  When I get down to a final design, I generally switch it up in favor of a simple voltage regulator to save space and weight.

<strong>BlueSMiRF Embedded Bluetooth Serial RF Link</strong>
The BlueSMiRF module is sweet little device, providing an easy way to link any project using a serial interface to a computer (or another BlueSMiRF module).  Simply connect the TX, RX to another serial device along with vcc (4.5V-5.5V) and ground and it is ready to pair.

<strong>EM406A GPS Board</strong>
This small board uses the SiRF Star III chipset, which is a nice chipset that is relatively stingy on power supply and can fix its position - known as TTFF (Time To First Fix), even in indoor environments, in a matter of 30 seconds or so.  Just keep in mind that the odd peach-colored ceramic part is the antenna and should point towards the sky.   Many other chipsets offer significantly less in terms of performance and most are unable to fix a position unless outside.  I was sold on it since happens to be the same chipset that I have in my Garmin CS60x, a considerably more expensive device.

Besides all that, the EM406A is a perfect candidate for integration with physical computing projects because it's output is serial.  It starts outputting NMEA strings at 4800 baud once its position is fixed.  NMEA 0183 is a standard with which GPS data is transmitted from a device using comma-delimited strings.  For more information on NMEA, consult <a href="http://www.gpsinformation.org/dale/nmea.htm" target="_blank">this resource</a>.

The documentation for the board itself is well done.  In addition to the NMEA strings that are broadcast from the board itself, the EM406A can have commands sent to it via its serial interface to get specific NMEA data back.Â  The only catch is be sure to get an 6-pin extra interface cable along with the board itself.Â  I cut the interface cable in half and then soldered the wires some headers to make prototyping easier.  Otherwise it's going to be impossible to do anything useful with it.

<strong>Schematic</strong>
Now that we have all that down, here's a little schematic of how everything is hooked up together:

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_schematic_rev1.jpg"><img class="alignnone size-full wp-image-54" title="gps_bt_schematic_rev1" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_schematic_rev1.jpg" /></a>

<strong>Photograph</strong>

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_2.jpg"><img class="alignnone size-full wp-image-56" title="gps_bt_2" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_2.jpg" /></a>
<strong>Next Article</strong>
In the next post, I'll be working through the software aspects of this project.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>43</wp:post_id>
<wp:post_date>2008-03-16 09:37:19</wp:post_date>
<wp:post_date_gmt>2008-03-16 17:37:19</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>bluetooth-gps-actionscript-part-1-hardware</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1275192258</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>tumblrize_post-type</wp:meta_key>
<wp:meta_value>regular</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>tumblrize_post-id</wp:meta_key>
<wp:meta_value>641149554</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>1985</wp:comment_id>
<wp:comment_author><![CDATA[grhabyt]]></wp:comment_author>
<wp:comment_author_email>gwyan.rhabyt@csueastbay.edu</wp:comment_author_email>
<wp:comment_author_url>http://www.gwyanrhabyt.net</wp:comment_author_url>
<wp:comment_author_IP>193.198.80.93</wp:comment_author_IP>
<wp:comment_date>2008-05-22 12:25:36</wp:comment_date>
<wp:comment_date_gmt>2008-05-22 20:25:36</wp:comment_date_gmt>
<wp:comment_content><![CDATA[This sounds great. I'm eagerly awaiting the software side of it. Did you use flosc? Is there something better in AS3 to socket it into? I'm still with AS2 and can't find anything there barring going via XML or flosc]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2542</wp:comment_id>
<wp:comment_author><![CDATA[Eric]]></wp:comment_author>
<wp:comment_author_email>eric@ericheaton.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>199.171.51.6</wp:comment_author_IP>
<wp:comment_date>2008-07-22 05:53:05</wp:comment_date>
<wp:comment_date_gmt>2008-07-22 13:53:05</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I wonder how long it will take to come out with an iPhone App to connect to this for 2G iPhones without GPS

:-)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2544</wp:comment_id>
<wp:comment_author><![CDATA[Envio de dados GPS para seu PC via Bluetooth e ActionScript | Deu Curto!]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://deucurto.site88.net/blog/?p=45</wp:comment_author_url>
<wp:comment_author_IP>66.197.177.69</wp:comment_author_IP>
<wp:comment_date>2008-07-22 06:00:12</wp:comment_date>
<wp:comment_date_gmt>2008-07-22 14:00:12</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] [Leia mais] [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2547</wp:comment_id>
<wp:comment_author><![CDATA[Send GPS data to your computer without a microcontroller &raquo; Developages - Development and Technology Blog]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://www.developages.com/send-gps-data-to-your-computer-without-a-microcontroller/37663</wp:comment_author_url>
<wp:comment_author_IP>204.13.53.30</wp:comment_author_IP>
<wp:comment_date>2008-07-22 06:13:08</wp:comment_date>
<wp:comment_date_gmt>2008-07-22 14:13:08</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...]  Bluetooth + GPS + ActionScript  [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2548</wp:comment_id>
<wp:comment_author><![CDATA[ä¹æé¦|æå¨ä¸­å½|Keep Simple, Make Fun. / éè¯»æ¶é´ ï¼ 20080722]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://www.sinoutopia.org/wp/?p=1300</wp:comment_author_url>
<wp:comment_author_IP>210.82.90.54</wp:comment_author_IP>
<wp:comment_date>2008-07-22 06:53:00</wp:comment_date>
<wp:comment_date_gmt>2008-07-22 14:53:00</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] è¿ä¹å°ç GPS æ¨¡ååå ä¸ä¸­å½çµä¿¡éé¿æ¨Wi-Fiææç»ç«¯è¿æ¡æ¶æ¯ãççå¼å¾æå¾åï½ï½ ä¸è¿ç°å¨çµåæ¹é¢é®é¢çç¡®è¿æ²¡æå®å¨åå¤å¥½ï¼ææè®¾å¤ççåï½ [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2549</wp:comment_id>
<wp:comment_author><![CDATA[Tam]]></wp:comment_author>
<wp:comment_author_email>asdf@asdf.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>205.254.147.8</wp:comment_author_IP>
<wp:comment_date>2008-07-22 07:00:06</wp:comment_date>
<wp:comment_date_gmt>2008-07-22 15:00:06</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Uh. On that little diagram that you made, is the BlueSMiRF connected right?

Is the VCC+ AND the GND of the BlueSMiRF Supposed to both be connected to the VCC+ of the power supply? Cause that makes less than no sense to me. Was it supposed to be connected in parallel instead?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2550</wp:comment_id>
<wp:comment_author><![CDATA[Siftah]]></wp:comment_author>
<wp:comment_author_email>John@siftah.com</wp:comment_author_email>
<wp:comment_author_url>http://www.siftah.com</wp:comment_author_url>
<wp:comment_author_IP>91.102.63.190</wp:comment_author_IP>
<wp:comment_date>2008-07-22 07:06:34</wp:comment_date>
<wp:comment_date_gmt>2008-07-22 15:06:34</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I'm a bit confused - have you not just replicated the functionality of a $40 Bluetooth GPS module (with a built in battery and charging circuit) by using two $60 sparkfun modules that still need external power?

Interested question rather than a criticism! :)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2556</wp:comment_id>
<wp:comment_author><![CDATA[David]]></wp:comment_author>
<wp:comment_author_email>david@fastolfe.net</wp:comment_author_email>
<wp:comment_author_url>http://fastolfe.net/</wp:comment_author_url>
<wp:comment_author_IP>65.57.245.11</wp:comment_author_IP>
<wp:comment_date>2008-07-22 13:01:25</wp:comment_date>
<wp:comment_date_gmt>2008-07-22 21:01:25</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Did you really connect GND and VCC+ together on the BlueSMiRF?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2563</wp:comment_id>
<wp:comment_author><![CDATA[Arto]]></wp:comment_author>
<wp:comment_author_email>arto.salminen@luukku.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>130.230.67.82</wp:comment_author_IP>
<wp:comment_date>2008-07-22 22:30:53</wp:comment_date>
<wp:comment_date_gmt>2008-07-23 06:30:53</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Nice project. But it would be cheaper to buy a ready-made commercial Bluetooth GPS. Usually those things have internal batteries with a charging circuit. And they come in very compact housing.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2564</wp:comment_id>
<wp:comment_author><![CDATA[Snoopy]]></wp:comment_author>
<wp:comment_author_email>bill34@freemail.hu</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>84.0.102.125</wp:comment_author_IP>
<wp:comment_date>2008-07-22 23:13:54</wp:comment_date>
<wp:comment_date_gmt>2008-07-23 07:13:54</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Nice stuff!
Please, correct the schematic on wiring BT module because you have short circuit between gnd and vcc+ :)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2568</wp:comment_id>
<wp:comment_author><![CDATA[GB Vehicles Info &raquo; Blog Archive &raquo; Send GPS data to your computer without a microcontroller]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://www.gbvinfo.com/?p=47</wp:comment_author_url>
<wp:comment_author_IP>78.109.16.66</wp:comment_author_IP>
<wp:comment_date>2008-07-23 02:05:54</wp:comment_date>
<wp:comment_date_gmt>2008-07-23 10:05:54</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...]  Bluetooth + GPS + ActionScript , GPS Parser [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2600</wp:comment_id>
<wp:comment_author><![CDATA[phy5ics &raquo; Blog Archive &raquo; Thanks for all the Fish]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://phy5ics.com/blog/2008/07/24/thanks-for-all-the-fish/</wp:comment_author_url>
<wp:comment_author_IP>207.7.108.213</wp:comment_author_IP>
<wp:comment_date>2008-07-24 18:16:42</wp:comment_date>
<wp:comment_date_gmt>2008-07-25 02:16:42</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] greatly appreciate everyone&#8217;s comments and input on my article on Bluetooth and GPS  .Â  It is quite nice to have the exposure from Make and also to have one&#8217;s efforts peer [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2601</wp:comment_id>
<wp:comment_author><![CDATA[Barton]]></wp:comment_author>
<wp:comment_author_email>jb@phy5ics.com</wp:comment_author_email>
<wp:comment_author_url>http://phy5ics.com</wp:comment_author_url>
<wp:comment_author_IP>68.173.233.100</wp:comment_author_IP>
<wp:comment_date>2008-07-24 18:16:58</wp:comment_date>
<wp:comment_date_gmt>2008-07-25 02:16:58</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks for all the comments.  I parlayed them into another article: http://phy5ics.com/blog/2008/07/24/thanks-for-all-the-fish/]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2609</wp:comment_id>
<wp:comment_author><![CDATA[Electronics-Lab.com Blog &raquo; Blog Archive &raquo; Send GPS data to your computer without a microcontroller]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://www.electronics-lab.com/blog/?p=2277</wp:comment_author_url>
<wp:comment_author_IP>74.200.69.253</wp:comment_author_IP>
<wp:comment_date>2008-07-25 09:28:02</wp:comment_date>
<wp:comment_date_gmt>2008-07-25 17:28:02</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] Send GPS data to your computer without a microcontroller - [Link] [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2675</wp:comment_id>
<wp:comment_author><![CDATA[The Three Mighty Combo â Bluetooth, GPS and Action Script - CircuitGeek]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://www.circuitgeek.com/the-three-mighty-combo-bluetooth-gps-and-action-script/</wp:comment_author_url>
<wp:comment_author_IP>67.228.39.199</wp:comment_author_IP>
<wp:comment_date>2008-07-31 11:24:51</wp:comment_date>
<wp:comment_date_gmt>2008-07-31 19:24:51</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] That&#8217;s all, guys and do enjoys yourself! [link] [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2995</wp:comment_id>
<wp:comment_author><![CDATA[. [ Z o o B a B ] .: Good Designs]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://zoobab.wikidot.com/designs</wp:comment_author_url>
<wp:comment_author_IP>74.86.234.146</wp:comment_author_IP>
<wp:comment_date>2008-08-28 01:33:31</wp:comment_date>
<wp:comment_date_gmt>2008-08-28 09:33:31</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] http://phy5ics.com/blog/2008/03/16/bluetooth-gps-actionscript-part-1-hardware/#more-43 [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3880</wp:comment_id>
<wp:comment_author><![CDATA[Barton]]></wp:comment_author>
<wp:comment_author_email>jb@phy5ics.com</wp:comment_author_email>
<wp:comment_author_url>http://phy5ics.com</wp:comment_author_url>
<wp:comment_author_IP>24.90.236.80</wp:comment_author_IP>
<wp:comment_date>2008-11-06 17:22:55</wp:comment_date>
<wp:comment_date_gmt>2008-11-07 01:22:55</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I finally got around to making some updates - namely the schematic with the short in it and adding a missing top-down photo.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3904</wp:comment_id>
<wp:comment_author><![CDATA[Illusion]]></wp:comment_author>
<wp:comment_author_email>mea06ma@shef.ac.uk</wp:comment_author_email>
<wp:comment_author_url>http://Website</wp:comment_author_url>
<wp:comment_author_IP>213.121.151.142</wp:comment_author_IP>
<wp:comment_date>2008-11-15 08:12:02</wp:comment_date>
<wp:comment_date_gmt>2008-11-15 16:12:02</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi m8,

Nice stuff.

I am also using this module in a different manner and was therefore wondering, what is the functionality of 1 pulse per second pin in EM406-A.

Although, I am already getting my stuff working, but do you know exactly what is this pps pin for?

Hope to hear from you soon.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3912</wp:comment_id>
<wp:comment_author><![CDATA[Barton]]></wp:comment_author>
<wp:comment_author_email>jb@phy5ics.com</wp:comment_author_email>
<wp:comment_author_url>http://phy5ics.com</wp:comment_author_url>
<wp:comment_author_IP>74.8.31.5</wp:comment_author_IP>
<wp:comment_date>2008-11-17 14:31:44</wp:comment_date>
<wp:comment_date_gmt>2008-11-17 22:31:44</wp:comment_date_gmt>
<wp:comment_content><![CDATA[The 1PPS pin is synchronized with the GPS time that is received.  As for a use, by monitoring output on that pin, you can determine whether or not the board has a GPS fix (i.e. there will not be one pulse-per-second if there is not a GPS fix, as there is no GPS time available).  In other words, this enables you to create an application that does not have to monitor and parse serial output to determine if there is a fix or not.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3958</wp:comment_id>
<wp:comment_author><![CDATA[Clay]]></wp:comment_author>
<wp:comment_author_email>GrahamC@my.hiram.edu</wp:comment_author_email>
<wp:comment_author_url>http://Website</wp:comment_author_url>
<wp:comment_author_IP>68.97.59.20</wp:comment_author_IP>
<wp:comment_date>2009-08-27 18:36:02</wp:comment_date>
<wp:comment_date_gmt>2009-08-28 02:36:02</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi John,

I'm not sure if this site is defunct, but if not would you mind posting or sending the schematic to my email. I am trying to do some work with birds for tracking their location and I would like to see the layout of the design.

thanks,
Clay]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3999</wp:comment_id>
<wp:comment_author><![CDATA[atrolveEssell]]></wp:comment_author>
<wp:comment_author_email>bijonce6@go2.pl</wp:comment_author_email>
<wp:comment_author_url>http://Website</wp:comment_author_url>
<wp:comment_author_IP>222.186.17.99</wp:comment_author_IP>
<wp:comment_date>2011-04-09 00:16:38</wp:comment_date>
<wp:comment_date_gmt>2011-04-09 08:16:38</wp:comment_date_gmt>
<wp:comment_content><![CDATA[It absolutely agree with the previous phrase    
<a href="http://www.fotograffo.pl" rel="nofollow">fotografia &#347;lubna </a>]]></wp:comment_content>
<wp:comment_approved>0</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Bluetooth + GPS + ActionScript - Part 1 - Hardware</title>
<link>http://blog.phy5ics.com/2008/03/16/43-revision/</link>
<pubDate>Sun, 16 Mar 2008 17:37:19 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2008/03/16/43-revision/</guid>
<description></description>
<content:encoded><![CDATA[<strong>Overview</strong>
For this project, my goal was to get GPS data into my Mac for some visualization experiments with ActionScript.  After some initial prototypes that worked well using an RS232-to-USB converter, I decided that wasn't slick enough and had it too many wires.  I like things nice and clean around my desk, so I opted for adding Bluetooth in place of a USB converter.

After experimenting with some different methods, some using microprocessors and some not, I opted for the simpler route, eliminating the microprocessor.  A microprocessor doesn't add anything other than cost for the basic purpose of this project.  Although stay tuned for another posting about integrating a similar configuration with the Make Controller and Arduino microprocessors.

<img src="http://phy5ics.com/gfx/blog/gps_bt_1.jpg" height="372" width="560" />
<!--more-->
<strong>Parts List</strong>
<ul>
	<li>    <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=114" target="_blank">5V regulated power supply</a></li>
	<li>    <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=158" target="_blank">BlueSMiRF Bluetooth Module</a></li>
	<li>    <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=465" target="_blank">EM406A GPS Module</a></li>
	<li>    Extra 6-pin interface cable</li>
	<li>    9V battery holder</li>
	<li>    Headers</li>
	<li>    Breadboard</li>
	<li>    Solid 22-gauge wire</li>
	<li>    Soldering iron</li>
</ul>
<strong>5v Power Supply</strong>
Select a 5V power supply to use.  In this case, I'm using a switchable 3.3V/5V power supply kit that I picked up from SparkFun.  I made a slight modification to it and soldered a 9V battery adaptor to it to make it a bit more flexible and truly wireless rather than using the standard 9V DC wall adaptor.  This is just my preference for prototyping.  When I get down to a final design, I generally switch it up in favor of a simple voltage regulator to save space and weight.

<strong>BlueSMiRF Embedded Bluetooth Serial RF Link</strong>
The BlueSMiRF module is sweet little device, providing an easy way to link any project using a serial interface to a computer (or another BlueSMiRF module).  Simply connect the TX, RX to another serial device along with vcc (4.5V-5.5V) and ground and it is ready to pair.

<strong>EM406A GPS Board</strong>
This small board uses the SiRF Star III chipset, which is a nice chipset that is relatively stingy on power supply and can fix its position - known as TTFF (Time To First Fix), even in indoor environments, in a matter of 30 seconds or so.  Just keep in mind that the odd peach-colored ceramic part is the antenna and should point towards the sky.   Many other chipsets offer significantly less in terms of performance and most are unable to fix a position unless outside.  I was sold on it since happens to be the same chipset that I have in my Garmin CS60x, a considerably more expensive device.

Besides all that, the EM406A is a perfect candidate for integration with physical computing projects because it's output is serial.  It starts outputting NMEA strings at 4800 baud once its position is fixed.  NMEA 0183 is a standard with which GPS data is transmitted from a device using comma-delimited strings.  For more information on NMEA, consult <a href="http://www.gpsinformation.org/dale/nmea.htm" target="_blank">this resource</a>.

The documentation for the board itself is well done.  In addition to the NMEA strings that are broadcast from the board itself, the EM406A can have commands sent to it via its serial interface to get specific NMEA data back.Â  The only catch is be sure to get an 6-pin extra interface cable along with the board itself.Â  I cut the interface cable in half and then soldered the wires some headers to make prototyping easier.  Otherwise it's going to be impossible to do anything useful with it.

<strong>Schematic</strong>
Now that we have all that down, here's a little schematic of how everything is hooked up together:

<img src="http://phy5ics.com/gfx/blog/gps_bt_schematic.jpg" height="402" width="562" />

<strong>Photograph</strong>

<img src="http://phy5ics.com/gfx/blog/gps_bt_2.jpg" height="372" width="560" />
<strong>Next Article</strong>
In the next post, I'll be working through the software aspects of this project.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>57</wp:post_id>
<wp:post_date>2008-03-16 09:37:19</wp:post_date>
<wp:post_date_gmt>2008-03-16 17:37:19</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>43-revision</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>43</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Thanks for all the Fish</title>
<link>http://blog.phy5ics.com/2008/07/24/thanks-for-all-the-fish/</link>
<pubDate>Fri, 25 Jul 2008 02:16:37 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2008/07/24/thanks-for-all-the-fish/</guid>
<description></description>
<content:encoded><![CDATA[<p>I greatly appreciate everyone's comments and input on my article on <a href="http://phy5ics.com/blog/2008/03/16/bluetooth-gps-actionscript-part-1-hardware/">Bluetooth and GPS </a><br />
.Â  It is quite nice to have the exposure from Make and also to have one's efforts peer reviewed as it leads to productive introspection around one's work.</p>
<p>Allow me to respond to those who took the time to comment on my little project:</p>
<p><strong>To Tam, David and Snoopy:</strong><br />
No, I didn't actually short out the entire board by connecting VCC+ and GND.Â  That is a mistake in my first attempt to draw out a schematic in Illustrator.Â  So to those that are copying this project word-for-word - please don't follow the diagram exactly.Â  I'll update it in the next couple of days when I have a chance.Â  As an aside, I'd be curious to hear from others about what they use for drawing circuit diagrams.Â  I just use Illustrator because that's what I know from my days long past as a designer.</p>
<p><strong>To Siftah and Arto:</strong><br />
What I've done is most definitely available as a commercial product and most likely for less than I invested in the various components.Â  However, I just happen to be a nerd and am quite interested in learning from products and devices that may exist for an equal or greater price.</p>
<p>Because I cobbled my project together from off-the-shelf components, I can continually break down and re-combine any of the components I utilized into more-and-more interesting and complicated projects.Â  With a consumer product, I would be beholden to whatever the particular manufacturer of that consumer product dictated the functionality of a given device to be.</p>
<p>Additionally, while I'm not entirely familiar with what is on the market with regards to Bluetooth GPS devices, it's much cooler, in my opinion, to be able to do whatever I want with the IMEA codes that I ingest and store from a piece of hardware via my own drivers and software as compared with what a GPS hardware/software vendor happens to expose via a crippled API in response to what their marketing team thinks that I might be interested in doing with said data that I collected via blood, sweat and tears on the trail.Â  Isn't that why we all read and love Make?</p>
<p>Birds have dominated the sky since the day that they evolved to become flying creatures.Â  However, since man has gazed upon them, we have looked to them forÂ  inspiration and in envy, often (unsuccessfully) invoking their form in an attempt to share the currents and soar above.Â  So, while I could theoretically transmute into a bird (or purchase one) to create an exact replica of something that already exists, by creating a reasonable facsimile I can learn how exactly it works, improve upon it and have fun doing it.</p><!-- ~ --><!-- ~ -->]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>44</wp:post_id>
<wp:post_date>2008-07-24 18:16:37</wp:post_date>
<wp:post_date_gmt>2008-07-25 02:16:37</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>thanks-for-all-the-fish</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:comment>
<wp:comment_id>2722</wp:comment_id>
<wp:comment_author><![CDATA[Siftah]]></wp:comment_author>
<wp:comment_author_email>John@siftah.com</wp:comment_author_email>
<wp:comment_author_url>http://www.siftah.com</wp:comment_author_url>
<wp:comment_author_IP>91.102.63.190</wp:comment_author_IP>
<wp:comment_date>2008-08-05 03:38:07</wp:comment_date>
<wp:comment_date_gmt>2008-08-05 11:38:07</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Well that's cool, as long as you had fun doing it :)

FWIW - the Bluetooth GPS modules on the market just open up a serial link over Bluetooth and spit out NMEA strings over the serial connection. There are no API's or vendor specific things needed on the modules I've used.

Happy hacking ;)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2760</wp:comment_id>
<wp:comment_author><![CDATA[num1son]]></wp:comment_author>
<wp:comment_author_email>qyoungyoung@yahoo.com</wp:comment_author_email>
<wp:comment_author_url>http://qyoungyoungyahoo.com</wp:comment_author_url>
<wp:comment_author_IP>74.242.163.228</wp:comment_author_IP>
<wp:comment_date>2008-08-08 22:53:34</wp:comment_date>
<wp:comment_date_gmt>2008-08-09 06:53:34</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Nice response. I am an amateur learning on my own...it is fun to DIY - hey, that's how the commercial products became what they are. Otherwise we would still be using sundials and watching the birds for a sign to take cover from a storm.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4000</wp:comment_id>
<wp:comment_author><![CDATA[Delores]]></wp:comment_author>
<wp:comment_author_email>foto@piotrduda.pl</wp:comment_author_email>
<wp:comment_author_url>http://www.bing.com/</wp:comment_author_url>
<wp:comment_author_IP>62.37.89.91</wp:comment_author_IP>
<wp:comment_date>2011-04-11 08:23:28</wp:comment_date>
<wp:comment_date_gmt>2011-04-11 16:23:28</wp:comment_date_gmt>
<wp:comment_content><![CDATA[IJWTS wow! Why can't I think of tihgns like that?]]></wp:comment_content>
<wp:comment_approved>0</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Flex 3 + AIR + RFID + AMFPHP + SMS</title>
<link>http://blog.phy5ics.com/2008/11/05/34-revision-2/</link>
<pubDate>Wed, 05 Nov 2008 20:45:22 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2008/11/05/34-revision-2/</guid>
<description></description>
<content:encoded><![CDATA[I had originally wanted to build this project with my Parallax RFID reader, but since I can't interface it with the Make Controller until Liam at MakingThings fixes the serial BLOB implementation fixed in mchelper 2.0, I decided to complete a proof-of-concept with a Phidgets RFID reader.  The application is pretty straightforward - it consists of an RFID tag embedded in a cell phone that is read for its unique ID, prompts a user to enter some data and then remembers their personal data when they return.  While the premise is simple, there are a few moving parts required to stitch it together.

<!--more-->
But first, before an explanation, here's a demo of the application:

[kml_flashembed movie="http://vimeo.com/moogaloop.swf?clip_id=2164104&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=ffffff&amp;amp;fullscreen=1" height="400" width="302" allowfullscreen="true" /]

<strong>The Phidgets RFID Reader</strong>
<a title="PhidgetRFID" href="http://www.phidgets.com/products.php?product_id=1023" target="_blank">PhidgetRFID</a> is a EM4102 125Khz protocol reader.  This means that it does not have the capability to write to RFID tags, only read from them. While this is just fine, I point it out so that you are aware of this fact if you are new to RFID.  It should also be noted that RFID readers like these usually fit into a larger architecture that consists of a database of some sort.  This allows RFID tag IDs to be stored along with additional metadata.

This particular reader is nice in that you can connect it directly to a computer (Mac, Windows and Linux support) via USB and simply run a web service that provide connectivity to the board.  In this example, that process is abstracted away in the AS3 classes that Phidgets provides (they also have a .SWC if you prefer that), so connecting to it and reading tags from it is really quite easy.

After installing the software from Phidgets, I set up an alias in my bash profile set up to make it easy to fire up the web service: alias phidget='/usr/bin/phidgetwebservice21'.  That way, I just type phidget into a terminal window and it starts.  After plugging the RFID reader into an open USB port, it's ready to communicate.  That's really all there is to setting it up since there is no microcontroller involved.

<strong>Flex Builder 3 and AIR</strong>
I opted to build this as an AIR application because an application like this is most applicable in a kiosk scenario, rather than as a web application.  Anyway, connecting to the RFID reader using Flex is quite easy and a majority of the code is devoted to setting up event handlers:
<pre lang="actionscript">

creationcomplete="onCreationComplete()"&gt;

<!--[CDATA[

import com.phidgets.*;

import com.phidgets.events.*;

private var devRFID:PhidgetRFID;

private function onCreationComplete():void {

devRFID = new PhidgetRFID();

devRFID.addEventListener(PhidgetEvent.DETACH, onDetach);

devRFID.addEventListener(PhidgetEvent.ATTACH, onAttach);

devRFID.addEventListener(PhidgetErrorEvent.ERROR, onError);

devRFID.addEventListener(PhidgetDataEvent.TAG, onTag);

devRFID.addEventListener(PhidgetDataEvent.TAG_LOST, onTagLoss);

devRFID.open("localhost", 5001, "1234");

}

private function onAttach(pdeEvent:PhidgetEvent):void{

trace(pdeEvent);

devRFID.Antenna = true;

devRFID.LED = true;

}

private function onDetach(pdeEvent:PhidgetEvent):void{

trace(pdeEvent);

}

private function onTag(pdeEvent:PhidgetDataEvent):void {

&nbsp;	trace(pdeEvent);

//This is where all of the good stuff goes...

}

private function onTagLoss(pdeEvent:PhidgetDataEvent):void {

trace(pdeEvent);

}

private function onError(pdeEvent:PhidgetErrorEvent):void {

trace(pdeEvent);

}

]]--></pre>
If you're interested in the rest of the code, <a title="AIR-RFID Source Files" href="http://phy5ics.com/blog/wp-content/uploads/2007/10/rfid_air.zip">download the source</a>.  Also, a  quick disclaimer that this was just a quick proof-of-concept and is all in a single MXML file for simplicity rather than encapsulating objects and creating components.

<strong>AMFPHP Remoting</strong>
For server/Flash Player communication, I generally opt for remoting due to its ease of implementation and speed, especially if dynamic, database-driven calls are required for the application.  In this case, PHP and MySQL will handle user data and authentication as well as consuming SMS services.  I could write an entire article about AMFPHP and Flex 3, and probably will, but for now, I'll just mention it and note that it in the source code.

<strong>SMS</strong>
In the demo version (I'm not releasing this portion publicly), I've also rigged up some PHP classes to send SMS messages.  I found a service called <a title="Clickatell" href="http://clickatell.com" target="_blank">Clickatell</a> that provides SMS gateway services to a bunch of giant corporations like BBC, Vodafone and Oracle.  However, they do actually offer services to substantially smaller entities such as myself, which is pretty cool.  Not only that, but they offer a free trial of their services.

I'd recommend them if you only need to send outgoing SMS messages.  If you are interested in two-way messaging, be prepared to pony up a large amount of cash for short codes (somewhere in the neighborhood of $1200/month) and message routing.  The other alternative is to set up your own <a title="SMS gateway" href="http://www.x11.net/wiki/index.php/Setting_up_an_SMS_Gateway" target="_blank">SMS gateway</a>.  However, keep in mind that while setting up your own gateway is easy, it is not cost effective for sending large numbers of text messages using a normal consumer account.  It will end up being cheaper using a bulk service like Clickatell.

<strong>Source</strong>
<a title="AIR-RFID Source Files" href="http://phy5ics.com/blog/wp-content/uploads/2007/10/rfid_air.zip">Click here</a> to download the source for the AIR source and installer, PHP code and MySQL schema.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>47</wp:post_id>
<wp:post_date>2008-11-05 12:45:22</wp:post_date>
<wp:post_date_gmt>2008-11-05 20:45:22</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>34-revision-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>34</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Flex 3 + AIR + RFID + AMFPHP + SMS</title>
<link>http://blog.phy5ics.com/2008/11/05/34-revision-3/</link>
<pubDate>Wed, 05 Nov 2008 20:46:54 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2008/11/05/34-revision-3/</guid>
<description></description>
<content:encoded><![CDATA[I had originally wanted to build this project with my Parallax RFID reader, but since I can't interface it with the Make Controller until Liam at MakingThings fixes the serial BLOB implementation fixed in mchelper 2.0, I decided to complete a proof-of-concept with a Phidgets RFID reader.  The application is pretty straightforward - it consists of an RFID tag embedded in a cell phone that is read for its unique ID, prompts a user to enter some data and then remembers their personal data when they return.  While the premise is simple, there are a few moving parts required to stitch it together.

<!--more-->
But first, before an explanation, here's a demo of the application:

[kml_flashembed movie="http://vimeo.com/moogaloop.swf?clip_id=2164104&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=ffffff&amp;fullscreen=1" height="400" width="302" allowfullscreen="true" /]

<strong>The Phidgets RFID Reader</strong>
<a title="PhidgetRFID" href="http://www.phidgets.com/products.php?product_id=1023" target="_blank">PhidgetRFID</a> is a EM4102 125Khz protocol reader.  This means that it does not have the capability to write to RFID tags, only read from them. While this is just fine, I point it out so that you are aware of this fact if you are new to RFID.  It should also be noted that RFID readers like these usually fit into a larger architecture that consists of a database of some sort.  This allows RFID tag IDs to be stored along with additional metadata.

This particular reader is nice in that you can connect it directly to a computer (Mac, Windows and Linux support) via USB and simply run a web service that provide connectivity to the board.  In this example, that process is abstracted away in the AS3 classes that Phidgets provides (they also have a .SWC if you prefer that), so connecting to it and reading tags from it is really quite easy.

After installing the software from Phidgets, I set up an alias in my bash profile set up to make it easy to fire up the web service: alias phidget='/usr/bin/phidgetwebservice21'.  That way, I just type phidget into a terminal window and it starts.  After plugging the RFID reader into an open USB port, it's ready to communicate.  That's really all there is to setting it up since there is no microcontroller involved.

<strong>Flex Builder 3 and AIR</strong>
I opted to build this as an AIR application because an application like this is most applicable in a kiosk scenario, rather than as a web application.  Anyway, connecting to the RFID reader using Flex is quite easy and a majority of the code is devoted to setting up event handlers:
<pre lang="actionscript">
creationcomplete="onCreationComplete()"&gt;

<!--[CDATA[

import com.phidgets.*;

import com.phidgets.events.*;

private var devRFID:PhidgetRFID;

private function onCreationComplete():void {

devRFID = new PhidgetRFID();

devRFID.addEventListener(PhidgetEvent.DETACH, onDetach);

devRFID.addEventListener(PhidgetEvent.ATTACH, onAttach);

devRFID.addEventListener(PhidgetErrorEvent.ERROR, onError);

devRFID.addEventListener(PhidgetDataEvent.TAG, onTag);

devRFID.addEventListener(PhidgetDataEvent.TAG_LOST, onTagLoss);

devRFID.open("localhost", 5001, "1234");

}

private function onAttach(pdeEvent:PhidgetEvent):void{

trace(pdeEvent);

devRFID.Antenna = true;

devRFID.LED = true;

}

private function onDetach(pdeEvent:PhidgetEvent):void{

trace(pdeEvent);

}

private function onTag(pdeEvent:PhidgetDataEvent):void {

&nbsp;	trace(pdeEvent);

//This is where all of the good stuff goes...

}

private function onTagLoss(pdeEvent:PhidgetDataEvent):void {

trace(pdeEvent);

}

private function onError(pdeEvent:PhidgetErrorEvent):void {

trace(pdeEvent);

}

]]--></pre>
If you're interested in the rest of the code, <a title="AIR-RFID Source Files" href="http://phy5ics.com/blog/wp-content/uploads/2007/10/rfid_air.zip">download the source</a>.  Also, a  quick disclaimer that this was just a quick proof-of-concept and is all in a single MXML file for simplicity rather than encapsulating objects and creating components.

<strong>AMFPHP Remoting</strong>
For server/Flash Player communication, I generally opt for remoting due to its ease of implementation and speed, especially if dynamic, database-driven calls are required for the application.  In this case, PHP and MySQL will handle user data and authentication as well as consuming SMS services.  I could write an entire article about AMFPHP and Flex 3, and probably will, but for now, I'll just mention it and note that it in the source code.

<strong>SMS</strong>
In the demo version (I'm not releasing this portion publicly), I've also rigged up some PHP classes to send SMS messages.  I found a service called <a title="Clickatell" href="http://clickatell.com" target="_blank">Clickatell</a> that provides SMS gateway services to a bunch of giant corporations like BBC, Vodafone and Oracle.  However, they do actually offer services to substantially smaller entities such as myself, which is pretty cool.  Not only that, but they offer a free trial of their services.

I'd recommend them if you only need to send outgoing SMS messages.  If you are interested in two-way messaging, be prepared to pony up a large amount of cash for short codes (somewhere in the neighborhood of $1200/month) and message routing.  The other alternative is to set up your own <a title="SMS gateway" href="http://www.x11.net/wiki/index.php/Setting_up_an_SMS_Gateway" target="_blank">SMS gateway</a>.  However, keep in mind that while setting up your own gateway is easy, it is not cost effective for sending large numbers of text messages using a normal consumer account.  It will end up being cheaper using a bulk service like Clickatell.

<strong>Source</strong>
<a title="AIR-RFID Source Files" href="http://phy5ics.com/blog/wp-content/uploads/2007/10/rfid_air.zip">Click here</a> to download the source for the AIR source and installer, PHP code and MySQL schema.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>48</wp:post_id>
<wp:post_date>2008-11-05 12:46:54</wp:post_date>
<wp:post_date_gmt>2008-11-05 20:46:54</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>34-revision-3</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>34</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Flex 3 + AIR + RFID + AMFPHP + SMS</title>
<link>http://blog.phy5ics.com/2008/11/05/34-revision-4/</link>
<pubDate>Wed, 05 Nov 2008 20:48:36 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2008/11/05/34-revision-4/</guid>
<description></description>
<content:encoded><![CDATA[I had originally wanted to build this project with my Parallax RFID reader, but since I can't interface it with the Make Controller until Liam at MakingThings fixes the serial BLOB implementation fixed in mchelper 2.0, I decided to complete a proof-of-concept with a Phidgets RFID reader.  The application is pretty straightforward - it consists of an RFID tag embedded in a cell phone that is read for its unique ID, prompts a user to enter some data and then remembers their personal data when they return.  While the premise is simple, there are a few moving parts required to stitch it together.

<!--more-->
But first, before an explanation, here's a demo of the application:

[kml_flashembed movie="http://vimeo.com/moogaloop.swf?clip_id=2164104&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=ffffff&amp;fullscreen=1" height="400" width="302" /]

<strong>The Phidgets RFID Reader</strong>
<a title="PhidgetRFID" href="http://www.phidgets.com/products.php?product_id=1023" target="_blank">PhidgetRFID</a> is a EM4102 125Khz protocol reader.  This means that it does not have the capability to write to RFID tags, only read from them. While this is just fine, I point it out so that you are aware of this fact if you are new to RFID.  It should also be noted that RFID readers like these usually fit into a larger architecture that consists of a database of some sort.  This allows RFID tag IDs to be stored along with additional metadata.

This particular reader is nice in that you can connect it directly to a computer (Mac, Windows and Linux support) via USB and simply run a web service that provide connectivity to the board.  In this example, that process is abstracted away in the AS3 classes that Phidgets provides (they also have a .SWC if you prefer that), so connecting to it and reading tags from it is really quite easy.

After installing the software from Phidgets, I set up an alias in my bash profile set up to make it easy to fire up the web service: alias phidget='/usr/bin/phidgetwebservice21'.  That way, I just type phidget into a terminal window and it starts.  After plugging the RFID reader into an open USB port, it's ready to communicate.  That's really all there is to setting it up since there is no microcontroller involved.

<strong>Flex Builder 3 and AIR</strong>
I opted to build this as an AIR application because an application like this is most applicable in a kiosk scenario, rather than as a web application.  Anyway, connecting to the RFID reader using Flex is quite easy and a majority of the code is devoted to setting up event handlers:
<pre lang="actionscript">creationcomplete="onCreationComplete()"&gt;

<!--[CDATA[

import com.phidgets.*;

import com.phidgets.events.*;

private var devRFID:PhidgetRFID;

private function onCreationComplete():void {

devRFID = new PhidgetRFID();

devRFID.addEventListener(PhidgetEvent.DETACH, onDetach);

devRFID.addEventListener(PhidgetEvent.ATTACH, onAttach);

devRFID.addEventListener(PhidgetErrorEvent.ERROR, onError);

devRFID.addEventListener(PhidgetDataEvent.TAG, onTag);

devRFID.addEventListener(PhidgetDataEvent.TAG_LOST, onTagLoss);

devRFID.open("localhost", 5001, "1234");

}

private function onAttach(pdeEvent:PhidgetEvent):void{

trace(pdeEvent);

devRFID.Antenna = true;

devRFID.LED = true;

}

private function onDetach(pdeEvent:PhidgetEvent):void{

trace(pdeEvent);

}

private function onTag(pdeEvent:PhidgetDataEvent):void {

&nbsp;	trace(pdeEvent);

//This is where all of the good stuff goes...

}

private function onTagLoss(pdeEvent:PhidgetDataEvent):void {

trace(pdeEvent);

}

private function onError(pdeEvent:PhidgetErrorEvent):void {

trace(pdeEvent);

}

]]--></pre>
If you're interested in the rest of the code, <a title="AIR-RFID Source Files" href="http://phy5ics.com/blog/wp-content/uploads/2007/10/rfid_air.zip">download the source</a>.  Also, a  quick disclaimer that this was just a quick proof-of-concept and is all in a single MXML file for simplicity rather than encapsulating objects and creating components.

<strong>AMFPHP Remoting</strong>
For server/Flash Player communication, I generally opt for remoting due to its ease of implementation and speed, especially if dynamic, database-driven calls are required for the application.  In this case, PHP and MySQL will handle user data and authentication as well as consuming SMS services.  I could write an entire article about AMFPHP and Flex 3, and probably will, but for now, I'll just mention it and note that it in the source code.

<strong>SMS</strong>
In the demo version (I'm not releasing this portion publicly), I've also rigged up some PHP classes to send SMS messages.  I found a service called <a title="Clickatell" href="http://clickatell.com" target="_blank">Clickatell</a> that provides SMS gateway services to a bunch of giant corporations like BBC, Vodafone and Oracle.  However, they do actually offer services to substantially smaller entities such as myself, which is pretty cool.  Not only that, but they offer a free trial of their services.

I'd recommend them if you only need to send outgoing SMS messages.  If you are interested in two-way messaging, be prepared to pony up a large amount of cash for short codes (somewhere in the neighborhood of $1200/month) and message routing.  The other alternative is to set up your own <a title="SMS gateway" href="http://www.x11.net/wiki/index.php/Setting_up_an_SMS_Gateway" target="_blank">SMS gateway</a>.  However, keep in mind that while setting up your own gateway is easy, it is not cost effective for sending large numbers of text messages using a normal consumer account.  It will end up being cheaper using a bulk service like Clickatell.

<strong>Source</strong>
<a title="AIR-RFID Source Files" href="http://phy5ics.com/blog/wp-content/uploads/2007/10/rfid_air.zip">Click here</a> to download the source for the AIR source and installer, PHP code and MySQL schema.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>49</wp:post_id>
<wp:post_date>2008-11-05 12:48:36</wp:post_date>
<wp:post_date_gmt>2008-11-05 20:48:36</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>34-revision-4</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>34</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Flex 3 + AIR + RFID + AMFPHP + SMS</title>
<link>http://blog.phy5ics.com/2008/11/05/34-revision-5/</link>
<pubDate>Wed, 05 Nov 2008 20:57:47 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2008/11/05/34-revision-5/</guid>
<description></description>
<content:encoded><![CDATA[I had originally wanted to build this project with my Parallax RFID reader, but since I can't interface it with the Make Controller until Liam at MakingThings fixes the serial BLOB implementation fixed in mchelper 2.0, I decided to complete a proof-of-concept with a Phidgets RFID reader.  The application is pretty straightforward - it consists of an RFID tag embedded in a cell phone that is read for its unique ID, prompts a user to enter some data and then remembers their personal data when they return.  While the premise is simple, there are a few moving parts required to stitch it together.

<!--more-->
But first, before an explanation, here's a demo of the application:

[flash http://vimeo.com/moogaloop.swf?clip_id=2164104&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=ffffff&amp;fullscreen=1 w=400 h=302 mode=1]

<strong>The Phidgets RFID Reader</strong>
<a title="PhidgetRFID" href="http://www.phidgets.com/products.php?product_id=1023" target="_blank">PhidgetRFID</a> is a EM4102 125Khz protocol reader.  This means that it does not have the capability to write to RFID tags, only read from them. While this is just fine, I point it out so that you are aware of this fact if you are new to RFID.  It should also be noted that RFID readers like these usually fit into a larger architecture that consists of a database of some sort.  This allows RFID tag IDs to be stored along with additional metadata.

This particular reader is nice in that you can connect it directly to a computer (Mac, Windows and Linux support) via USB and simply run a web service that provide connectivity to the board.  In this example, that process is abstracted away in the AS3 classes that Phidgets provides (they also have a .SWC if you prefer that), so connecting to it and reading tags from it is really quite easy.

After installing the software from Phidgets, I set up an alias in my bash profile set up to make it easy to fire up the web service: alias phidget='/usr/bin/phidgetwebservice21'.  That way, I just type phidget into a terminal window and it starts.  After plugging the RFID reader into an open USB port, it's ready to communicate.  That's really all there is to setting it up since there is no microcontroller involved.

<strong>Flex Builder 3 and AIR</strong>
I opted to build this as an AIR application because an application like this is most applicable in a kiosk scenario, rather than as a web application.  Anyway, connecting to the RFID reader using Flex is quite easy and a majority of the code is devoted to setting up event handlers:
<pre lang="actionscript">creationcomplete="onCreationComplete()"&gt;

<!--[CDATA[

import com.phidgets.*;

import com.phidgets.events.*;

private var devRFID:PhidgetRFID;

private function onCreationComplete():void {

devRFID = new PhidgetRFID();

devRFID.addEventListener(PhidgetEvent.DETACH, onDetach);

devRFID.addEventListener(PhidgetEvent.ATTACH, onAttach);

devRFID.addEventListener(PhidgetErrorEvent.ERROR, onError);

devRFID.addEventListener(PhidgetDataEvent.TAG, onTag);

devRFID.addEventListener(PhidgetDataEvent.TAG_LOST, onTagLoss);

devRFID.open("localhost", 5001, "1234");

}

private function onAttach(pdeEvent:PhidgetEvent):void{

trace(pdeEvent);

devRFID.Antenna = true;

devRFID.LED = true;

}

private function onDetach(pdeEvent:PhidgetEvent):void{

trace(pdeEvent);

}

private function onTag(pdeEvent:PhidgetDataEvent):void {

&nbsp;	trace(pdeEvent);

//This is where all of the good stuff goes...

}

private function onTagLoss(pdeEvent:PhidgetDataEvent):void {

trace(pdeEvent);

}

private function onError(pdeEvent:PhidgetErrorEvent):void {

trace(pdeEvent);

}

]]--></pre>
If you're interested in the rest of the code, <a title="AIR-RFID Source Files" href="http://phy5ics.com/blog/wp-content/uploads/2007/10/rfid_air.zip">download the source</a>.  Also, a  quick disclaimer that this was just a quick proof-of-concept and is all in a single MXML file for simplicity rather than encapsulating objects and creating components.

<strong>AMFPHP Remoting</strong>
For server/Flash Player communication, I generally opt for remoting due to its ease of implementation and speed, especially if dynamic, database-driven calls are required for the application.  In this case, PHP and MySQL will handle user data and authentication as well as consuming SMS services.  I could write an entire article about AMFPHP and Flex 3, and probably will, but for now, I'll just mention it and note that it in the source code.

<strong>SMS</strong>
In the demo version (I'm not releasing this portion publicly), I've also rigged up some PHP classes to send SMS messages.  I found a service called <a title="Clickatell" href="http://clickatell.com" target="_blank">Clickatell</a> that provides SMS gateway services to a bunch of giant corporations like BBC, Vodafone and Oracle.  However, they do actually offer services to substantially smaller entities such as myself, which is pretty cool.  Not only that, but they offer a free trial of their services.

I'd recommend them if you only need to send outgoing SMS messages.  If you are interested in two-way messaging, be prepared to pony up a large amount of cash for short codes (somewhere in the neighborhood of $1200/month) and message routing.  The other alternative is to set up your own <a title="SMS gateway" href="http://www.x11.net/wiki/index.php/Setting_up_an_SMS_Gateway" target="_blank">SMS gateway</a>.  However, keep in mind that while setting up your own gateway is easy, it is not cost effective for sending large numbers of text messages using a normal consumer account.  It will end up being cheaper using a bulk service like Clickatell.

<strong>Source</strong>
<a title="AIR-RFID Source Files" href="http://phy5ics.com/blog/wp-content/uploads/2007/10/rfid_air.zip">Click here</a> to download the source for the AIR source and installer, PHP code and MySQL schema.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>50</wp:post_id>
<wp:post_date>2008-11-05 12:57:47</wp:post_date>
<wp:post_date_gmt>2008-11-05 20:57:47</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>34-revision-5</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>34</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Flex 3 + AIR + RFID + AMFPHP + SMS</title>
<link>http://blog.phy5ics.com/2008/11/05/34-autosave/</link>
<pubDate>Wed, 05 Nov 2008 21:09:14 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2008/11/05/34-autosave/</guid>
<description></description>
<content:encoded><![CDATA[I had originally wanted to build this project with my Parallax RFID reader, but since I can't interface it with the Make Controller until Liam at MakingThings fixes the serial BLOB implementation fixed in mchelper 2.0, I decided to complete a proof-of-concept with a Phidgets RFID reader.  The application is pretty straightforward - it consists of an RFID tag embedded in a cell phone that is read for its unique ID, prompts a user to enter some data and then remembers their personal data when they return.  While the premise is simple, there are a few moving parts required to stitch it together.

<!--more-->
But first, before an explanation, here's a demo of the application:

[flash http://vimeo.com/moogaloop.swf?clip_id=2164104&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=ffffff&amp;fullscreen=1 w=601 h=453 mode=1]

<strong>The Phidgets RFID Reader</strong>
<a title="PhidgetRFID" href="http://www.phidgets.com/products.php?product_id=1023" target="_blank">PhidgetRFID</a> is a EM4102 125Khz protocol reader.  This means that it does not have the capability to write to RFID tags, only read from them. While this is just fine, I point it out so that you are aware of this fact if you are new to RFID.  It should also be noted that RFID readers like these usually fit into a larger architecture that consists of a database of some sort.  This allows RFID tag IDs to be stored along with additional metadata.

This particular reader is nice in that you can connect it directly to a computer (Mac, Windows and Linux support) via USB and simply run a web service that provide connectivity to the board.  In this example, that process is abstracted away in the AS3 classes that Phidgets provides (they also have a .SWC if you prefer that), so connecting to it and reading tags from it is really quite easy.

After installing the software from Phidgets, I set up an alias in my bash profile set up to make it easy to fire up the web service: alias phidget='/usr/bin/phidgetwebservice21'.  That way, I just type phidget into a terminal window and it starts.  After plugging the RFID reader into an open USB port, it's ready to communicate.  That's really all there is to setting it up since there is no microcontroller involved.

<strong>Flex Builder 3 and AIR</strong>
I opted to build this as an AIR application because an application like this is most applicable in a kiosk scenario, rather than as a web application.  Anyway, connecting to the RFID reader using Flex is quite easy and a majority of the code is devoted to setting up event handlers:
<pre lang="actionscript">creationcomplete="onCreationComplete()"&gt;

<!--[CDATA[

import com.phidgets.*;

import com.phidgets.events.*;

private var devRFID:PhidgetRFID;

private function onCreationComplete():void {

devRFID = new PhidgetRFID();

devRFID.addEventListener(PhidgetEvent.DETACH, onDetach);

devRFID.addEventListener(PhidgetEvent.ATTACH, onAttach);

devRFID.addEventListener(PhidgetErrorEvent.ERROR, onError);

devRFID.addEventListener(PhidgetDataEvent.TAG, onTag);

devRFID.addEventListener(PhidgetDataEvent.TAG_LOST, onTagLoss);

devRFID.open("localhost", 5001, "1234");

}

private function onAttach(pdeEvent:PhidgetEvent):void{

trace(pdeEvent);

devRFID.Antenna = true;

devRFID.LED = true;

}

private function onDetach(pdeEvent:PhidgetEvent):void{

trace(pdeEvent);

}

private function onTag(pdeEvent:PhidgetDataEvent):void {

&nbsp;	trace(pdeEvent);

//This is where all of the good stuff goes...

}

private function onTagLoss(pdeEvent:PhidgetDataEvent):void {

trace(pdeEvent);

}

private function onError(pdeEvent:PhidgetErrorEvent):void {

trace(pdeEvent);

}

]]--></pre>
If you're interested in the rest of the code, <a title="AIR-RFID Source Files" href="http://phy5ics.com/blog/wp-content/uploads/2007/10/rfid_air.zip">download the source</a>.  Also, a  quick disclaimer that this was just a quick proof-of-concept and is all in a single MXML file for simplicity rather than encapsulating objects and creating components.

<strong>AMFPHP Remoting</strong>
For server/Flash Player communication, I generally opt for remoting due to its ease of implementation and speed, especially if dynamic, database-driven calls are required for the application.  In this case, PHP and MySQL will handle user data and authentication as well as consuming SMS services.  I could write an entire article about AMFPHP and Flex 3, and probably will, but for now, I'll just mention it and note that it in the source code.

<strong>SMS</strong>
In the demo version (I'm not releasing this portion publicly), I've also rigged up some PHP classes to send SMS messages.  I found a service called <a title="Clickatell" href="http://clickatell.com" target="_blank">Clickatell</a> that provides SMS gateway services to a bunch of giant corporations like BBC, Vodafone and Oracle.  However, they do actually offer services to substantially smaller entities such as myself, which is pretty cool.  Not only that, but they offer a free trial of their services.

I'd recommend them if you only need to send outgoing SMS messages.  If you are interested in two-way messaging, be prepared to pony up a large amount of cash for short codes (somewhere in the neighborhood of $1200/month) and message routing.  The other alternative is to set up your own <a title="SMS gateway" href="http://www.x11.net/wiki/index.php/Setting_up_an_SMS_Gateway" target="_blank">SMS gateway</a>.  However, keep in mind that while setting up your own gateway is easy, it is not cost effective for sending large numbers of text messages using a normal consumer account.  It will end up being cheaper using a bulk service like Clickatell.

<strong>Source</strong>
<a title="AIR-RFID Source Files" href="http://phy5ics.com/blog/wp-content/uploads/2007/10/rfid_air.zip">Click here</a> to download the source for the AIR source and installer, PHP code and MySQL schema.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>46</wp:post_id>
<wp:post_date>2008-11-05 13:09:14</wp:post_date>
<wp:post_date_gmt>2008-11-05 21:09:14</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>34-autosave</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>34</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>About</title>
<link>http://blog.phy5ics.com/2008/11/05/2-revision-2/</link>
<pubDate>Wed, 05 Nov 2008 21:16:48 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2008/11/05/2-revision-2/</guid>
<description></description>
<content:encoded><![CDATA[I feel like I'm making an introduction at AA or something...

Hi, my name is John Barton and I am addicted to technology.Â  I've squandered the good will of my family and friends and lost countless hours of sleep because I've worked for interactive and advertising agencies in various capacities, as both a designer and developer over the past 10 years.Â  I've sunk to such depths as bartering Flash banner ads for bar tabs to prostrating myself before clients demanding to "make the logo bigger and less to add more zing".Â  At one point I even quit the business and went to work in a small rustic Italian restaurant where I washed dishes and learned how to be a chef and operate in the pressure cooker that is a restaurant kitchen.

However, I've also managed to do great work at great agencies for great clients, and that's what keeps me going these days.Â  I am currently a Senior Solutions Architecture at <a href="http://schematic.com" target="_blank">Schematic</a>.Â  I work out the New York office where I lead large cross-disciplinary technology teams on new technology projects for clients such as ABC, Microsoft, Sandisk, Scholastic and Sun Microsystems, among others.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>53</wp:post_id>
<wp:post_date>2008-11-05 13:16:48</wp:post_date>
<wp:post_date_gmt>2008-11-05 21:16:48</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>2-revision-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>2</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>About</title>
<link>http://blog.phy5ics.com/2008/11/05/2-autosave/</link>
<pubDate>Wed, 05 Nov 2008 21:18:19 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2008/11/05/2-autosave/</guid>
<description></description>
<content:encoded><![CDATA[I feel like I'm making an introduction at AA or something...

Hi, my name is John Barton and I am addicted to technology.Â  I've squandered the good will of my family and friends and lost countless hours of sleep because I've worked for interactive and advertising agencies in various capacities, as both a designer and developer over the past 10 years.Â  I've sunk to such depths as bartering Flash banner ads for bar tabs to prostrating myself before clients demanding to "make the logo bigger and less to add more zing".Â  At one point I even quit the business and went to work in a small rustic Italian restaurant where I washed dishes and learned how to be a chef and operate in the pressure cooker that is a restaurant kitchen.

However, I've also managed to do great work at great agencies for great clients, and that's what keeps me going these days.Â  I am currently a Senior Solutions Architect at <a href="http://schematic.com" target="_blank">Schematic</a>.Â  I work out the New York office where I lead large cross-disciplinary technology teams on new technology projects for clients such as ABC, Microsoft, Sandisk, Scholastic and Sun Microsystems, among others.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>51</wp:post_id>
<wp:post_date>2008-11-05 13:18:19</wp:post_date>
<wp:post_date_gmt>2008-11-05 21:18:19</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>2-autosave</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>2</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>gps_bt_schematic_rev1</title>
<link>http://blog.phy5ics.com/2008/03/16/bluetooth-gps-actionscript-part-1-hardware/gps_bt_schematic_rev1/</link>
<pubDate>Fri, 07 Nov 2008 01:13:16 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_schematic_rev1.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>54</wp:post_id>
<wp:post_date>2008-11-06 17:13:16</wp:post_date>
<wp:post_date_gmt>2008-11-07 01:13:16</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>gps_bt_schematic_rev1</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>43</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_schematic_rev1.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2008/11/gps_bt_schematic_rev1.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";i:562;s:6:"height";i:402;s:14:"hwstring_small";s:23:"height='91' width='128'";s:4:"file";s:88:"/users/home/phy5ics/web/public/blog/wp-content/uploads/2008/11/gps_bt_schematic_rev1.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"gps_bt_schematic_rev1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;}s:6:"medium";a:3:{s:4:"file";s:33:"gps_bt_schematic_rev1-299x214.jpg";s:5:"width";i:299;s:6:"height";i:214;}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>gps_bt_2</title>
<link>http://blog.phy5ics.com/2008/03/16/bluetooth-gps-actionscript-part-1-hardware/gps_bt_2/</link>
<pubDate>Fri, 07 Nov 2008 01:16:02 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_2.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>56</wp:post_id>
<wp:post_date>2008-11-06 17:16:02</wp:post_date>
<wp:post_date_gmt>2008-11-07 01:16:02</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>gps_bt_2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>43</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_2.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2008/11/gps_bt_2.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";i:560;s:6:"height";i:372;s:14:"hwstring_small";s:23:"height='85' width='128'";s:4:"file";s:75:"/users/home/phy5ics/web/public/blog/wp-content/uploads/2008/11/gps_bt_2.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:20:"gps_bt_2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;}s:6:"medium";a:3:{s:4:"file";s:20:"gps_bt_2-300x199.jpg";s:5:"width";i:300;s:6:"height";i:199;}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Bluetooth + GPS + ActionScript - Part 1 - Hardware</title>
<link>http://blog.phy5ics.com/2008/11/06/43-revision-2/</link>
<pubDate>Fri, 07 Nov 2008 01:20:03 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2008/11/06/43-revision-2/</guid>
<description></description>
<content:encoded><![CDATA[<strong>Overview</strong>
For this project, my goal was to get GPS data into my Mac for some visualization experiments with ActionScript.  After some initial prototypes that worked well using an RS232-to-USB converter, I decided that wasn't slick enough and had it too many wires.  I like things nice and clean around my desk, so I opted for adding Bluetooth in place of a USB converter.

After experimenting with some different methods, some using microprocessors and some not, I opted for the simpler route, eliminating the microprocessor.  A microprocessor doesn't add anything other than cost for the basic purpose of this project.  Although stay tuned for another posting about integrating a similar configuration with the Make Controller and Arduino microprocessors.

<img src="http://phy5ics.com/gfx/blog/gps_bt_1.jpg" alt="" width="560" height="372" />
<!--more-->
<strong>Parts List</strong>
<ul>
	<li> <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=114" target="_blank">5V regulated power supply</a></li>
	<li> <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=158" target="_blank">BlueSMiRF Bluetooth Module</a></li>
	<li> <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=465" target="_blank">EM406A GPS Module</a></li>
	<li> Extra 6-pin interface cable</li>
	<li> 9V battery holder</li>
	<li> Headers</li>
	<li> Breadboard</li>
	<li> Solid 22-gauge wire</li>
	<li> Soldering iron</li>
</ul>
<strong>5v Power Supply</strong>
Select a 5V power supply to use.  In this case, I'm using a switchable 3.3V/5V power supply kit that I picked up from SparkFun.  I made a slight modification to it and soldered a 9V battery adaptor to it to make it a bit more flexible and truly wireless rather than using the standard 9V DC wall adaptor.  This is just my preference for prototyping.  When I get down to a final design, I generally switch it up in favor of a simple voltage regulator to save space and weight.

<strong>BlueSMiRF Embedded Bluetooth Serial RF Link</strong>
The BlueSMiRF module is sweet little device, providing an easy way to link any project using a serial interface to a computer (or another BlueSMiRF module).  Simply connect the TX, RX to another serial device along with vcc (4.5V-5.5V) and ground and it is ready to pair.

<strong>EM406A GPS Board</strong>
This small board uses the SiRF Star III chipset, which is a nice chipset that is relatively stingy on power supply and can fix its position - known as TTFF (Time To First Fix), even in indoor environments, in a matter of 30 seconds or so.  Just keep in mind that the odd peach-colored ceramic part is the antenna and should point towards the sky.   Many other chipsets offer significantly less in terms of performance and most are unable to fix a position unless outside.  I was sold on it since happens to be the same chipset that I have in my Garmin CS60x, a considerably more expensive device.

Besides all that, the EM406A is a perfect candidate for integration with physical computing projects because it's output is serial.  It starts outputting NMEA strings at 4800 baud once its position is fixed.  NMEA 0183 is a standard with which GPS data is transmitted from a device using comma-delimited strings.  For more information on NMEA, consult <a href="http://www.gpsinformation.org/dale/nmea.htm" target="_blank">this resource</a>.

The documentation for the board itself is well done.  In addition to the NMEA strings that are broadcast from the board itself, the EM406A can have commands sent to it via its serial interface to get specific NMEA data back.Â  The only catch is be sure to get an 6-pin extra interface cable along with the board itself.Â  I cut the interface cable in half and then soldered the wires some headers to make prototyping easier.  Otherwise it's going to be impossible to do anything useful with it.

<strong>Schematic</strong>
Now that we have all that down, here's a little schematic of how everything is hooked up together:

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_schematic_rev1.jpg"><img class="alignnone size-full wp-image-54" title="gps_bt_schematic_rev1" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_schematic_rev1.jpg" alt="" width="500" height="357" /></a>

<strong>Photograph</strong>

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_2.jpg"><img class="alignnone size-full wp-image-56" title="gps_bt_2" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_2.jpg" alt="" width="500" height="332" /></a>
<strong>Next Article</strong>
In the next post, I'll be working through the software aspects of this project.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>80</wp:post_id>
<wp:post_date>2008-11-06 17:20:03</wp:post_date>
<wp:post_date_gmt>2008-11-07 01:20:03</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>43-revision-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>43</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Bluetooth + GPS + ActionScript - Part 1 - Hardware</title>
<link>http://blog.phy5ics.com/2008/11/06/43-autosave/</link>
<pubDate>Fri, 07 Nov 2008 01:23:56 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2008/11/06/43-autosave/</guid>
<description></description>
<content:encoded><![CDATA[<strong>Overview</strong>
For this project, my goal was to get GPS data into my Mac for some visualization experiments with ActionScript.  After some initial prototypes that worked well using an RS232-to-USB converter, I decided that wasn't slick enough and had it too many wires.  I like things nice and clean around my desk, so I opted for adding Bluetooth in place of a USB converter.

After experimenting with some different methods, some using microprocessors and some not, I opted for the simpler route, eliminating the microprocessor.  A microprocessor doesn't add anything other than cost for the basic purpose of this project.  Although stay tuned for another posting about integrating a similar configuration with the Make Controller and Arduino microprocessors.

<img src="http://phy5ics.com/gfx/blog/gps_bt_1.jpg" alt="" width="560" height="372" />
<!--more-->
<strong>Parts List</strong>
<ul>
	<li> <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=114" target="_blank">5V regulated power supply</a></li>
	<li> <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=158" target="_blank">BlueSMiRF Bluetooth Module</a></li>
	<li> <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=465" target="_blank">EM406A GPS Module</a></li>
	<li> Extra 6-pin interface cable</li>
	<li> 9V battery holder</li>
	<li> Headers</li>
	<li> Breadboard</li>
	<li> Solid 22-gauge wire</li>
	<li> Soldering iron</li>
</ul>
<strong>5v Power Supply</strong>
Select a 5V power supply to use.  In this case, I'm using a switchable 3.3V/5V power supply kit that I picked up from SparkFun.  I made a slight modification to it and soldered a 9V battery adaptor to it to make it a bit more flexible and truly wireless rather than using the standard 9V DC wall adaptor.  This is just my preference for prototyping.  When I get down to a final design, I generally switch it up in favor of a simple voltage regulator to save space and weight.

<strong>BlueSMiRF Embedded Bluetooth Serial RF Link</strong>
The BlueSMiRF module is sweet little device, providing an easy way to link any project using a serial interface to a computer (or another BlueSMiRF module).  Simply connect the TX, RX to another serial device along with vcc (4.5V-5.5V) and ground and it is ready to pair.

<strong>EM406A GPS Board</strong>
This small board uses the SiRF Star III chipset, which is a nice chipset that is relatively stingy on power supply and can fix its position - known as TTFF (Time To First Fix), even in indoor environments, in a matter of 30 seconds or so.  Just keep in mind that the odd peach-colored ceramic part is the antenna and should point towards the sky.   Many other chipsets offer significantly less in terms of performance and most are unable to fix a position unless outside.  I was sold on it since happens to be the same chipset that I have in my Garmin CS60x, a considerably more expensive device.

Besides all that, the EM406A is a perfect candidate for integration with physical computing projects because it's output is serial.  It starts outputting NMEA strings at 4800 baud once its position is fixed.  NMEA 0183 is a standard with which GPS data is transmitted from a device using comma-delimited strings.  For more information on NMEA, consult <a href="http://www.gpsinformation.org/dale/nmea.htm" target="_blank">this resource</a>.

The documentation for the board itself is well done.  In addition to the NMEA strings that are broadcast from the board itself, the EM406A can have commands sent to it via its serial interface to get specific NMEA data back.Â  The only catch is be sure to get an 6-pin extra interface cable along with the board itself.Â  I cut the interface cable in half and then soldered the wires some headers to make prototyping easier.  Otherwise it's going to be impossible to do anything useful with it.

<strong>Schematic</strong>
Now that we have all that down, here's a little schematic of how everything is hooked up together:

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_schematic_rev1.jpg"><img class="alignnone size-full wp-image-54" title="gps_bt_schematic_rev1" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_schematic_rev1.jpg" alt="" width="500" height="357" /></a>

<strong>Photograph</strong>

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_2.jpg"><img class="alignnone size-full wp-image-56" title="gps_bt_2" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_2.jpg" alt="" width="500" height="332" /></a>
<strong>Next Article</strong>
In the next post, I'll be working through the software aspects of this project.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>55</wp:post_id>
<wp:post_date>2008-11-06 17:23:56</wp:post_date>
<wp:post_date_gmt>2008-11-07 01:23:56</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>43-autosave</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>43</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>bt_pairing</title>
<link>http://blog.phy5ics.com/2008/11/06/bluetooth-gps-python-actionscript-part-2-hooking-up/bt_pairing/</link>
<pubDate>Fri, 07 Nov 2008 04:27:53 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2008/11/bt_pairing.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>59</wp:post_id>
<wp:post_date>2008-11-06 20:27:53</wp:post_date>
<wp:post_date_gmt>2008-11-07 04:27:53</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>bt_pairing</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>58</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2008/11/bt_pairing.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2008/11/bt_pairing.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";i:600;s:6:"height";i:437;s:14:"hwstring_small";s:23:"height='93' width='128'";s:4:"file";s:77:"/users/home/phy5ics/web/public/blog/wp-content/uploads/2008/11/bt_pairing.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:22:"bt_pairing-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;}s:6:"medium";a:3:{s:4:"file";s:22:"bt_pairing-300x218.jpg";s:5:"width";i:300;s:6:"height";i:218;}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>ls_tty</title>
<link>http://blog.phy5ics.com/2008/11/06/bluetooth-gps-python-actionscript-part-2-hooking-up/ls_tty/</link>
<pubDate>Fri, 07 Nov 2008 04:31:53 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2008/11/ls_tty.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>60</wp:post_id>
<wp:post_date>2008-11-06 20:31:53</wp:post_date>
<wp:post_date_gmt>2008-11-07 04:31:53</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>ls_tty</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>58</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2008/11/ls_tty.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2008/11/ls_tty.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";i:600;s:6:"height";i:81;s:14:"hwstring_small";s:23:"height='17' width='128'";s:4:"file";s:73:"/users/home/phy5ics/web/public/blog/wp-content/uploads/2008/11/ls_tty.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:17:"ls_tty-150x81.jpg";s:5:"width";i:150;s:6:"height";i:81;}s:6:"medium";a:3:{s:4:"file";s:17:"ls_tty-300x40.jpg";s:5:"width";i:300;s:6:"height";i:40;}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>nmea</title>
<link>http://blog.phy5ics.com/2008/11/06/bluetooth-gps-python-actionscript-part-2-hooking-up/nmea/</link>
<pubDate>Fri, 07 Nov 2008 04:33:52 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2008/11/nmea.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>61</wp:post_id>
<wp:post_date>2008-11-06 20:33:52</wp:post_date>
<wp:post_date_gmt>2008-11-07 04:33:52</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>nmea</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>58</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2008/11/nmea.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2008/11/nmea.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";i:600;s:6:"height";i:400;s:14:"hwstring_small";s:23:"height='85' width='128'";s:4:"file";s:71:"/users/home/phy5ics/web/public/blog/wp-content/uploads/2008/11/nmea.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:16:"nmea-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;}s:6:"medium";a:3:{s:4:"file";s:16:"nmea-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>gps_bt_sys_arch</title>
<link>http://blog.phy5ics.com/2008/11/06/bluetooth-gps-python-actionscript-part-2-hooking-up/gps_bt_sys_arch/</link>
<pubDate>Fri, 07 Nov 2008 04:35:02 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_sys_arch.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>62</wp:post_id>
<wp:post_date>2008-11-06 20:35:02</wp:post_date>
<wp:post_date_gmt>2008-11-07 04:35:02</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>gps_bt_sys_arch</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>58</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_sys_arch.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/users/home/phy5ics/web/public/blog/wp-content/uploads/2008/11/gps_bt_sys_arch.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";i:561;s:6:"height";i:401;s:14:"hwstring_small";s:23:"height='91' width='127'";s:4:"file";s:82:"/users/home/phy5ics/web/public/blog/wp-content/uploads/2008/11/gps_bt_sys_arch.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"gps_bt_sys_arch-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;}s:6:"medium";a:3:{s:4:"file";s:27:"gps_bt_sys_arch-300x214.jpg";s:5:"width";i:300;s:6:"height";i:214;}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Bluetooth + GPS + Python + ActionScript - Part 2 - Hooking Up</title>
<link>http://blog.phy5ics.com/2008/11/06/58-revision/</link>
<pubDate>Fri, 07 Nov 2008 05:09:44 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2008/11/06/58-revision/</guid>
<description></description>
<content:encoded><![CDATA[<strong>Overview</strong>

After having built the hardware in Part 1, it is fairly useless without a way to get the GPS data from the device somewhere else in order to do something useful with it.Â  For this project, the end result will be a visualization of the GPS data in Flash Player on a Mac.Â  There are myriad ways to accomplish this, however very few approaches can easily encapsulate all of these steps in a single language.Â  This is because both low-level system access (to read the serial data) and some sort of server (to serve the data to Flash Player) are required.Â  While it is definitely possible to use any number of other languages such as Java, Processing, C++, etc., performing all of these tasks with those languages would require significant amounts of code.

With that said, I opted for Python not only because I love it, but also because it is quite straightforward to use it to read from a serial port using the <a href="http://pyserial.wiki.sourceforge.net/pySerial" target="_blank">pyserial module</a> and also to establish any number of different types of servers including standard HTTP and socket servers.Â  While there are built-in libraries for creating and managing servers, I ultimately decided on creating a socket server using <a href="http://twistedmatrix.com/trac/" target="_blank">Twisted</a>.Â  Twisted is an enormously powerful networking framework that simplifies the creation of all sorts of servers.

Why add another framework when a standard HTTP server would suffice for serving up data to the Flash Player?Â  The implementation of a standard HTTP server would require Flash Player polling the service to determine if data had been updated.Â  So, rather than rely on that sub- solution, Twisted makes the creation of socket servers very easy, which then allows the Flash Player to receive data in real-time via an XMLSocket connection.Â  Not only that, but one of the coolest aspects of Twisted is that it makes it fairly easy to write multi-user socket servers, which would be a nice addition for future enhancements.Â  Stay tuned for more on that with some other projects I'm working on.

Here is what the overall system architecture ends up looking when all of this is considered:

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_sys_arch.jpg"><img class="alignnone size-full wp-image-62" title="gps_bt_sys_arch" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_sys_arch.jpg" alt="" width="500" height="357" /></a>

However, before diving into these details, the first step is to hook up the device to the Mac via a serial Bluetooth connection and verifying that everything is working so far.

<!--more-->

<strong>Bluetooth Pairing</strong>
Obviously, the first step is to power up the board.Â  After that, pairing the BlueSMiRF with the Mac.Â  This is a very straightforward process.Â  From the Bluetooth preference pane in System Preferences, click the "+" icon to add a new Bluetooth device.Â  Advance through the dialog boxes, configuring the device that shows up as <strong><em>SparkFun-BT</em></strong>.Â  The passkey for BlueSMiRF module is <strong><em>default</em></strong>, so type that in when prompted.

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/bt_pairing.jpg"><img class="alignnone size-full wp-image-59" title="bt_pairing" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/bt_pairing.jpg" alt="" width="500" height="364" /></a>
Once that's been done, by checking the serial interfaces in <strong><em>/dev</em></strong>, it can be verified that it is now active as a serial device.Â  That is done by opening a terminal window and typing <strong><em>ls /dev/tty.*</em></strong>.Â  That will list out all available serial interfaces.Â  The BlueSMiRF should show up as something like <strong><em>tty.SparkFun-BT-COM0-1</em></strong>.

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/ls_tty.jpg"><img class="alignnone size-full wp-image-60" title="ls_tty" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/ls_tty.jpg" alt="" width="500" height="67" /></a>

<strong></strong>

<strong>Screen</strong>
Screen is a Unix application that allows one to attach a terminal session to a particular process.Â  To view the serial communication that is happening on the serial port that the BlueSMiRF is attached to, this is a good option.Â  This can be done by typing the following command into the terminal to view the serial communication on that port in realtime:

<strong><em>screen /dev/tty.SparkFun-BT-COM0-1 9600</em></strong>

Note that the <strong><em>9600</em></strong> at the end of that command is the baud rate.Â  That command should yield some cryptic messages being printed in Terminal like the following if everything else is wired up properly:

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/nmea.jpg"><img class="alignnone size-full wp-image-61" title="nmea" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/nmea.jpg" alt="" width="500" height="333" /></a>

To exit screen, hit <strong><em>control-a</em></strong>, then <strong><em>control-</em></strong>.

The strings that are seen here are NMEA strings, which are derived from a specification that standardizes the way that marine electronics communicate with each other.Â  For additional information on this, check out <a href="http://www.gpsinformation.org/dale/nmea.htm">http://www.gpsinformation.org/dale/nmea.htm</a>.Â  If the GPS has a location fix, then numerous lines beginning with $GPGGA will be displayed, which precedes messages that contain the location fix data.Â  Otherwise, there will be mostly $GPGSV, which represents data regarding the GPS satellites themselves.

<strong>OK, Now What?</strong>

Now that there is data coming in over a virtual serial port, the next step is writing the software.Â  The next article in this series will examine the Twisted socket server and Flash XMLSocket connection along with providing the source code for those systems.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>63</wp:post_id>
<wp:post_date>2008-11-06 21:09:44</wp:post_date>
<wp:post_date_gmt>2008-11-07 05:09:44</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>58-revision</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>58</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Bluetooth + GPS + Python + ActionScript - Part 2 - Hooking Up</title>
<link>http://blog.phy5ics.com/2008/11/06/bluetooth-gps-python-actionscript-part-2-hooking-up/</link>
<pubDate>Fri, 07 Nov 2008 05:10:42 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[AS3]]></category>

		<category domain="category" nicename="as3"><![CDATA[AS3]]></category>

		<category><![CDATA[Bluetooth]]></category>

		<category domain="category" nicename="bluetooth"><![CDATA[Bluetooth]]></category>

		<category><![CDATA[GPS]]></category>

		<category domain="category" nicename="gps"><![CDATA[GPS]]></category>

		<category><![CDATA[Physical Computing]]></category>

		<category domain="category" nicename="physical-computing"><![CDATA[Physical Computing]]></category>

		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category><![CDATA[Twisted]]></category>

		<category domain="category" nicename="twisted"><![CDATA[Twisted]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/?p=58</guid>
<description></description>
<content:encoded><![CDATA[<strong>Overview</strong>

After having built the hardware in Part 1, it is fairly useless without a way to get the GPS data from the device somewhere else in order to do something useful with it.Â  For this project, the end result will be a visualization of the GPS data in Flash Player on a Mac.Â  There are myriad ways to accomplish this, however very few approaches can easily encapsulate all of these steps in a single language.Â  This is because both low-level system access (to read the serial data) and some sort of server (to serve the data to Flash Player) are required.Â  While it is definitely possible to use any number of other languages such as Java, Processing, C++, etc., performing all of these tasks with those languages would require significant amounts of code.

With that said, I opted for Python not only because I love it, but also because it is quite straightforward to use it to read from a serial port using the <a href="http://pyserial.wiki.sourceforge.net/pySerial" target="_blank">pyserial module</a> and also to establish any number of different types of servers including standard HTTP and socket servers.Â  While there are built-in libraries for creating and managing servers, I ultimately decided on creating a socket server using <a href="http://twistedmatrix.com/trac/" target="_blank">Twisted</a>.Â  Twisted is an enormously powerful networking framework that simplifies the creation of all sorts of servers.

Why add another framework when a standard HTTP server would suffice for serving up data to the Flash Player?Â  The implementation of a standard HTTP server would require Flash Player polling the service to determine if data had been updated.Â  So, rather than rely on that sub-par solution, Twisted makes the creation of socket servers very easy, which then allows the Flash Player to receive data in real-time via an XMLSocket connection.Â  Not only that, but one of the coolest aspects of Twisted is that it makes it fairly easy to write multi-user socket servers, which will be a nice addition for future enhancements

Here is what the overall system architecture ends up looking like when all of that is considered:

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_sys_arch.jpg"><img class="alignnone size-full wp-image-62" title="gps_bt_sys_arch" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_sys_arch.jpg" /></a>

However, before diving into these details, the first step is to hook up the device to the Mac via a serial Bluetooth connection and verifying that everything is working so far.

<!--more-->

<strong>Bluetooth Pairing</strong>
Obviously, the first step is to power up the board.Â  After that, pairing the BlueSMiRF with the Mac.Â  This is a very straightforward process.Â  From the Bluetooth preference pane in System Preferences, click the "+" icon to add a new Bluetooth device.Â  Advance through the dialog boxes, configuring the device that shows up as <strong><em>SparkFun-BT</em></strong>.Â  The passkey for BlueSMiRF module is <strong><em>default</em></strong>, so type that in when prompted.

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/bt_pairing.jpg"><img class="alignnone size-full wp-image-59" title="bt_pairing" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/bt_pairing.jpg" /></a>
Once that's been done, by checking the serial interfaces in <strong><em>/dev</em></strong>, it can be verified that it is now active as a serial device.Â  That is done by opening a terminal window and typing <strong><em>ls /dev/tty.*</em></strong>.Â  That will list out all available serial interfaces.Â  The BlueSMiRF should show up as something like <strong><em>tty.SparkFun-BT-COM0-1</em></strong>.

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/ls_tty.jpg"><img class="alignnone size-full wp-image-60" title="ls_tty" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/ls_tty.jpg" /></a>

<strong></strong>

<strong>Screen</strong>
Screen is a Unix application that allows one to attach a terminal session to a particular process.Â  To view the serial communication that is happening on the serial port that the BlueSMiRF is attached to, this is a good option.Â  This can be done by typing the following command into the terminal to view the serial communication on that port in realtime:

<strong><em>screen /dev/tty.SparkFun-BT-COM0-1 9600</em></strong>

Note that the <strong><em>9600</em></strong> at the end of that command is the baud rate.Â  That command should yield some cryptic messages being printed in Terminal like the following if everything else is wired up properly:

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/nmea.jpg"><img class="alignnone size-full wp-image-61" title="nmea" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/nmea.jpg" /></a>

To exit screen, hit <strong><em>control-a</em></strong>, then <strong><em>control-\</em></strong>.

The strings that are seen here are NMEA strings, which are derived from a specification that standardizes the way that marine electronics communicate with each other.Â  For additional information on this, check out <a href="http://www.gpsinformation.org/dale/nmea.htm">http://www.gpsinformation.org/dale/nmea.htm</a>.Â  If the GPS has a location fix, then numerous lines beginning with $GPGGA will be displayed, which precedes messages that contain the location fix data.Â  Otherwise, there will be mostly $GPGSV, which represents data regarding the GPS satellites themselves.

<strong>OK, Now What?</strong>

Now that there is data coming in over a virtual serial port, the next step is writing the software.Â  The next article in this series will examine the Twisted socket server and Flash XMLSocket connection along with providing the source code for those systems.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>58</wp:post_id>
<wp:post_date>2008-11-06 21:10:42</wp:post_date>
<wp:post_date_gmt>2008-11-07 05:10:42</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>bluetooth-gps-python-actionscript-part-2-hooking-up</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1275191997</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>3945</wp:comment_id>
<wp:comment_author><![CDATA[john]]></wp:comment_author>
<wp:comment_author_email>abc@hotmail.com</wp:comment_author_email>
<wp:comment_author_url>http://Website</wp:comment_author_url>
<wp:comment_author_IP>64.32.213.18</wp:comment_author_IP>
<wp:comment_date>2009-03-12 08:33:39</wp:comment_date>
<wp:comment_date_gmt>2009-03-12 16:33:39</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Great site for GPS!!!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3946</wp:comment_id>
<wp:comment_author><![CDATA[varboreaxia]]></wp:comment_author>
<wp:comment_author_email>enelsbiossign@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://Website</wp:comment_author_url>
<wp:comment_author_IP>118.167.112.6</wp:comment_author_IP>
<wp:comment_date>2009-03-12 08:42:05</wp:comment_date>
<wp:comment_date_gmt>2009-03-12 16:42:05</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thank you!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3947</wp:comment_id>
<wp:comment_author><![CDATA[grhabyt]]></wp:comment_author>
<wp:comment_author_email>gwyan.rhabyt@csueastbay.edu</wp:comment_author_email>
<wp:comment_author_url>http://Website</wp:comment_author_url>
<wp:comment_author_IP>71.135.174.220</wp:comment_author_IP>
<wp:comment_date>2009-03-14 11:10:17</wp:comment_date>
<wp:comment_date_gmt>2009-03-14 19:10:17</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I'm waiting eagerly to see the Twisted and Flash portions of the system. Please post when you can.
Thanks]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3965</wp:comment_id>
<wp:comment_author><![CDATA[Adam]]></wp:comment_author>
<wp:comment_author_email>cl.adamwang@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://east3yrswest3yrs.blogspot.com/</wp:comment_author_url>
<wp:comment_author_IP>219.71.199.250</wp:comment_author_IP>
<wp:comment_date>2009-11-12 09:01:54</wp:comment_date>
<wp:comment_date_gmt>2009-11-12 17:01:54</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I found you have been introduced roughly contents about using ActionScript proposed to control wireless device, it's a great idea for someone who may have his or her ideas to have fun. I just want to say that it's good artical. Thanks.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Bluetooth + GPS + Python + ActionScript - Part 2 - Hooking Up</title>
<link>http://blog.phy5ics.com/2008/11/06/58-revision-2/</link>
<pubDate>Fri, 07 Nov 2008 05:10:42 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2008/11/06/58-revision-2/</guid>
<description></description>
<content:encoded><![CDATA[<strong>Overview</strong>

After having built the hardware in Part 1, it is fairly useless without a way to get the GPS data from the device somewhere else in order to do something useful with it.Â  For this project, the end result will be a visualization of the GPS data in Flash Player on a Mac.Â  There are myriad ways to accomplish this, however very few approaches can easily encapsulate all of these steps in a single language.Â  This is because both low-level system access (to read the serial data) and some sort of server (to serve the data to Flash Player) are required.Â  While it is definitely possible to use any number of other languages such as Java, Processing, C++, etc., performing all of these tasks with those languages would require significant amounts of code.

With that said, I opted for Python not only because I love it, but also because it is quite straightforward to use it to read from a serial port using the <a href="http://pyserial.wiki.sourceforge.net/pySerial" target="_blank">pyserial module</a> and also to establish any number of different types of servers including standard HTTP and socket servers.Â  While there are built-in libraries for creating and managing servers, I ultimately decided on creating a socket server using <a href="http://twistedmatrix.com/trac/" target="_blank">Twisted</a>.Â  Twisted is an enormously powerful networking framework that simplifies the creation of all sorts of servers.

Why add another framework when a standard HTTP server would suffice for serving up data to the Flash Player?Â  The implementation of a standard HTTP server would require Flash Player polling the service to determine if data had been updated.Â  So, rather than rely on that sub-par solution, Twisted makes the creation of socket servers very easy, which then allows the Flash Player to receive data in real-time via an XMLSocket connection.Â  Not only that, but one of the coolest aspects of Twisted is that it makes it fairly easy to write multi-user socket servers, which will be a nice addition for future enhancements

Here is what the overall system architecture ends up looking like when all of that is considered:

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_sys_arch.jpg"><img class="alignnone size-full wp-image-62" title="gps_bt_sys_arch" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_sys_arch.jpg" alt="" width="500" height="357" /></a>

However, before diving into these details, the first step is to hook up the device to the Mac via a serial Bluetooth connection and verifying that everything is working so far.

<!--more-->

<strong>Bluetooth Pairing</strong>
Obviously, the first step is to power up the board.Â  After that, pairing the BlueSMiRF with the Mac.Â  This is a very straightforward process.Â  From the Bluetooth preference pane in System Preferences, click the "+" icon to add a new Bluetooth device.Â  Advance through the dialog boxes, configuring the device that shows up as <strong><em>SparkFun-BT</em></strong>.Â  The passkey for BlueSMiRF module is <strong><em>default</em></strong>, so type that in when prompted.

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/bt_pairing.jpg"><img class="alignnone size-full wp-image-59" title="bt_pairing" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/bt_pairing.jpg" alt="" width="500" height="364" /></a>
Once that's been done, by checking the serial interfaces in <strong><em>/dev</em></strong>, it can be verified that it is now active as a serial device.Â  That is done by opening a terminal window and typing <strong><em>ls /dev/tty.*</em></strong>.Â  That will list out all available serial interfaces.Â  The BlueSMiRF should show up as something like <strong><em>tty.SparkFun-BT-COM0-1</em></strong>.

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/ls_tty.jpg"><img class="alignnone size-full wp-image-60" title="ls_tty" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/ls_tty.jpg" alt="" width="500" height="67" /></a>

<strong></strong>

<strong>Screen</strong>
Screen is a Unix application that allows one to attach a terminal session to a particular process.Â  To view the serial communication that is happening on the serial port that the BlueSMiRF is attached to, this is a good option.Â  This can be done by typing the following command into the terminal to view the serial communication on that port in realtime:

<strong><em>screen /dev/tty.SparkFun-BT-COM0-1 9600</em></strong>

Note that the <strong><em>9600</em></strong> at the end of that command is the baud rate.Â  That command should yield some cryptic messages being printed in Terminal like the following if everything else is wired up properly:

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/nmea.jpg"><img class="alignnone size-full wp-image-61" title="nmea" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/nmea.jpg" alt="" width="500" height="333" /></a>

To exit screen, hit <strong><em>control-a</em></strong>, then <strong><em>control-</em></strong>.

The strings that are seen here are NMEA strings, which are derived from a specification that standardizes the way that marine electronics communicate with each other.Â  For additional information on this, check out <a href="http://www.gpsinformation.org/dale/nmea.htm">http://www.gpsinformation.org/dale/nmea.htm</a>.Â  If the GPS has a location fix, then numerous lines beginning with $GPGGA will be displayed, which precedes messages that contain the location fix data.Â  Otherwise, there will be mostly $GPGSV, which represents data regarding the GPS satellites themselves.

<strong>OK, Now What?</strong>

Now that there is data coming in over a virtual serial port, the next step is writing the software.Â  The next article in this series will examine the Twisted socket server and Flash XMLSocket connection along with providing the source code for those systems.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>82</wp:post_id>
<wp:post_date>2008-11-06 21:10:42</wp:post_date>
<wp:post_date_gmt>2008-11-07 05:10:42</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>58-revision-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>58</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Bluetooth + GPS + Python + ActionScript - Part 2 - Hooking Up</title>
<link>http://blog.phy5ics.com/2008/11/06/58-autosave/</link>
<pubDate>Fri, 07 Nov 2008 05:10:45 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://phy5ics.com/blog/2008/11/06/58-autosave/</guid>
<description></description>
<content:encoded><![CDATA[<strong>Overview</strong>

After having built the hardware in Part 1, it is fairly useless without a way to get the GPS data from the device somewhere else in order to do something useful with it.Â  For this project, the end result will be a visualization of the GPS data in Flash Player on a Mac.Â  There are myriad ways to accomplish this, however very few approaches can easily encapsulate all of these steps in a single language.Â  This is because both low-level system access (to read the serial data) and some sort of server (to serve the data to Flash Player) are required.Â  While it is definitely possible to use any number of other languages such as Java, Processing, C++, etc., performing all of these tasks with those languages would require significant amounts of code.

With that said, I opted for Python not only because I love it, but also because it is quite straightforward to use it to read from a serial port using the <a href="http://pyserial.wiki.sourceforge.net/pySerial" target="_blank">pyserial module</a> and also to establish any number of different types of servers including standard HTTP and socket servers.Â  While there are built-in libraries for creating and managing servers, I ultimately decided on creating a socket server using <a href="http://twistedmatrix.com/trac/" target="_blank">Twisted</a>.Â  Twisted is an enormously powerful networking framework that simplifies the creation of all sorts of servers.

Why add another framework when a standard HTTP server would suffice for serving up data to the Flash Player?Â  The implementation of a standard HTTP server would require Flash Player polling the service to determine if data had been updated.Â  So, rather than rely on that sub-par solution, Twisted makes the creation of socket servers very easy, which then allows the Flash Player to receive data in real-time via an XMLSocket connection.Â  Not only that, but one of the coolest aspects of Twisted is that it makes it fairly easy to write multi-user socket servers, which will be a nice addition for future enhancements

Here is what the overall system architecture ends up looking like when all of that is considered:

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_sys_arch.jpg"><img class="alignnone size-full wp-image-62" title="gps_bt_sys_arch" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_sys_arch.jpg" alt="" width="500" height="357" /></a>

However, before diving into these details, the first step is to hook up the device to the Mac via a serial Bluetooth connection and verifying that everything is working so far.

<!--more-->

<strong>Bluetooth Pairing</strong>
Obviously, the first step is to power up the board.Â  After that, pairing the BlueSMiRF with the Mac.Â  This is a very straightforward process.Â  From the Bluetooth preference pane in System Preferences, click the "+" icon to add a new Bluetooth device.Â  Advance through the dialog boxes, configuring the device that shows up as <strong><em>SparkFun-BT</em></strong>.Â  The passkey for BlueSMiRF module is <strong><em>default</em></strong>, so type that in when prompted.

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/bt_pairing.jpg"><img class="alignnone size-full wp-image-59" title="bt_pairing" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/bt_pairing.jpg" alt="" width="500" height="364" /></a>
Once that's been done, by checking the serial interfaces in <strong><em>/dev</em></strong>, it can be verified that it is now active as a serial device.Â  That is done by opening a terminal window and typing <strong><em>ls /dev/tty.*</em></strong>.Â  That will list out all available serial interfaces.Â  The BlueSMiRF should show up as something like <strong><em>tty.SparkFun-BT-COM0-1</em></strong>.

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/ls_tty.jpg"><img class="alignnone size-full wp-image-60" title="ls_tty" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/ls_tty.jpg" alt="" width="500" height="67" /></a>

<strong></strong>

<strong>Screen</strong>
Screen is a Unix application that allows one to attach a terminal session to a particular process.Â  To view the serial communication that is happening on the serial port that the BlueSMiRF is attached to, this is a good option.Â  This can be done by typing the following command into the terminal to view the serial communication on that port in realtime:

<strong><em>screen /dev/tty.SparkFun-BT-COM0-1 9600</em></strong>

Note that the <strong><em>9600</em></strong> at the end of that command is the baud rate.Â  That command should yield some cryptic messages being printed in Terminal like the following if everything else is wired up properly:

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/nmea.jpg"><img class="alignnone size-full wp-image-61" title="nmea" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/nmea.jpg" alt="" width="500" height="333" /></a>

To exit screen, hit <strong><em>control-a</em></strong>, then <strong><em>control-\</em></strong>.

The strings that are seen here are NMEA strings, which are derived from a specification that standardizes the way that marine electronics communicate with each other.Â  For additional information on this, check out <a href="http://www.gpsinformation.org/dale/nmea.htm">http://www.gpsinformation.org/dale/nmea.htm</a>.Â  If the GPS has a location fix, then numerous lines beginning with $GPGGA will be displayed, which precedes messages that contain the location fix data.Â  Otherwise, there will be mostly $GPGSV, which represents data regarding the GPS satellites themselves.

<strong>OK, Now What?</strong>

Now that there is data coming in over a virtual serial port, the next step is writing the software.Â  The next article in this series will examine the Twisted socket server and Flash XMLSocket connection along with providing the source code for those systems.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>64</wp:post_id>
<wp:post_date>2008-11-06 21:10:45</wp:post_date>
<wp:post_date_gmt>2008-11-07 05:10:45</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>58-autosave</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>58</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Schematic Touchwall</title>
<link>http://blog.phy5ics.com/2009/09/05/65-revision/</link>
<pubDate>Sat, 05 Sep 2009 17:36:16 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2009/09/05/65-revision/</guid>
<description></description>
<content:encoded><![CDATA[Having finally recovered from the nearly three weeks of working around the clock in Cannes, France to install the Schematic Touchwall at the Cannes Lions Advertising Festival, I want to lift the covers a bit and discuss some of the technology and challenges behind the installation.Â  Being the architect behind the hardware and software of the Touchwall gives me some unique insight.

[vimeo http://vimeo.com/5192300] ]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>66</wp:post_id>
<wp:post_date>2009-09-05 09:36:16</wp:post_date>
<wp:post_date_gmt>2009-09-05 17:36:16</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>65-revision</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>65</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Schematic Touchwall</title>
<link>http://blog.phy5ics.com/2009/09/05/65-revision-2/</link>
<pubDate>Sat, 05 Sep 2009 17:42:33 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2009/09/05/65-revision-2/</guid>
<description></description>
<content:encoded><![CDATA[Having finally recovered from the nearly three weeks of working around the clock in Cannes, France to install the Schematic Touchwall at the Cannes Lions Advertising Festival, I want to lift the covers a bit and discuss some of the technology and challenges behind the installation.Â  Being the architect behind the hardware and software of the Touchwall gives me some unique insight.

[vimeo http://vimeo.com/5192300] ]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>67</wp:post_id>
<wp:post_date>2009-09-05 09:42:33</wp:post_date>
<wp:post_date_gmt>2009-09-05 17:42:33</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>65-revision-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>65</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>happy_holidays</title>
<link>http://blog.phy5ics.com/2009/12/25/holiday-infographics/happy_holidays/</link>
<pubDate>Fri, 25 Dec 2009 20:17:10 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/wp-content/uploads/2009/12/happy_holidays.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>69</wp:post_id>
<wp:post_date>2009-12-25 12:17:10</wp:post_date>
<wp:post_date_gmt>2009-12-25 20:17:10</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>happy_holidays</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>68</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:attachment_url>http://blog.phy5ics.com/wp-content/uploads/2009/12/happy_holidays.jpg</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/nfs/c02/h06/mnt/17924/domains/blog.phy5ics.com/html/wp-content/uploads/2009/12/happy_holidays.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";i:773;s:6:"height";i:703;s:14:"hwstring_small";s:23:"height='96' width='105'";s:4:"file";s:98:"/nfs/c02/h06/mnt/17924/domains/blog.phy5ics.com/html/wp-content/uploads/2009/12/happy_holidays.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:26:"happy_holidays-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;}s:6:"medium";a:3:{s:4:"file";s:26:"happy_holidays-300x272.jpg";s:5:"width";i:300;s:6:"height";i:272;}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Happy Holidays!</title>
<link>http://blog.phy5ics.com/2009/12/25/68-revision/</link>
<pubDate>Fri, 25 Dec 2009 20:17:42 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2009/12/25/68-revision/</guid>
<description></description>
<content:encoded><![CDATA[<a href="http://blog.phy5ics.com/wp-content/uploads/2009/12/happy_holidays.jpg"><img class="alignnone size-full wp-image-69" title="happy_holidays" src="http://blog.phy5ics.com/wp-content/uploads/2009/12/happy_holidays.jpg" alt="" width="499" height="454" /></a>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>70</wp:post_id>
<wp:post_date>2009-12-25 12:17:42</wp:post_date>
<wp:post_date_gmt>2009-12-25 20:17:42</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>68-revision</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>68</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Holiday Infographics</title>
<link>http://blog.phy5ics.com/2009/12/25/68-revision-2/</link>
<pubDate>Fri, 25 Dec 2009 20:19:20 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2009/12/25/68-revision-2/</guid>
<description></description>
<content:encoded><![CDATA[<a href="http://blog.phy5ics.com/wp-content/uploads/2009/12/happy_holidays.jpg"><img class="alignnone size-full wp-image-69" title="happy_holidays" src="http://blog.phy5ics.com/wp-content/uploads/2009/12/happy_holidays.jpg" alt="" width="499" height="454" /></a>

Happy Holidays from phy5ics!]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>71</wp:post_id>
<wp:post_date>2009-12-25 12:19:20</wp:post_date>
<wp:post_date_gmt>2009-12-25 20:19:20</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>68-revision-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>68</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Holiday Infographics</title>
<link>http://blog.phy5ics.com/2009/12/25/68-revision-3/</link>
<pubDate>Fri, 25 Dec 2009 20:19:32 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2009/12/25/68-revision-3/</guid>
<description></description>
<content:encoded><![CDATA[<a href="http://blog.phy5ics.com/wp-content/uploads/2009/12/happy_holidays.jpg"><img class="alignnone size-full wp-image-69" title="happy_holidays" src="http://blog.phy5ics.com/wp-content/uploads/2009/12/happy_holidays.jpg" alt="" width="499" height="454" /></a>

Happy Holidays from phy5ics!]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>81</wp:post_id>
<wp:post_date>2009-12-25 12:19:32</wp:post_date>
<wp:post_date_gmt>2009-12-25 20:19:32</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>68-revision-3</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>68</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Holiday Infographics</title>
<link>http://blog.phy5ics.com/2009/12/25/holiday-infographics/</link>
<pubDate>Fri, 25 Dec 2009 20:19:32 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/?p=68</guid>
<description></description>
<content:encoded><![CDATA[<a href="http://blog.phy5ics.com/wp-content/uploads/2009/12/happy_holidays.jpg"><img class="alignnone size-full wp-image-69" title="happy_holidays" src="http://blog.phy5ics.com/wp-content/uploads/2009/12/happy_holidays.jpg" width="700" /></a>

Happy Holidays from phy5ics!]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>68</wp:post_id>
<wp:post_date>2009-12-25 12:19:32</wp:post_date>
<wp:post_date_gmt>2009-12-25 20:19:32</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>holiday-infographics</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1275259024</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>3966</wp:comment_id>
<wp:comment_author><![CDATA[Dad]]></wp:comment_author>
<wp:comment_author_email>j-barton@northwestern.edu</wp:comment_author_email>
<wp:comment_author_url>http://Website</wp:comment_author_url>
<wp:comment_author_IP>165.124.165.197</wp:comment_author_IP>
<wp:comment_date>2009-12-26 11:38:39</wp:comment_date>
<wp:comment_date_gmt>2009-12-26 19:38:39</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Wonderful!  I especially liked the clever bar graph.  Merry Christmas!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>KnifeandPork.com Launches</title>
<link>http://blog.phy5ics.com/2010/01/01/knifeandporkcom-launches/</link>
<pubDate>Fri, 01 Jan 2010 22:45:59 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Announcements]]></category>

		<category domain="category" nicename="announcements"><![CDATA[Announcements]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/?p=90</guid>
<description></description>
<content:encoded><![CDATA[<p>I am excited to announce that my new project for 2010 and beyond has launched.  While not technology related, it represents the other passions that I hold near-and-dear: cooking and photography.  The new year starts off properly with Black-Eyed Peas with Smoked Ham Hocks served alonside Collard Greens with Bacon and Red Onion.  Be sure to check back often, as I cook nearly every night.</p>

<p><a href="http://www.flickr.com/photos/phy5ics/4236177532/" title="Collard Greens by phy5ics, on Flickr"><img src="http://farm3.static.flickr.com/2764/4236177532_1950d87f2a.jpg" width="500" height="336" alt="Collard Greens" /></a></p>

<p><a href="http://knifeandpork.com/" target="_blank">Visit knifeandpork.com</a></p>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>90</wp:post_id>
<wp:post_date>2010-01-01 14:45:59</wp:post_date>
<wp:post_date_gmt>2010-01-01 22:45:59</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>knifeandporkcom-launches</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1275259626</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Installing MongoDB on MediaTemple (dv)</title>
<link>http://blog.phy5ics.com/2010/03/27/73-revision/</link>
<pubDate>Sat, 27 Mar 2010 23:55:10 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2010/03/27/73-revision/</guid>
<description></description>
<content:encoded><![CDATA[<p>Due to a project that  I've been working on that has some very specific software requirements  I consolidated several separate boxes (from Joyent and MediaTemple's Grid Service) to a new (dv) from  MediaTemple for more flexibility.Â  As part of that migration, I needed to get MongoDB setup on CentOS.Â  The only RPM out there is for MongoDB is 1.2.2, (available here: http://chrislea.com/2010/02/07/mongodb-1-2-2-for-centos-5/).Â  However, I quickly found out that with MT's (dv), there are all sorts of depsolving issues with the Plesk psa packages and boost.Â  So after all sorts of hell with yum, I decided to give the pre-compiled binaries a shot, and much to my dismay, they worked a treat.</p>
<p style="font-size: 19.5px; line-height: 28.5px;"><!--more--></p>

<code># yum install --enablerepo=chl mongo-server mongo
Loaded plugins: fastestmirror, protectbase
Loading mirror speeds from cached hostfile
 * addons: mirror.trouble-free.net
 * atomic: www4.atomicorp.com
 * base: mirror.rackspace.com
 * epel: serverbeach1.fedoraproject.org
 * extras: mirrors.unbornmedia.com
 * rpmforge: apt.sw.be
 * updates: updates.interworx.info
0 packages excluded due to repository protections
Setting up Install Process
Resolving Dependencies
--> Running transaction check
---> Package mongo.i386 0:1.2.2-mongodb_2 set to be updated
--> Processing Dependency: boost >= 1.35 for package: mongo
--> Processing Dependency: libboost_program_options-mt.so.4 for package: mongo
--> Processing Dependency: libboost_filesystem-mt.so.4 for package: mongo
--> Processing Dependency: libjs.so.1 for package: mongo
--> Processing Dependency: libboost_thread-mt.so.4 for package: mongo
--> Processing Dependency: libboost_system-mt.so.4 for package: mongo
---> Package mongo-server.i386 0:1.2.2-mongodb_2 set to be updated
--> Running transaction check
--> Processing Dependency: libboost_date_time.so.2 for package: psa
--> Processing Dependency: libboost_filesystem.so.2 for package: psa
---> Package boost.i386 0:1.37.0-6 set to be updated
---> Package js.i386 1:1.7.0-1.el5.rf set to be updated
--> Finished Dependency Resolution
psa-8.6.0-cos5.build86080722.00.i586 from installed has depsolving problems
  --> Missing Dependency: libboost_filesystem.so.2 is needed by package psa-8.6.0-cos5.build86080722.00.i586 (installed)
psa-8.6.0-cos5.build86080722.00.i586 from installed has depsolving problems
  --> Missing Dependency: libboost_date_time.so.2 is needed by package psa-8.6.0-cos5.build86080722.00.i586 (installed)
Error: Missing Dependency: libboost_date_time.so.2 is needed by package psa-8.6.0-cos5.build86080722.00.i586 (installed)
Error: Missing Dependency: libboost_filesystem.so.2 is needed by package psa-8.6.0-cos5.build86080722.00.i586 (installed)
 You could try using --skip-broken to work around the problem
 You could try running: package-cleanup --problems
                        package-cleanup --dupes
                        rpm -Va --nofiles --nodigest
The program package-cleanup is found in the yum-utils package.</code>

<p>In an effort to help out those that might run into this as well, here are some instructions to get it running on MT's (dv):</p>
<p>Log in to your (dv) and su to root:</p>
<p>[user@hostname]# su root</p>
<p>[root@hostname]# cd /var/lib</p>
<p style="font-size: 19.5px; line-height: 28.5px;">[root@hostname]# wget http://downloads.mongodb.org/linux/mongodb-linux-i686-1.4.0.tgz</p>
<p style="font-size: 19.5px; line-height: 28.5px;">[root@hostname]# tar -xvf mongodb-linux-i686-1.4.0.tgz</p>
<p style="font-size: 19.5px; line-height: 28.5px;"></p>
<p style="font-size: 19.5px; line-height: 28.5px;"></p>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>74</wp:post_id>
<wp:post_date>2010-03-27 15:55:10</wp:post_date>
<wp:post_date_gmt>2010-03-27 23:55:10</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>73-revision</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>73</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Installing MongoDB on MediaTemple (dv)</title>
<link>http://blog.phy5ics.com/2010/03/27/73-revision-2/</link>
<pubDate>Sat, 27 Mar 2010 23:55:36 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2010/03/27/73-revision-2/</guid>
<description></description>
<content:encoded><![CDATA[<p>Due to a project that  I've been working on that has some very specific software requirements  I consolidated several separate boxes (from Joyent and MediaTemple's Grid Service) to a new (dv) from  MediaTemple for more flexibility.Â  As part of that migration, I needed to get MongoDB setup on CentOS.Â  The only RPM out there is for MongoDB is 1.2.2, (available here: http://chrislea.com/2010/02/07/mongodb-1-2-2-for-centos-5/).Â  However, I quickly found out that with MT's (dv), there are all sorts of depsolving issues with the Plesk psa packages and boost.Â  So after all sorts of hell with yum, I decided to give the pre-compiled binaries a shot, and much to my dismay, they worked a treat.</p>
<p style="font-size: 19.5px; line-height: 28.5px;"><!--more--></p>

<code># yum install --enablerepo=chl mongo-server mongo
Loaded plugins: fastestmirror, protectbase
Loading mirror speeds from cached hostfile
 * addons: mirror.trouble-free.net
 * atomic: www4.atomicorp.com
 * base: mirror.rackspace.com
 * epel: serverbeach1.fedoraproject.org
 * extras: mirrors.unbornmedia.com
 * rpmforge: apt.sw.be
 * updates: updates.interworx.info
0 packages excluded due to repository protections
Setting up Install Process
Resolving Dependencies
--> Running transaction check
---> Package mongo.i386 0:1.2.2-mongodb_2 set to be updated
--> Processing Dependency: boost >= 1.35 for package: mongo
--> Processing Dependency: libboost_program_options-mt.so.4 for package: mongo
--> Processing Dependency: libboost_filesystem-mt.so.4 for package: mongo
--> Processing Dependency: libjs.so.1 for package: mongo
--> Processing Dependency: libboost_thread-mt.so.4 for package: mongo
--> Processing Dependency: libboost_system-mt.so.4 for package: mongo
---> Package mongo-server.i386 0:1.2.2-mongodb_2 set to be updated
--> Running transaction check
--> Processing Dependency: libboost_date_time.so.2 for package: psa
--> Processing Dependency: libboost_filesystem.so.2 for package: psa
---> Package boost.i386 0:1.37.0-6 set to be updated
---> Package js.i386 1:1.7.0-1.el5.rf set to be updated
--> Finished Dependency Resolution
psa-8.6.0-cos5.build86080722.00.i586 from installed has depsolving problems
  --> Missing Dependency: libboost_filesystem.so.2 is needed by package psa-8.6.0-cos5.build86080722.00.i586 (installed)
psa-8.6.0-cos5.build86080722.00.i586 from installed has depsolving problems
  --> Missing Dependency: libboost_date_time.so.2 is needed by package psa-8.6.0-cos5.build86080722.00.i586 (installed)
Error: Missing Dependency: libboost_date_time.so.2 is needed by package psa-8.6.0-cos5.build86080722.00.i586 (installed)
Error: Missing Dependency: libboost_filesystem.so.2 is needed by package psa-8.6.0-cos5.build86080722.00.i586 (installed)
 You could try using --skip-broken to work around the problem
 You could try running: package-cleanup --problems
                        package-cleanup --dupes
                        rpm -Va --nofiles --nodigest
The program package-cleanup is found in the yum-utils package.</code>

<p>In an effort to help out those that might run into this as well, here are some instructions to get it running on MT's (dv):</p>
<p>Log in to your (dv) and su to root:</p>

<code>
<p>[user@hostname]# su root</p>
<p>[root@hostname]# cd /var/lib</p>
<p>[root@hostname]# wget http://downloads.mongodb.org/linux/mongodb-linux-i686-1.4.0.tgz</p>
<p>[root@hostname]# tar -xvf mongodb-linux-i686-1.4.0.tgz</p>

<code>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>75</wp:post_id>
<wp:post_date>2010-03-27 15:55:36</wp:post_date>
<wp:post_date_gmt>2010-03-27 23:55:36</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>73-revision-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>73</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Installing MongoDB on MediaTemple (dv)</title>
<link>http://blog.phy5ics.com/2010/03/27/73-revision-3/</link>
<pubDate>Sun, 28 Mar 2010 00:10:22 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2010/03/27/73-revision-3/</guid>
<description></description>
<content:encoded><![CDATA[<p>Due to a project that  I've been working on that has some very specific software requirements  I consolidated several separate boxes (from Joyent and MediaTemple's Grid Service) to a new (dv) from  MediaTemple for more flexibility.Â  As part of that migration, I needed to get MongoDB setup on CentOS.Â  The only RPM out there is for MongoDB is 1.2.2, (available here: http://chrislea.com/2010/02/07/mongodb-1-2-2-for-centos-5/).Â  However, I quickly found out that with MT's (dv), there are all sorts of depsolving issues with the Plesk psa packages and boost.Â  So after all sorts of hell with yum, I decided to give the pre-compiled binaries a shot, and much to my dismay, they worked a treat.  Although I did run into some additional issues with installing the MongoDB PHP extension via pecl.</p>
<p style="font-size: 19.5px; line-height: 28.5px;"><!--more--></p>

<pre># yum install --enablerepo=chl mongo-server mongo
Loaded plugins: fastestmirror, protectbase
Loading mirror speeds from cached hostfile
 * addons: mirror.trouble-free.net
 * atomic: www4.atomicorp.com
 * base: mirror.rackspace.com
 * epel: serverbeach1.fedoraproject.org
 * extras: mirrors.unbornmedia.com
 * rpmforge: apt.sw.be
 * updates: updates.interworx.info
0 packages excluded due to repository protections
Setting up Install Process
Resolving Dependencies
--> Running transaction check
---> Package mongo.i386 0:1.2.2-mongodb_2 set to be updated
--> Processing Dependency: boost >= 1.35 for package: mongo
--> Processing Dependency: libboost_program_options-mt.so.4 for package: mongo
--> Processing Dependency: libboost_filesystem-mt.so.4 for package: mongo
--> Processing Dependency: libjs.so.1 for package: mongo
--> Processing Dependency: libboost_thread-mt.so.4 for package: mongo
--> Processing Dependency: libboost_system-mt.so.4 for package: mongo
---> Package mongo-server.i386 0:1.2.2-mongodb_2 set to be updated
--> Running transaction check
--> Processing Dependency: libboost_date_time.so.2 for package: psa
--> Processing Dependency: libboost_filesystem.so.2 for package: psa
---> Package boost.i386 0:1.37.0-6 set to be updated
---> Package js.i386 1:1.7.0-1.el5.rf set to be updated
--> Finished Dependency Resolution
psa-8.6.0-cos5.build86080722.00.i586 from installed has depsolving problems
  --> Missing Dependency: libboost_filesystem.so.2 is needed by package psa-8.6.0-cos5.build86080722.00.i586 (installed)
psa-8.6.0-cos5.build86080722.00.i586 from installed has depsolving problems
  --> Missing Dependency: libboost_date_time.so.2 is needed by package psa-8.6.0-cos5.build86080722.00.i586 (installed)
Error: Missing Dependency: libboost_date_time.so.2 is needed by package psa-8.6.0-cos5.build86080722.00.i586 (installed)
Error: Missing Dependency: libboost_filesystem.so.2 is needed by package psa-8.6.0-cos5.build86080722.00.i586 (installed)
 You could try using --skip-broken to work around the problem
 You could try running: package-cleanup --problems
                        package-cleanup --dupes
                        rpm -Va --nofiles --nodigest
The program package-cleanup is found in the yum-utils package.</pre>

<strong>Installing MongoDB from Pre-Compiled Binaries</strong>
<p>In an effort to help out those that might run into this as well, here are some instructions to get it running on MT's (dv):</p>
<p>Log in to your (dv) and su to root and get to work:</p>
<pre>
[user@hostname]# su root
[root@hostname]# cd /var/lib
[root@hostname]# wget http://downloads.mongodb.org/linux/mongodb-linux-i686-1.4.0.tgz
[root@hostname]# tar -xvf mongodb-linux-i686-1.4.0.tgz
[root@hostname]# 
</pre>


<strong>Installing MongoDB Driver for PHP</strong>
Here is what I ran into at first:
<pre>
[root@hostname]# cd /var/tmp
[root@hostname]# pecl install mongo
downloading mongo-1.0.6.tgz ...
Starting to download mongo-1.0.6.tgz (53,175 bytes)
.............done: 53,175 bytes
16 source files, building
running: phpize
Configuring for:
PHP Api Version:         20041225
Zend Module Api No:      20060613
Zend Extension Api No:   220060519
building in /var/tmp/pear-build-phy5ics/mongo-1.0.6
running: /var/cache/php-pear/mongo-1.0.6/configure
checking for egrep... grep -E
checking for a sed that does not truncate output... //bin/sed
checking for gcc... gcc
checking for C compiler default output file name... a.out
checking whether the C compiler works... configure: error: cannot run C compiled programs.
If you meant to cross compile, use `--host'.
See `config.log' for more details.
ERROR: `/var/cache/php-pear/mongo-1.0.6/configure' failed
</pre>
Looking at this, I realized that /var/tmp wasn't mounted to allow executabl.  That was easy enough to fix after figuring out what it was.  The key is to remount /var/tmp to allow execution.  Just don't forget to change it back once you've done your business.
<pre>
mount -o,remount,rw,exec /var/tmp
</pre>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>76</wp:post_id>
<wp:post_date>2010-03-27 16:10:22</wp:post_date>
<wp:post_date_gmt>2010-03-28 00:10:22</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>73-revision-3</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>73</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Installing MongoDB on MediaTemple (dv)</title>
<link>http://blog.phy5ics.com/2010/03/27/73-revision-4/</link>
<pubDate>Sun, 28 Mar 2010 00:21:06 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2010/03/27/73-revision-4/</guid>
<description></description>
<content:encoded><![CDATA[<p>Due to a project that  I've been working on that has some very specific software requirements  I consolidated several separate boxes (from Joyent and MediaTemple's Grid Service) to a new (dv) from  MediaTemple for more flexibility.Â  As part of that migration, I needed to get MongoDB setup on CentOS.Â  The only RPM out there is for MongoDB is 1.2.2, (available here: http://chrislea.com/2010/02/07/mongodb-1-2-2-for-centos-5/).Â  However, I quickly found out that with MT's (dv), there are all sorts of depsolving issues with the Plesk psa packages and boost.Â  So after all sorts of hell with yum, I decided to give the pre-compiled binaries a shot, and much to my dismay, they worked a treat.  Although I did run into some additional issues with installing the MongoDB PHP extension via pecl.</p>
<p style="font-size: 19.5px; line-height: 28.5px;"><!--more--></p>

<pre># yum install --enablerepo=chl mongo-server mongo
Loaded plugins: fastestmirror, protectbase
Loading mirror speeds from cached hostfile
 * addons: mirror.trouble-free.net
 * atomic: www4.atomicorp.com
 * base: mirror.rackspace.com
 * epel: serverbeach1.fedoraproject.org
 * extras: mirrors.unbornmedia.com
 * rpmforge: apt.sw.be
 * updates: updates.interworx.info
0 packages excluded due to repository protections
Setting up Install Process
Resolving Dependencies
--> Running transaction check
---> Package mongo.i386 0:1.2.2-mongodb_2 set to be updated
--> Processing Dependency: boost >= 1.35 for package: mongo
--> Processing Dependency: libboost_program_options-mt.so.4 for package: mongo
--> Processing Dependency: libboost_filesystem-mt.so.4 for package: mongo
--> Processing Dependency: libjs.so.1 for package: mongo
--> Processing Dependency: libboost_thread-mt.so.4 for package: mongo
--> Processing Dependency: libboost_system-mt.so.4 for package: mongo
---> Package mongo-server.i386 0:1.2.2-mongodb_2 set to be updated
--> Running transaction check
--> Processing Dependency: libboost_date_time.so.2 for package: psa
--> Processing Dependency: libboost_filesystem.so.2 for package: psa
---> Package boost.i386 0:1.37.0-6 set to be updated
---> Package js.i386 1:1.7.0-1.el5.rf set to be updated
--> Finished Dependency Resolution
psa-8.6.0-cos5.build86080722.00.i586 from installed has depsolving problems
  --> Missing Dependency: libboost_filesystem.so.2 is needed by package 
psa-8.6.0-cos5.build86080722.00.i586 (installed)
psa-8.6.0-cos5.build86080722.00.i586 from installed has depsolving problems
  --> Missing Dependency: libboost_date_time.so.2 is needed by package 
psa-8.6.0-cos5.build86080722.00.i586 (installed)
Error: Missing Dependency: libboost_date_time.so.2 is needed by package 
psa-8.6.0-cos5.build86080722.00.i586 (installed)
Error: Missing Dependency: libboost_filesystem.so.2 is needed by package 
psa-8.6.0-cos5.build86080722.00.i586 (installed)
 You could try using --skip-broken to work around the problem
 You could try running: package-cleanup --problems
                        package-cleanup --dupes
                        rpm -Va --nofiles --nodigest
The program package-cleanup is found in the yum-utils package.</pre>

Despite running yum clean all, which is the usual fix for these sorts of shenanigans, 

<strong>Installing MongoDB from Pre-Compiled Binaries</strong>
<p>In an effort to help out those that might run into this as well, here are some instructions to get it running on MT's (dv):</p>
<p>Log in to your (dv) and su to root and get to work:</p>
<pre>
[user@hostname]# su root
[root@hostname]# cd /var/lib
[root@hostname]# wget http://downloads.mongodb.org/linux/mongodb-linux-i686-1.4.0.tgz
[root@hostname]# tar -xvf mongodb-linux-i686-1.4.0.tgz
[root@hostname]# 
</pre>


<strong>Installing MongoDB Driver for PHP</strong>
Here is what I ran into at first:
<pre>
[root@hostname]# cd /var/tmp
[root@hostname]# pecl install mongo
downloading mongo-1.0.6.tgz ...
Starting to download mongo-1.0.6.tgz (53,175 bytes)
.............done: 53,175 bytes
16 source files, building
running: phpize
Configuring for:
PHP Api Version:         20041225
Zend Module Api No:      20060613
Zend Extension Api No:   220060519
building in /var/tmp/pear-build-phy5ics/mongo-1.0.6
running: /var/cache/php-pear/mongo-1.0.6/configure
checking for egrep... grep -E
checking for a sed that does not truncate output... //bin/sed
checking for gcc... gcc
checking for C compiler default output file name... a.out
checking whether the C compiler works... configure: error: cannot run C compiled programs.
If you meant to cross compile, use `--host'.
See `config.log' for more details.
ERROR: `/var/cache/php-pear/mongo-1.0.6/configure' failed
</pre>

Looking at this, I realized that /var/tmp wasn't mounted to allow execution.  That was easy enough to fix after figuring out what it was.  The key is to remount /var/tmp to allow execution:
<pre>
mount -o,remount,rw,exec /var/tmp
</pre>

<i>Important:</i> Don't forget to change it back once you've done your business:
<pre>
mount -o,remount,rw,noexec /var/tmp
</pre>

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>77</wp:post_id>
<wp:post_date>2010-03-27 16:21:06</wp:post_date>
<wp:post_date_gmt>2010-03-28 00:21:06</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>73-revision-4</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>73</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Installing MongoDB on MediaTemple (dv)</title>
<link>http://blog.phy5ics.com/2010/03/27/73-revision-5/</link>
<pubDate>Sun, 28 Mar 2010 00:41:51 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2010/03/27/73-revision-5/</guid>
<description></description>
<content:encoded><![CDATA[<p>Due to a project that  I've been working on that has some very specific software requirements  I consolidated several separate boxes (from Joyent and MediaTemple's Grid Service) to a new (dv) from  MediaTemple for more flexibility.Â  As part of that migration, I needed to get MongoDB setup on CentOS.Â  The only RPM out there is for MongoDB is 1.2.2, (available here: http://chrislea.com/2010/02/07/mongodb-1-2-2-for-centos-5/).Â  However, I quickly found out that with MT's (dv), there are all sorts of depsolving issues with the Plesk psa packages and boost.Â  So after all sorts of hell with yum, I decided to give the pre-compiled binaries a shot, and much to my dismay, they worked a treat with no fussing. I ran into further issues with installing the MongoDB PHP extension via pecl, but figured out how to work around those as well.  In an effort to help out those that might run into this as well, here are instructions on how to get it running on an MT (dv).</p>
<p style="font-size: 19.5px; line-height: 28.5px;"><!--more--></p>

<strong>Here is the dependency hell that I ran into after adding the repository:</strong>
<pre># yum install --enablerepo=chl mongo-server mongo
Loaded plugins: fastestmirror, protectbase
Loading mirror speeds from cached hostfile
 * addons: mirror.trouble-free.net
 * atomic: www4.atomicorp.com
 * base: mirror.rackspace.com
 * epel: serverbeach1.fedoraproject.org
 * extras: mirrors.unbornmedia.com
 * rpmforge: apt.sw.be
 * updates: updates.interworx.info
0 packages excluded due to repository protections
Setting up Install Process
Resolving Dependencies
--> Running transaction check
---> Package mongo.i386 0:1.2.2-mongodb_2 set to be updated
--> Processing Dependency: boost >= 1.35 for package: mongo
--> Processing Dependency: libboost_program_options-mt.so.4 for package: mongo
--> Processing Dependency: libboost_filesystem-mt.so.4 for package: mongo
--> Processing Dependency: libjs.so.1 for package: mongo
--> Processing Dependency: libboost_thread-mt.so.4 for package: mongo
--> Processing Dependency: libboost_system-mt.so.4 for package: mongo
---> Package mongo-server.i386 0:1.2.2-mongodb_2 set to be updated
--> Running transaction check
--> Processing Dependency: libboost_date_time.so.2 for package: psa
--> Processing Dependency: libboost_filesystem.so.2 for package: psa
---> Package boost.i386 0:1.37.0-6 set to be updated
---> Package js.i386 1:1.7.0-1.el5.rf set to be updated
--> Finished Dependency Resolution
psa-8.6.0-cos5.build86080722.00.i586 from installed has depsolving problems
  --> Missing Dependency: libboost_filesystem.so.2 is needed by package 
psa-8.6.0-cos5.build86080722.00.i586 (installed)
psa-8.6.0-cos5.build86080722.00.i586 from installed has depsolving problems
  --> Missing Dependency: libboost_date_time.so.2 is needed by package 
psa-8.6.0-cos5.build86080722.00.i586 (installed)
Error: Missing Dependency: libboost_date_time.so.2 is needed by package 
psa-8.6.0-cos5.build86080722.00.i586 (installed)
Error: Missing Dependency: libboost_filesystem.so.2 is needed by package 
psa-8.6.0-cos5.build86080722.00.i586 (installed)
 You could try using --skip-broken to work around the problem
 You could try running: package-cleanup --problems
                        package-cleanup --dupes
                        rpm -Va --nofiles --nodigest
The program package-cleanup is found in the yum-utils package.</pre>

<strong>Installing MongoDB from Pre-Compiled Binaries</strong>
<p>Log in to your (dv) and su to root and get to work:</p>
<pre>
[user@hostname]# su root
[root@hostname]# cd /var/lib
[root@hostname]# wget http://downloads.mongodb.org/linux/mongodb-linux-i686-1.4.0.tgz
[root@hostname]# tar -xvf mongodb-linux-i686-1.4.0.tgz
</pre>

<p>From there, you'll want to create the directories for the database:</p>

<pre>
[root@hostname]# mkdir /data
[root@hostname]# mkdir /data/db
</pre>

<p>That's all there is to it.  You can test your install by doing the following:</p>

<pre>
[root@hostname]# ./mongod
./mongod --help for help and startup options
Sat Mar 27 09:59:16 Mongo DB : starting : pid = 24197 port = 27017 dbpath = /data/db/ master = 0 slave = 0  32-bit 

** NOTE: when using MongoDB 32 bit, you are limited to about 2 gigabytes of data
**       see http://blog.mongodb.org/post/137788967/32-bit-limitations for more

Sat Mar 27 09:59:16 db version v1.4.0, pdfile version 4.5
Sat Mar 27 09:59:16 git version: 514f8bbab657c1dc110d45eea6ea33de296dbb26
Sat Mar 27 09:59:16 sys info: Linux domU-12-31-39-01-70-B4 2.6.21.7-2.fc8xen #1 SMP Fri Feb 15 12:39:36 EST 2008 i686 BOOST_LIB_VERSION=1_37
Sat Mar 27 09:59:16 waiting for connections on port 27017
Sat Mar 27 09:59:16 web admin interface listening on port 28017
</pre>

<strong>Installing MongoDB Driver for PHP</strong>
<p>Here is what I ran into at first:</p>
<pre>
[root@hostname]# cd /var/tmp
[root@hostname]# pecl install mongo
downloading mongo-1.0.6.tgz ...
Starting to download mongo-1.0.6.tgz (53,175 bytes)
.............done: 53,175 bytes
16 source files, building
running: phpize
Configuring for:
PHP Api Version:         20041225
Zend Module Api No:      20060613
Zend Extension Api No:   220060519
building in /var/tmp/pear-build-phy5ics/mongo-1.0.6
running: /var/cache/php-pear/mongo-1.0.6/configure
checking for egrep... grep -E
checking for a sed that does not truncate output... //bin/sed
checking for gcc... gcc
checking for C compiler default output file name... a.out
checking whether the C compiler works... configure: error: cannot run C compiled programs.
If you meant to cross compile, use `--host'.
See `config.log' for more details.
ERROR: `/var/cache/php-pear/mongo-1.0.6/configure' failed
</pre>

<p>Looking at this, I realized that /var/tmp wasn't mounted to allow execution.  That was easy enough to fix after figuring out what it was.  The key is to remount /var/tmp to allow execution:</p>
<pre>
mount -o,remount,rw,exec /var/tmp
</pre>

<p>Once you do that, then you can just run the pecl install command and everything works fine:</p>

<pre>[ro</pre>

<i>Important:</i> Don't forget to change it back once you've done your business:
<pre>
mount -o,remount,rw,noexec /var/tmp
</pre>

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>78</wp:post_id>
<wp:post_date>2010-03-27 16:41:51</wp:post_date>
<wp:post_date_gmt>2010-03-28 00:41:51</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>73-revision-5</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>73</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Installing MongoDB on MediaTemple (dv)</title>
<link>http://blog.phy5ics.com/2010/03/27/73-revision-6/</link>
<pubDate>Sun, 28 Mar 2010 00:42:17 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2010/03/27/73-revision-6/</guid>
<description></description>
<content:encoded><![CDATA[<p>Due to a project that  I've been working on that has some very specific software requirements  I consolidated several separate boxes (from Joyent and MediaTemple's Grid Service) to a new (dv) from  MediaTemple for more flexibility.Â  As part of that migration, I needed to get MongoDB setup on CentOS.Â  The only RPM out there is for MongoDB is 1.2.2, (available here: http://chrislea.com/2010/02/07/mongodb-1-2-2-for-centos-5/).Â  However, I quickly found out that with MT's (dv), there are all sorts of depsolving issues with the Plesk psa packages and boost.Â  So after all sorts of hell with yum, I decided to give the pre-compiled binaries a shot, and much to my dismay, they worked a treat with no fussing. I ran into further issues with installing the MongoDB PHP extension via pecl, but figured out how to work around those as well.  In an effort to help out those that might run into this as well, here are instructions on how to get it running on an MT (dv).</p>
<p style="font-size: 19.5px; line-height: 28.5px;"><!--more--></p>

<strong>Here is the dependency hell that I ran into after adding the repository:</strong>
<pre># yum install --enablerepo=chl mongo-server mongo
Loaded plugins: fastestmirror, protectbase
Loading mirror speeds from cached hostfile
 * addons: mirror.trouble-free.net
 * atomic: www4.atomicorp.com
 * base: mirror.rackspace.com
 * epel: serverbeach1.fedoraproject.org
 * extras: mirrors.unbornmedia.com
 * rpmforge: apt.sw.be
 * updates: updates.interworx.info
0 packages excluded due to repository protections
Setting up Install Process
Resolving Dependencies
--> Running transaction check
---> Package mongo.i386 0:1.2.2-mongodb_2 set to be updated
--> Processing Dependency: boost >= 1.35 for package: mongo
--> Processing Dependency: libboost_program_options-mt.so.4 for package: mongo
--> Processing Dependency: libboost_filesystem-mt.so.4 for package: mongo
--> Processing Dependency: libjs.so.1 for package: mongo
--> Processing Dependency: libboost_thread-mt.so.4 for package: mongo
--> Processing Dependency: libboost_system-mt.so.4 for package: mongo
---> Package mongo-server.i386 0:1.2.2-mongodb_2 set to be updated
--> Running transaction check
--> Processing Dependency: libboost_date_time.so.2 for package: psa
--> Processing Dependency: libboost_filesystem.so.2 for package: psa
---> Package boost.i386 0:1.37.0-6 set to be updated
---> Package js.i386 1:1.7.0-1.el5.rf set to be updated
--> Finished Dependency Resolution
psa-8.6.0-cos5.build86080722.00.i586 from installed has depsolving problems
  --> Missing Dependency: libboost_filesystem.so.2 is needed by package 
psa-8.6.0-cos5.build86080722.00.i586 (installed)
psa-8.6.0-cos5.build86080722.00.i586 from installed has depsolving problems
  --> Missing Dependency: libboost_date_time.so.2 is needed by package 
psa-8.6.0-cos5.build86080722.00.i586 (installed)
Error: Missing Dependency: libboost_date_time.so.2 is needed by package 
psa-8.6.0-cos5.build86080722.00.i586 (installed)
Error: Missing Dependency: libboost_filesystem.so.2 is needed by package 
psa-8.6.0-cos5.build86080722.00.i586 (installed)
 You could try using --skip-broken to work around the problem
 You could try running: package-cleanup --problems
                        package-cleanup --dupes
                        rpm -Va --nofiles --nodigest
The program package-cleanup is found in the yum-utils package.</pre>

<strong>Installing MongoDB from Pre-Compiled Binaries</strong>
<p>Log in to your (dv) and su to root and get to work:</p>
<pre>
[user@hostname]# su root
[root@hostname]# cd /var/lib
[root@hostname]# wget http://downloads.mongodb.org/linux/mongodb-linux-i686-1.4.0.tgz
[root@hostname]# tar -xvf mongodb-linux-i686-1.4.0.tgz
</pre>

<p>From there, you'll want to create the directories for the database:</p>

<pre>
[root@hostname]# mkdir /data
[root@hostname]# mkdir /data/db
</pre>

<p>That's all there is to it.  You can test your install by doing the following:</p>

<pre>
[root@hostname]# ./mongod
./mongod --help for help and startup options
Sat Mar 27 09:59:16 Mongo DB : starting : pid = 24197 port = 27017 dbpath = /data/db/ master = 0 slave = 0  32-bit 

** NOTE: when using MongoDB 32 bit, you are limited to about 2 gigabytes of data
**       see http://blog.mongodb.org/post/137788967/32-bit-limitations for more

Sat Mar 27 09:59:16 db version v1.4.0, pdfile version 4.5
Sat Mar 27 09:59:16 git version: 514f8bbab657c1dc110d45eea6ea33de296dbb26
Sat Mar 27 09:59:16 sys info: Linux domU-12-31-39-01-70-B4 2.6.21.7-2.fc8xen #1 SMP Fri Feb 15 12:39:36 EST 2008 i686 BOOST_LIB_VERSION=1_37
Sat Mar 27 09:59:16 waiting for connections on port 27017
Sat Mar 27 09:59:16 web admin interface listening on port 28017
</pre>

<strong>Installing MongoDB Driver for PHP</strong>
<p>Here is what I ran into at first:</p>
<pre>
[root@hostname]# cd /var/tmp
[root@hostname]# pecl install mongo
downloading mongo-1.0.6.tgz ...
Starting to download mongo-1.0.6.tgz (53,175 bytes)
.............done: 53,175 bytes
16 source files, building
running: phpize
Configuring for:
PHP Api Version:         20041225
Zend Module Api No:      20060613
Zend Extension Api No:   220060519
building in /var/tmp/pear-build-phy5ics/mongo-1.0.6
running: /var/cache/php-pear/mongo-1.0.6/configure
checking for egrep... grep -E
checking for a sed that does not truncate output... //bin/sed
checking for gcc... gcc
checking for C compiler default output file name... a.out
checking whether the C compiler works... configure: error: cannot run C compiled programs.
If you meant to cross compile, use `--host'.
See `config.log' for more details.
ERROR: `/var/cache/php-pear/mongo-1.0.6/configure' failed
</pre>

<p>Looking at this, I realized that /var/tmp wasn't mounted to allow execution.  That was easy enough to fix after figuring out what it was.  The key is to remount /var/tmp to allow execution:</p>
<pre>
mount -o,remount,rw,exec /var/tmp
</pre>

<p>Once you do that, then you can just run the pecl install command and everything works fine:</p>

<pre>[root@hostname]# pecl install mongo</pre>

<p><i>Important:</i> Don't forget to change it back once you've done your business:</p>
<pre>
mount -o,remount,rw,noexec /var/tmp
</pre>

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>79</wp:post_id>
<wp:post_date>2010-03-27 16:42:17</wp:post_date>
<wp:post_date_gmt>2010-03-28 00:42:17</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>73-revision-6</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>73</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Installing MongoDB on MediaTemple (dv)</title>
<link>http://blog.phy5ics.com/2010/03/27/installing-mongodb-on-mediatemple-dv/</link>
<pubDate>Sun, 28 Mar 2010 00:43:42 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[mongodb]]></category>

		<category domain="category" nicename="mongodb"><![CDATA[mongodb]]></category>

		<category domain="tag"><![CDATA[hosting]]></category>

		<category domain="tag" nicename="hosting"><![CDATA[hosting]]></category>

		<category domain="tag"><![CDATA[mediatemple]]></category>

		<category domain="tag" nicename="mediatemple"><![CDATA[mediatemple]]></category>

		<category domain="tag"><![CDATA[mongodb]]></category>

		<category domain="tag" nicename="mongodb"><![CDATA[mongodb]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/?p=73</guid>
<description></description>
<content:encoded><![CDATA[<p>Due to a project that  I've been working on that has some very specific software requirements  I consolidated several separate boxes (from Joyent and MediaTemple's Grid Service) to a new (dv) from  MediaTemple for more flexibility.Â  As part of that migration, I needed to get MongoDB setup on CentOS.Â  The only RPM out there is for MongoDB is 1.2.2, (available here: http://chrislea.com/2010/02/07/mongodb-1-2-2-for-centos-5/).Â  However, I quickly found out that with MT's (dv), there are all sorts of depsolving issues with the Plesk psa packages and boost.Â  So after all sorts of hell with yum, I decided to give the pre-compiled binaries a shot, and much to my dismay, they worked a treat with no fussing. I ran into further issues with installing the MongoDB PHP extension via pecl, but figured out how to work around those as well.  In an effort to help out those that might run into this as well, here are instructions on how to get it running on an MT (dv).</p>
<p style="font-size: 19.5px; line-height: 28.5px;"><!--more--></p>

<strong>Here is the dependency hell that I ran into after adding the repository:</strong>
<pre># yum install --enablerepo=chl mongo-server mongo
Loaded plugins: fastestmirror, protectbase
Loading mirror speeds from cached hostfile
 * addons: mirror.trouble-free.net
 * atomic: www4.atomicorp.com
 * base: mirror.rackspace.com
 * epel: serverbeach1.fedoraproject.org
 * extras: mirrors.unbornmedia.com
 * rpmforge: apt.sw.be
 * updates: updates.interworx.info
0 packages excluded due to repository protections
Setting up Install Process
Resolving Dependencies
--> Running transaction check
---> Package mongo.i386 0:1.2.2-mongodb_2 set to be updated
--> Processing Dependency: boost >= 1.35 for package: mongo
--> Processing Dependency: libboost_program_options-mt.so.4 for package: mongo
--> Processing Dependency: libboost_filesystem-mt.so.4 for package: mongo
--> Processing Dependency: libjs.so.1 for package: mongo
--> Processing Dependency: libboost_thread-mt.so.4 for package: mongo
--> Processing Dependency: libboost_system-mt.so.4 for package: mongo
---> Package mongo-server.i386 0:1.2.2-mongodb_2 set to be updated
--> Running transaction check
--> Processing Dependency: libboost_date_time.so.2 for package: psa
--> Processing Dependency: libboost_filesystem.so.2 for package: psa
---> Package boost.i386 0:1.37.0-6 set to be updated
---> Package js.i386 1:1.7.0-1.el5.rf set to be updated
--> Finished Dependency Resolution
psa-8.6.0-cos5.build86080722.00.i586 from installed has depsolving problems
  --> Missing Dependency: libboost_filesystem.so.2 is needed by package 
psa-8.6.0-cos5.build86080722.00.i586 (installed)
psa-8.6.0-cos5.build86080722.00.i586 from installed has depsolving problems
  --> Missing Dependency: libboost_date_time.so.2 is needed by package 
psa-8.6.0-cos5.build86080722.00.i586 (installed)
Error: Missing Dependency: libboost_date_time.so.2 is needed by package 
psa-8.6.0-cos5.build86080722.00.i586 (installed)
Error: Missing Dependency: libboost_filesystem.so.2 is needed by package 
psa-8.6.0-cos5.build86080722.00.i586 (installed)
 You could try using --skip-broken to work around the problem
 You could try running: package-cleanup --problems
                        package-cleanup --dupes
                        rpm -Va --nofiles --nodigest
The program package-cleanup is found in the yum-utils package.</pre>

<strong>Installing MongoDB from Pre-Compiled Binaries</strong>
<p>Log in to your (dv) and su to root and get to work:</p>
<pre>
[user@hostname]# su root
[root@hostname]# cd /var/lib
[root@hostname]# wget http://downloads.mongodb.org/linux/mongodb-linux-i686-1.4.0.tgz
[root@hostname]# tar -xvf mongodb-linux-i686-1.4.0.tgz
</pre>

<p>From there, you'll want to create the directories for the database:</p>

<pre>
[root@hostname]# mkdir /data
[root@hostname]# mkdir /data/db
</pre>

<p>That's all there is to it.  You can test your install by doing the following:</p>

<pre>
[root@hostname]# ./mongod
./mongod --help for help and startup options
Sat Mar 27 09:59:16 Mongo DB : starting : pid = 24197 port = 27017 dbpath = /data/db/ master = 0 slave = 0  32-bit 

** NOTE: when using MongoDB 32 bit, you are limited to about 2 gigabytes of data
**       see http://blog.mongodb.org/post/137788967/32-bit-limitations for more

Sat Mar 27 09:59:16 db version v1.4.0, pdfile version 4.5
Sat Mar 27 09:59:16 git version: 514f8bbab657c1dc110d45eea6ea33de296dbb26
Sat Mar 27 09:59:16 sys info: Linux domU-12-31-39-01-70-B4 2.6.21.7-2.fc8xen #1 SMP Fri Feb 15 12:39:36 EST 2008 i686 BOOST_LIB_VERSION=1_37
Sat Mar 27 09:59:16 waiting for connections on port 27017
Sat Mar 27 09:59:16 web admin interface listening on port 28017
</pre>

<strong>Installing MongoDB Driver for PHP</strong>
<p>Here is what I ran into at first:</p>
<pre>
[root@hostname]# cd /var/tmp
[root@hostname]# pecl install mongo
downloading mongo-1.0.6.tgz ...
Starting to download mongo-1.0.6.tgz (53,175 bytes)
.............done: 53,175 bytes
16 source files, building
running: phpize
Configuring for:
PHP Api Version:         20041225
Zend Module Api No:      20060613
Zend Extension Api No:   220060519
building in /var/tmp/pear-build-phy5ics/mongo-1.0.6
running: /var/cache/php-pear/mongo-1.0.6/configure
checking for egrep... grep -E
checking for a sed that does not truncate output... //bin/sed
checking for gcc... gcc
checking for C compiler default output file name... a.out
checking whether the C compiler works... configure: error: cannot run C compiled programs.
If you meant to cross compile, use `--host'.
See `config.log' for more details.
ERROR: `/var/cache/php-pear/mongo-1.0.6/configure' failed
</pre>

<p>Looking at this, I realized that /var/tmp wasn't mounted to allow execution.  That was easy enough to fix after figuring out what it was.  The key is to remount /var/tmp to allow execution:</p>
<pre>
mount -o,remount,rw,exec /var/tmp
</pre>

<p>Once you do that, then you can just run the pecl install command and everything works fine:</p>

<pre>[root@hostname]# pecl install mongo</pre>

<p><i>Important:</i> Don't forget to change it back once you've done your business:</p>
<pre>
mount -o,remount,rw,noexec /var/tmp
</pre>

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>73</wp:post_id>
<wp:post_date>2010-03-27 16:43:42</wp:post_date>
<wp:post_date_gmt>2010-03-28 00:43:42</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>installing-mongodb-on-mediatemple-dv</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1269737022</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>3995</wp:comment_id>
<wp:comment_author><![CDATA[Brus]]></wp:comment_author>
<wp:comment_author_email>bruno@partidosurrealista.com</wp:comment_author_email>
<wp:comment_author_url>http://partidosurrealista.com</wp:comment_author_url>
<wp:comment_author_IP>189.253.119.156</wp:comment_author_IP>
<wp:comment_date>2010-10-01 12:02:08</wp:comment_date>
<wp:comment_date_gmt>2010-10-01 20:02:08</wp:comment_date_gmt>
<wp:comment_content><![CDATA[You just saved my life!]]></wp:comment_content>
<wp:comment_approved>0</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3996</wp:comment_id>
<wp:comment_author><![CDATA[zane]]></wp:comment_author>
<wp:comment_author_email>zanematthew@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://blog.zanematthew.com</wp:comment_author_url>
<wp:comment_author_IP>71.179.168.50</wp:comment_author_IP>
<wp:comment_date>2010-11-18 19:09:37</wp:comment_date>
<wp:comment_date_gmt>2010-11-19 03:09:37</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I just wanted to share my experiences with you on installing mongodb on media temples ve account: http://blog.zanematthew.com/2010/11/setting-up-mongodb-on-media-temple-ve-server/

I'll be using mongo for a future project.]]></wp:comment_content>
<wp:comment_approved>0</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3997</wp:comment_id>
<wp:comment_author><![CDATA[Atticus]]></wp:comment_author>
<wp:comment_author_email>beatharvard@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://Website</wp:comment_author_url>
<wp:comment_author_IP>68.121.18.160</wp:comment_author_IP>
<wp:comment_date>2011-02-12 05:16:51</wp:comment_date>
<wp:comment_date_gmt>2011-02-12 13:16:51</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hello John,

I tried to install the php-mongo driver on a new (dv) 4.0 server just now. I'm logged in as root, but get "mount: permission denied" when running the mount command you mention.]]></wp:comment_content>
<wp:comment_approved>0</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4003</wp:comment_id>
<wp:comment_author><![CDATA[Cordelia]]></wp:comment_author>
<wp:comment_author_email>brunomakson27@hotmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.bing.com/</wp:comment_author_url>
<wp:comment_author_IP>24.178.120.218</wp:comment_author_IP>
<wp:comment_date>2011-04-11 16:05:31</wp:comment_date>
<wp:comment_date_gmt>2011-04-12 00:05:31</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks alot - your answer solved all my problems after sveeral days struggling]]></wp:comment_content>
<wp:comment_approved>0</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>4005</wp:comment_id>
<wp:comment_author><![CDATA[Larry Williamson]]></wp:comment_author>
<wp:comment_author_email>lawrencealan@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://r0b0tz.com</wp:comment_author_url>
<wp:comment_author_IP>74.72.206.128</wp:comment_author_IP>
<wp:comment_date>2011-04-16 10:04:11</wp:comment_date>
<wp:comment_date_gmt>2011-04-16 18:04:11</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Just for reference, I've run into NoExec (dv) issues where the mount is denied.
You can work around this by doing the following:

# mkdir -p /root/chroot /root/tmp
# mount --bind / /root/chroot
# mount --bind /root/tmp /root/chroot/tmp
# chroot /root/chroot

(do the pecl install)

# exit

See: http://wiki.mediatemple.net/w/%28dv%29:Noexec_and_/tmp_troubleshooting]]></wp:comment_content>
<wp:comment_approved>0</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>3986</wp:comment_id>
<wp:comment_author><![CDATA[omri]]></wp:comment_author>
<wp:comment_author_email>omrisc@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://Website</wp:comment_author_url>
<wp:comment_author_IP>81.218.134.2</wp:comment_author_IP>
<wp:comment_date>2010-06-15 04:13:14</wp:comment_date>
<wp:comment_date_gmt>2010-06-15 12:13:14</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Got the same dependency issue and your post helped a lot
Thanks!]]></wp:comment_content>
<wp:comment_approved>0</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>FreshDirect iPhone App Featured in App Store Staff Pics</title>
<link>http://blog.phy5ics.com/2010/04/22/freshdirect-iphone-app-featured-in-app-store-staff-pics/</link>
<pubDate>Thu, 22 Apr 2010 22:39:28 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/?p=87</guid>
<description></description>
<content:encoded><![CDATA[<p>A week after being a featured iPhone app in the Apple App Store, continued interest in what is arguably the most complex and robust e-commerce application in the App Store picks up another acknowledgement.  It has now been featured as a Staff Pick, standing alongside some other amazing apps such as Tweetie 2, FlightTrack Pro, Brightkite and Moviefone.</p>

<p><img src="http://phy5ics.com/gfx/projects/freshdirect-iphone-staff-picks.png" width="700"/></p>

<p><a href="http://itunes.apple.com/us/app/freshdirect/id346631494?mt=8" target="_blank">Download the free FreshDirect iPhone app</a><br/><a href="http://phy5ics.com/projects/freshdirect-iphone-app">View project details</a></p>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>87</wp:post_id>
<wp:post_date>2010-04-22 14:39:28</wp:post_date>
<wp:post_date_gmt>2010-04-22 22:39:28</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>freshdirect-iphone-app-featured-in-app-store-staff-pics</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1275260274</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Bluetooth + GPS + ActionScript - Part 1 - Hardware</title>
<link>http://blog.phy5ics.com/2010/05/28/43-revision-3/</link>
<pubDate>Fri, 28 May 2010 16:48:50 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2010/05/28/43-revision-3/</guid>
<description></description>
<content:encoded><![CDATA[<strong>Overview</strong>
For this project, my goal was to get GPS data into my Mac for some visualization experiments with ActionScript.  After some initial prototypes that worked well using an RS232-to-USB converter, I decided that wasn't slick enough and had it too many wires.  I like things nice and clean around my desk, so I opted for adding Bluetooth in place of a USB converter.

After experimenting with some different methods, some using microprocessors and some not, I opted for the simpler route, eliminating the microprocessor.  A microprocessor doesn't add anything other than cost for the basic purpose of this project.  Although stay tuned for another posting about integrating a similar configuration with the Make Controller and Arduino microprocessors.

<!--more-->
<strong>Parts List</strong>
<ul>
	<li> <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=114" target="_blank">5V regulated power supply</a></li>
	<li> <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=158" target="_blank">BlueSMiRF Bluetooth Module</a></li>
	<li> <a href="http://www.sparkfun.com/commerce/product_info.php?products_id=465" target="_blank">EM406A GPS Module</a></li>
	<li> Extra 6-pin interface cable</li>
	<li> 9V battery holder</li>
	<li> Headers</li>
	<li> Breadboard</li>
	<li> Solid 22-gauge wire</li>
	<li> Soldering iron</li>
</ul>
<strong>5v Power Supply</strong>
Select a 5V power supply to use.  In this case, I'm using a switchable 3.3V/5V power supply kit that I picked up from SparkFun.  I made a slight modification to it and soldered a 9V battery adaptor to it to make it a bit more flexible and truly wireless rather than using the standard 9V DC wall adaptor.  This is just my preference for prototyping.  When I get down to a final design, I generally switch it up in favor of a simple voltage regulator to save space and weight.

<strong>BlueSMiRF Embedded Bluetooth Serial RF Link</strong>
The BlueSMiRF module is sweet little device, providing an easy way to link any project using a serial interface to a computer (or another BlueSMiRF module).  Simply connect the TX, RX to another serial device along with vcc (4.5V-5.5V) and ground and it is ready to pair.

<strong>EM406A GPS Board</strong>
This small board uses the SiRF Star III chipset, which is a nice chipset that is relatively stingy on power supply and can fix its position - known as TTFF (Time To First Fix), even in indoor environments, in a matter of 30 seconds or so.  Just keep in mind that the odd peach-colored ceramic part is the antenna and should point towards the sky.   Many other chipsets offer significantly less in terms of performance and most are unable to fix a position unless outside.  I was sold on it since happens to be the same chipset that I have in my Garmin CS60x, a considerably more expensive device.

Besides all that, the EM406A is a perfect candidate for integration with physical computing projects because it's output is serial.  It starts outputting NMEA strings at 4800 baud once its position is fixed.  NMEA 0183 is a standard with which GPS data is transmitted from a device using comma-delimited strings.  For more information on NMEA, consult <a href="http://www.gpsinformation.org/dale/nmea.htm" target="_blank">this resource</a>.

The documentation for the board itself is well done.  In addition to the NMEA strings that are broadcast from the board itself, the EM406A can have commands sent to it via its serial interface to get specific NMEA data back.Â  The only catch is be sure to get an 6-pin extra interface cable along with the board itself.Â  I cut the interface cable in half and then soldered the wires some headers to make prototyping easier.  Otherwise it's going to be impossible to do anything useful with it.

<strong>Schematic</strong>
Now that we have all that down, here's a little schematic of how everything is hooked up together:

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_schematic_rev1.jpg"><img class="alignnone size-full wp-image-54" title="gps_bt_schematic_rev1" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_schematic_rev1.jpg" alt="" width="500" height="357" /></a>

<strong>Photograph</strong>

<a href="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_2.jpg"><img class="alignnone size-full wp-image-56" title="gps_bt_2" src="http://phy5ics.com/blog/wp-content/uploads/2008/11/gps_bt_2.jpg" alt="" width="500" height="332" /></a>
<strong>Next Article</strong>
In the next post, I'll be working through the software aspects of this project.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>83</wp:post_id>
<wp:post_date>2010-05-28 08:48:50</wp:post_date>
<wp:post_date_gmt>2010-05-28 16:48:50</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>43-revision-3</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>43</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Holiday Infographics</title>
<link>http://blog.phy5ics.com/2010/05/29/68-revision-4/</link>
<pubDate>Sun, 30 May 2010 03:58:20 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2010/05/29/68-revision-4/</guid>
<description></description>
<content:encoded><![CDATA[<a href="http://blog.phy5ics.com/wp-content/uploads/2009/12/happy_holidays.jpg"><img class="alignnone size-full wp-image-69" title="happy_holidays" src="http://blog.phy5ics.com/wp-content/uploads/2009/12/happy_holidays.jpg" /></a>

Happy Holidays from phy5ics!]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>86</wp:post_id>
<wp:post_date>2010-05-29 19:58:20</wp:post_date>
<wp:post_date_gmt>2010-05-30 03:58:20</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>68-revision-4</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>68</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Cannes Lions Touchwall Wins Media Post Award</title>
<link>http://blog.phy5ics.com/2010/05/30/84-revision/</link>
<pubDate>Sun, 30 May 2010 21:55:45 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2010/05/30/84-revision/</guid>
<description></description>
<content:encoded><![CDATA[<p>I am pleased to announce that the Cannes Lions Touchwall 2009 captured the "Best integration with experiential/activity" award given out by MediaPost's Digital Out of Home division.Â  This is a satisfying validation of an experience that takes a technology for which very few practical applications exist (touchwalls) and augmented it with an unobtrusive form of authentication via RFID to provide a compelling, personalized informational and social experience for Cannes Lions Festival delegates.</p>

<p><img alt="" src="http://phy5ics.com/gfx/projects/cannes-interior.png" title="Cannes Lions 2009 Entrance" class="alignnone" width="440" height="293" /></p>

<p>For more details and the other winners, see <a href="http://www.mediapost.com/events/?/showID/DigitalOutofHomeAwards.10.NYC/type/Content/itemID/1233/DigitalOut-of-HomeAwards-WINNER.html">MediaPost Digital Out-of-Home Awards</a></p>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>85</wp:post_id>
<wp:post_date>2010-05-30 13:55:45</wp:post_date>
<wp:post_date_gmt>2010-05-30 21:55:45</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>84-revision</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>84</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Cannes Lions Touchwall Wins Media Post Award</title>
<link>http://blog.phy5ics.com/2010/05/30/cannes-lions-touchwall-wins-media-post-award/</link>
<pubDate>Sun, 30 May 2010 21:56:14 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[General Technology]]></category>

		<category domain="category" nicename="general-technology"><![CDATA[General Technology]]></category>

		<category><![CDATA[Physical Computing]]></category>

		<category domain="category" nicename="physical-computing"><![CDATA[Physical Computing]]></category>

		<category><![CDATA[RFID]]></category>

		<category domain="category" nicename="rfid"><![CDATA[RFID]]></category>

		<category><![CDATA[Schematic]]></category>

		<category domain="category" nicename="schematic"><![CDATA[Schematic]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/?p=84</guid>
<description></description>
<content:encoded><![CDATA[<p>I am pleased to announce that the Cannes Lions Touchwall 2009 captured the "Best integration with experiential/activity" award given out by MediaPost's Digital Out of Home division.Â  This is a satisfying validation of an experience that takes a technology for which very few practical applications exist (touchwalls) and augmented it with an unobtrusive form of authentication via RFID to provide a compelling, personalized informational and social experience for Cannes Lions Festival delegates.</p>

<p><img alt="" src="http://phy5ics.com/gfx/projects/cannes-interior.png" title="Cannes Lions 2009 Entrance" class="alignnone" width="440" height="293" /></p>

<p>For more details and the other winners, see <a href="http://www.mediapost.com/events/?/showID/DigitalOutofHomeAwards.10.NYC/type/Content/itemID/1233/DigitalOut-of-HomeAwards-WINNER.html" target="_blank">MediaPost Digital Out-of-Home Awards</a><br/><a href="http://phy5ics.com/projects/cannes-lions-touchwall">View project details</a></p>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>84</wp:post_id>
<wp:post_date>2010-05-30 13:56:14</wp:post_date>
<wp:post_date_gmt>2010-05-30 21:56:14</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>cannes-lions-touchwall-wins-media-post-award</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1275260226</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Cannes Lions Touchwall Wins Media Post Award</title>
<link>http://blog.phy5ics.com/2010/05/30/84-revision-2/</link>
<pubDate>Sun, 30 May 2010 21:56:14 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2010/05/30/84-revision-2/</guid>
<description></description>
<content:encoded><![CDATA[<p>I am pleased to announce that the Cannes Lions Touchwall 2009 captured the "Best integration with experiential/activity" award given out by MediaPost's Digital Out of Home division.Â  This is a satisfying validation of an experience that takes a technology for which very few practical applications exist (touchwalls) and augmented it with an unobtrusive form of authentication via RFID to provide a compelling, personalized informational and social experience for Cannes Lions Festival delegates.</p>

<p><img alt="" src="http://phy5ics.com/gfx/projects/cannes-interior.png" title="Cannes Lions 2009 Entrance" class="alignnone" width="440" height="293" /></p>

<p>For more details and the other winners, see <a href="http://www.mediapost.com/events/?/showID/DigitalOutofHomeAwards.10.NYC/type/Content/itemID/1233/DigitalOut-of-HomeAwards-WINNER.html">MediaPost Digital Out-of-Home Awards</a></p>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>92</wp:post_id>
<wp:post_date>2010-05-30 13:56:14</wp:post_date>
<wp:post_date_gmt>2010-05-30 21:56:14</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>84-revision-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>84</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>FreshDirect iPhone App Featured in App Store Staff Pics</title>
<link>http://blog.phy5ics.com/2010/05/30/87-revision/</link>
<pubDate>Sun, 30 May 2010 22:43:30 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2010/05/30/87-revision/</guid>
<description></description>
<content:encoded><![CDATA[<p>A week after being a featured iPhone app in the Apple App Store, continued interest in what is arguably the most complex and robust e-commerce application in the App Store picks up another acknowledgement.  It has now been featured as a Staff Pick, standing alongside some other amazing apps such as Tweetie 2, FlightTrack Pro, Brightkite and Moviefone.</p>

<p><img src="http://phy5ics.com/gfx/projects/freshdirect-iphone-staff-picks.png"/></p>

<p><a href="http://itunes.apple.com/us/app/freshdirect/id346631494?mt=8" target="_blank">Download the free FreshDirect app</a></p>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>88</wp:post_id>
<wp:post_date>2010-05-30 14:43:30</wp:post_date>
<wp:post_date_gmt>2010-05-30 22:43:30</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>87-revision</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>87</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>FreshDirect iPhone App Featured in App Store Staff Pics</title>
<link>http://blog.phy5ics.com/2010/05/30/87-revision-2/</link>
<pubDate>Sun, 30 May 2010 22:44:01 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2010/05/30/87-revision-2/</guid>
<description></description>
<content:encoded><![CDATA[<p>A week after being a featured iPhone app in the Apple App Store, continued interest in what is arguably the most complex and robust e-commerce application in the App Store picks up another acknowledgement.  It has now been featured as a Staff Pick, standing alongside some other amazing apps such as Tweetie 2, FlightTrack Pro, Brightkite and Moviefone.</p>

<p><img src="http://phy5ics.com/gfx/projects/freshdirect-iphone-staff-picks.png"/></p>

<p><a href="http://itunes.apple.com/us/app/freshdirect/id346631494?mt=8" target="_blank">Download the free FreshDirect app</a></p>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>89</wp:post_id>
<wp:post_date>2010-05-30 14:44:01</wp:post_date>
<wp:post_date_gmt>2010-05-30 22:44:01</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>87-revision-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>87</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>FreshDirect iPhone App Featured in App Store Staff Pics</title>
<link>http://blog.phy5ics.com/2010/05/30/87-revision-3/</link>
<pubDate>Sun, 30 May 2010 22:44:48 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2010/05/30/87-revision-3/</guid>
<description></description>
<content:encoded><![CDATA[<p>A week after being a featured iPhone app in the Apple App Store, continued interest in what is arguably the most complex and robust e-commerce application in the App Store picks up another acknowledgement.  It has now been featured as a Staff Pick, standing alongside some other amazing apps such as Tweetie 2, FlightTrack Pro, Brightkite and Moviefone.</p>

<p><img src="http://phy5ics.com/gfx/projects/freshdirect-iphone-staff-picks.png" width="700"/></p>

<p><a href="http://itunes.apple.com/us/app/freshdirect/id346631494?mt=8" target="_blank">Download the free FreshDirect app</a></p>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>94</wp:post_id>
<wp:post_date>2010-05-30 14:44:48</wp:post_date>
<wp:post_date_gmt>2010-05-30 22:44:48</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>87-revision-3</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>87</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>KnifeandPork.com Launches</title>
<link>http://blog.phy5ics.com/2010/05/30/90-revision/</link>
<pubDate>Sun, 30 May 2010 22:47:01 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2010/05/30/90-revision/</guid>
<description></description>
<content:encoded><![CDATA[<p>I am excited to announce that my new project for 2010 and beyond has launched.  While not technology related, it represents the other passions that I hold near-and-dear: cooking and photography.  The new year starts off properly with Black-Eyed Peas with Smoked Ham Hocks served alonside Collard Greens with Bacon and Red Onion.  Be sure to check back often, as I cook nearly every night.</p>

<p><a href="http://www.flickr.com/photos/phy5ics/4236177532/" title="Collard Greens by phy5ics, on Flickr"><img src="http://farm3.static.flickr.com/2764/4236177532_1950d87f2a.jpg" width="500" height="336" alt="Collard Greens" /></a></p>

<p><a href="http://knifeandpork.com/" target="_blank">Visit knifeandpork.com</a></p>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>91</wp:post_id>
<wp:post_date>2010-05-30 14:47:01</wp:post_date>
<wp:post_date_gmt>2010-05-30 22:47:01</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>90-revision</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>90</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Cannes Lions Touchwall Wins Media Post Award</title>
<link>http://blog.phy5ics.com/2010/05/30/84-revision-3/</link>
<pubDate>Sun, 30 May 2010 22:48:23 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2010/05/30/84-revision-3/</guid>
<description></description>
<content:encoded><![CDATA[<p>I am pleased to announce that the Cannes Lions Touchwall 2009 captured the "Best integration with experiential/activity" award given out by MediaPost's Digital Out of Home division.Â  This is a satisfying validation of an experience that takes a technology for which very few practical applications exist (touchwalls) and augmented it with an unobtrusive form of authentication via RFID to provide a compelling, personalized informational and social experience for Cannes Lions Festival delegates.</p>

<p><img alt="" src="http://phy5ics.com/gfx/projects/cannes-interior.png" title="Cannes Lions 2009 Entrance" class="alignnone" width="440" height="293" /></p>

<p>For more details and the other winners, see <a href="http://www.mediapost.com/events/?/showID/DigitalOutofHomeAwards.10.NYC/type/Content/itemID/1233/DigitalOut-of-HomeAwards-WINNER.html" target="_blank">MediaPost Digital Out-of-Home Awards</a></p>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>93</wp:post_id>
<wp:post_date>2010-05-30 14:48:23</wp:post_date>
<wp:post_date_gmt>2010-05-30 22:48:23</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>84-revision-3</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>84</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Command Line Base64 Encoding</title>
<link>http://blog.phy5ics.com/2011/04/01/95-revision/</link>
<pubDate>Fri, 01 Apr 2011 17:06:41 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/2011/04/01/95-revision/</guid>
<description></description>
<content:encoded><![CDATA[I'm currently authoring an AIR 2.5 application in HTML/CSS/JS and ran into some issues with @font-face embedding where no matter what I did the fonts would not load and render correctly despite trying both TTF and OTF versions. Â After that, I opted to try base64-encoding of the fonts for inclusion via a data url, since they are now supported in AIR. Â I'm running on OS X and have openssl installed, so I opted to run the following command, which I've used in the past for generated base64-encoded files for other Webkit-based projects and didn't have any issues:
<p><code>shell# openssl base64 -in UniversLTStd.otf -out Std</code></p>
This produced a proper base64 file that worked perfectly in Safari, but when the same encoded file was inserted into CSS and launched in the AIR runtime, it resulted in the display of the default font.  After ruminating a bit on the issue, I suspected that the line breaks produced by the openssl encoding were the issue, and not feeling particularly like removing line breaks by hand on 709 lines of code, I busted out the following:
<p><code>shell# tr -d 'rn' < Std > StdNoBreaks</code></p>
I then used the output in the resulting file as the data url and it worked like a charm in the AIR runtime with the following CSS:
<p>
<code>src: url("data:font/opentype;charset=utf-8;base64,[INSERT_BASE64_ENCODED_FILE_HERE]");</code></p>
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>96</wp:post_id>
<wp:post_date>2011-04-01 09:06:41</wp:post_date>
<wp:post_date_gmt>2011-04-01 17:06:41</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>95-revision</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>95</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>revision</wp:post_type>
<wp:post_password></wp:post_password>
	</item>
<item>
<title>Command Line Base64 Encoding</title>
<link>http://blog.phy5ics.com/2011/04/01/command-line-base64-encoding/</link>
<pubDate>Fri, 01 Apr 2011 17:07:03 +0000</pubDate>
<dc:creator><![CDATA[Barton]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://blog.phy5ics.com/?p=95</guid>
<description></description>
<content:encoded><![CDATA[I'm currently authoring an AIR 2.5 application in HTML/CSS/JS and ran into some issues with @font-face embedding where no matter what I did the fonts would not load and render correctly despite trying both TTF and OTF versions. Â After that, I opted to try base64-encoding of the fonts for inclusion via a data url, since they are now supported in AIR. Â I'm running on OS X and have openssl installed, so I opted to run the following command, which I've used in the past for generated base64-encoded files for other Webkit-based projects and didn't have any issues:
<p><code>shell# openssl base64 -in UniversLTStd.otf -out Std</code></p>
This produced a proper base64 file that worked perfectly in Safari, but when the same encoded file was inserted into CSS and launched in the AIR runtime, it resulted in the display of the default font.  After ruminating a bit on the issue, I suspected that the line breaks produced by the openssl encoding were the issue, and not feeling particularly like removing line breaks by hand on 709 lines of code, I busted out the following:
<p><code>shell# tr -d '\r\n' < Std > StdNoBreaks</code></p>
I then used the output in the resulting file as the data url and it worked like a charm in the AIR runtime with the following CSS:
<p>
<code>src: url("data:font/opentype;charset=utf-8;base64,[INSERT_BASE64_ENCODED_DATA_HERE]");</code></p>
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>95</wp:post_id>
<wp:post_date>2011-04-01 09:07:03</wp:post_date>
<wp:post_date_gmt>2011-04-01 17:07:03</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>command-line-base64-encoding</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1301677624</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>4010</wp:comment_id>
<wp:comment_author><![CDATA[python base64]]></wp:comment_author>
<wp:comment_author_email>ana.bel@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://base64decode.net/python-base64-b64decode</wp:comment_author_url>
<wp:comment_author_IP>46.217.121.27</wp:comment_author_IP>
<wp:comment_date>2013-05-13 01:03:45</wp:comment_date>
<wp:comment_date_gmt>2013-05-13 09:03:45</wp:comment_date_gmt>
<wp:comment_content><![CDATA[great share, thank you]]></wp:comment_content>
<wp:comment_approved>0</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
</channel>
</rss>
